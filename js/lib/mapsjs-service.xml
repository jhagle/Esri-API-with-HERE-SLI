<?xml version="1.0"?>
<modules>
  <module name="mapsjs-service">
    <symbols>
      <ns name="H.service" local-name="service" access="public" scope="static" virtual="false" published="true" exported="false">
        <description>
          <prose><p>This namespace contains classes and interfaces related to the <a href="http://developer.here.com/rest-apis">HERE REST
APIs</a>.</p>
<p>In particular this namespace contains implementations of service stubs and
helper functionality to integrate the HERE Maps for JavaScript API
with the following backend services:</p>
<ul>
<li><a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile">HERE Map Tile API</a></li>
<li><a href="http://developer.here.com/rest-apis/documentation/geocoder">HERE Geododer API</a></li>
<li><a href="http://developer.here.com/rest-apis/documentation/routing">HERE Routing API</a></li>
<li><a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">HERE Enterprise Routing API</a></li>
<li><a href="http://developer.here.com/rest-apis/documentation/traffic">HERE Traffic API</a></li>
<li><a href="http://developer.here.com/rest-apis/documentation/places">HERE Places API</a></li>
</ul></prose>
        </description>
        <interface name="H.service.IConfigurable" local-name="IConfigurable" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>An interface represents an object, that can be configured credentials,
settings etc. by <code>H.service.Platform</code></p></prose>
          </description>
          <method name="H.service.IConfigurable#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </interface>
        <class name="H.service.Url" local-name="Url" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents a URL giving access to the individual parts
that make up a URL,such as the scheme, host/domain, path, etc.
Use the static parse method to populate a new URL object from a URL string.
Be aware that URLs with user and password like &quot;ftp://user:password@foo.bar/&quot; are not supported!</p></prose>
          </description>
          <constructor local-name="Url" name="H.service.Url">
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the URL scheme (e.g. &quot;http&quot; or &quot;https&quot; or &quot;mailto&quot;)</p></prose>
              </description>
            </param>
            <param name="host">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the host (or domain) part of the URL</p></prose>
              </description>
            </param>
            <param name="opt_path" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>the path following the host pointing to a
 resource</p></prose>
              </description>
            </param>
            <param name="opt_params" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>the query string parameters of this
 URL</p></prose>
              </description>
            </param>
            <param name="opt_port" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The port of the host on which the host
 listens. If a string is passed it must be convertible to an integer.</p></prose>
              </description>
            </param>
            <param name="opt_anchor" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional anchor part of the URL (usually
 preceded by '#');</p></prose>
              </description>
            </param>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>Throws an error if either the 'scheme' and 'host' are
 undefined, if 'opt_params' was specidied but cannot be processed or if the port
 is defined but cannot be converted to a number.</prose>
              </description>
            </exception>
          </constructor>
          <method name="H.service.Url.fullQualifyURL_" local-name="fullQualifyURL_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A helper method which translates a URL into a full qualified URL</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The URL to full qualify</p></prose>
              </description>
            </param>
            <param name="opt_baseURL" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>The underlying base URL to use.
       If omitted, the base URL of the document which loaded the API is used.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the full qualified URL</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url.getBaseURI_" local-name="getBaseURI_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A helper method to get the base URL of an document</p></prose>
            </description>
            <param name="opt_doc" optional="true">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document" optional="true"/>
              </ctype>
              <description>
                <prose><p>The document to inspect, if omitted, the API document is used</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the base URL</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url.parse" local-name="parse" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function parses a URL string and returns a H.service.Url object. The URL
 string must contain at least a scheme and a host.</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The URL string to parse.</p></prose>
              </description>
            </param>
            <param name="opt_baseURL" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL to use to resolve relative URLs.
       If ommited the base URL of the document which loaded the API is taken.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the parsed URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#clone" local-name="clone" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Clones this URL object. Optionally, mutations can be passed to this function
to modify properties of the cloned object.
Note that URL parameters are not replaced but merged with the parameters of
this instance.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the clone of the URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setScheme" local-name="setScheme" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function sets the scheme of this URL object.</p></prose>
            </description>
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new scheme</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#getScheme" local-name="getScheme" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns the scheme of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the scheme (for example 'http')</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setHost" local-name="setHost" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function sets the host of this URL object.</p></prose>
            </description>
            <param name="host">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new host</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>Throws an error if the host is not a string, empty or if
 the host name contains illegal characters (i.e. starts with '-' or '.' or
 ends with '.').</prose>
              </description>
            </exception>
          </method>
          <method name="H.service.Url#getHost" local-name="getHost" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns the host name of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the host (for example 'api.here.com')</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setPath" local-name="setPath" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function sets the path of this URL object.</p></prose>
            </description>
            <param name="path">
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the new path or a boolean to clear the path</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#getPath" local-name="getPath" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns the path part of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the path (for example 'myresources/resource.html')</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setQuery" local-name="setQuery" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function sets the specified parameters for this URL object. Keys in this object, which
are associated with undefined values will be treated as query string
parameters with no value.</p></prose>
            </description>
            <param name="params">
              <types>
                <type ref="Object"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>a hash of query string parameters specifying the
 parameters to be set.or a boolean to clear the parameters.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#hasQuery" local-name="hasQuery" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns a boolean value indicating whether there are any query string
parameter associated with this URL.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>true if there are parameters, false if none are present</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#getQuery" local-name="getQuery" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns the query object of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>the query object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setPort" local-name="setPort" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This function sets the port number of this URL object.</p></prose>
            </description>
            <param name="port">
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the new port number or a boolean to clear the
 port number (note that 0 is also a boolean)</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>Throws an error if the parameter cannot be converted to a
 number.</prose>
              </description>
            </exception>
          </method>
          <method name="H.service.Url#getPort" local-name="getPort" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This function returns the port number of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the port number</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#setAnchor" local-name="setAnchor" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function sets the anchor of this URL object.</p></prose>
            </description>
            <param name="anchor">
              <types>
                <type ref="string"/>
                <type ref="boolean"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="boolean"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the new anchor or undefined to clear the
 anchor</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#getAnchor" local-name="getAnchor" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function returns the anchor of this Url object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the anchor</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#mergeQuery" local-name="mergeQuery" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function merges the provided parameters into this URL's existing parameters. Key-value
pairs which are defined in the argument and this URL's parameters will be
overwritten. Key-value pairs which are defined in the argument and are not
defined in this URL's parameters will be added. Prototype properties and
function properties will not be merged.</p></prose>
              <example>var url = new H.service.Url(&apos;http&apos;, &apos;api.here.com&apos;);
url.setQuery({ &apos;foo&apos;: &apos;bar&apos; });
url.mergeQuery({ &apos;foo&apos;: &apos;baz&apos;, &apos;bar&apos;: &apos;foo&apos; });

var newQuery = url.getQuery();
newQuery[&apos;foo&apos;] === &apos;bar&apos; // false
newQuery[&apos;foo&apos;] === &apos;baz&apos; // true
newQuery[&apos;bar&apos;] === &apos;foo&apos; // true</example>
            </description>
            <param name="other">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>the parmeters to be merged into this URL's query
 string parameters</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>Throws an error if the argument is not of type 'object'.</prose>
              </description>
            </exception>
          </method>
          <method name="H.service.Url#addSubDomain" local-name="addSubDomain" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function adds a sub-domain to the host of this URL object.</p></prose>
            </description>
            <param name="subDomain">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the sub domain (non-empty string) to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#addSubPath" local-name="addSubPath" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function adds a sub-path to this URL's path</p></prose>
            </description>
            <param name="subPath">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the path to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>this URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#toString" local-name="toString" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function formats this URL object to a full URL string.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the URL's string representation</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#cloneQuery_" local-name="cloneQuery_" access="private" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This function clones this query string object. Optionally a hash of parameter mutations can
 be passed to modify the clone's parameters.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>a new object containing the same key-value pairs as this
 URL object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#mergeQuery_" local-name="mergeQuery_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Merges the provided query parameters into this parameter collection. Existing
query parameters will be overridden with the values of the argument and
non-existing ones will be added. Prototype properties and function
 properties will not be merged.</p></prose>
            </description>
            <param name="params">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>the original parameters to merge to</p></prose>
              </description>
            </param>
            <param name="other">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>the parameters to merge</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>the merged parameters</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#queryToString_" local-name="queryToString_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns the string representation of this Url's query string object.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the formatted URL query string</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url#isQueryEmpty_" local-name="isQueryEmpty_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines whether any query string parameters are registered with
this URL object</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>a boolean value indicating whether this URL object's query
 string is empty</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Url.parseQuery_" local-name="parseQuery_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Creates a populated Url.QueryString object from a query string part of a URL
 string.</p></prose>
            </description>
            <param name="queryString">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the query string (preceded by a &quot;?&quot; character in
 URLs).</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>an object populated with the parameter entries as
 key-value pairs.</p></prose>
              </description>
            </returns>
          </method>
        </class>
        <method name="H.service.jsonp" local-name="jsonp" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose><p>Sends a JSON-P request and invokes the provided callback once the service
 responds.</p></prose>
          </description>
          <param name="options">
            <types>
              <type ref="H.service.JsonpOptions"/>
            </types>
            <ctype>
              <name name="H.service.JsonpOptions"/>
            </ctype>
            <description>
              <prose><p>the options for this JSON-P request</p></prose>
            </description>
          </param>
          <returns>
            <types>
              <type ref="H.service.JsonpRequestHandle"/>
            </types>
            <ctype>
              <name name="H.service.JsonpRequestHandle"/>
            </ctype>
            <description>
              <prose><p>the handle of this request</p></prose>
            </description>
          </returns>
          <method name="H.service.jsonp~cleanup" local-name="cleanup" access="public" scope="inner" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="opt_failure" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.jsonp.handleResponse" local-name="handleResponse" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This method searches returns handler for incomming
response.</p></prose>
            </description>
            <param name="callbackId">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.jsonp.responseId_" local-name="responseId_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>internal response ID counter</p></prose>
            </description>
          </property>
          <property name="H.service.jsonp.requests" local-name="requests" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
          </property>
        </method>
        <typedef name="H.service.JsonpRequestHandle" local-name="JsonpRequestHandle" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose></prose>
          </description>
          <types>
            <type ref="Object"/>
          </types>
          <ctype>
            <name name="Object"/>
          </ctype>
          <property name="H.service.JsonpRequestHandle#id" local-name="id" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>the ID associated internally with this request</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.service.JsonpRequestHandle#cancel" local-name="cancel" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>this function cancels the request and invokes
 the errback function</p></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func/>
            </ctype>
          </property>
        </typedef>
        <typedef name="H.service.JsonpOptions" local-name="JsonpOptions" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose></prose>
          </description>
          <types>
            <type ref="Object"/>
          </types>
          <ctype>
            <record>
              <field>
                <key>
                  <name name="url"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <name name="H.service.Url"/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="baseURL"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="callback"/>
                </key>
                <value>
                  <func>
                    <param>
                      <all/>
                    </param>
                  </func>
                </value>
              </field>
              <field>
                <key>
                  <name name="errback"/>
                </key>
                <value>
                  <union>
                    <type>
                      <func>
                        <param>
                          <name name="string" optional="true"/>
                        </param>
                      </func>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="timeout"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="callbackKey"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="preventCallbackEncoding"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="boolean"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="doc"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="HTMLDocument"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
            </record>
          </ctype>
          <property name="H.service.JsonpOptions#url" local-name="url" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The URL of the JSON-P service to be called</p></prose>
            </description>
            <types>
              <type ref="string"/>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <union>
                <type>
                  <name name="string"/>
                </type>
                <type>
                  <name name="H.service.Url"/>
                </type>
              </union>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#baseURL" local-name="baseURL" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>The base URL to use to resolve relative URLs.
          If ommited the base URL of the document which loaded the API is taken</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#callback" local-name="callback" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The function to be called once the service responds</p></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func>
                <param>
                  <all/>
                </param>
              </func>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#timeout" local-name="timeout" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>The number of milliseconds to wait before assuming a timeout (0 means no timeout)</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#errback" local-name="errback" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>The function to be called if an error occurs. The string can have two values: 'timeout' and 'cancelled'</p></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func optional="true">
                <param>
                  <name name="string"/>
                </param>
              </func>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#callbackKey" local-name="callbackKey" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>The name of the JSON-P callback parameter function</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.JsonpOptions#preventCallbackEncoding" local-name="preventCallbackEncoding" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Indicates whether the callback value should not be URL encoded</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
        </typedef>
        <class name="H.service.AbstractRestService" local-name="AbstractRestService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>Abstract rest service class</p></prose>
          </description>
          <extends>
            <type ref="H.service.IConfigurable"/>
          </extends>
          <constructor local-name="AbstractRestService" name="H.service.AbstractRestService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.AbstractRestService.Options"/>
              </types>
              <ctype>
                <name name="H.service.AbstractRestService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <property name="H.service.AbstractRestService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.AbstractRestService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.AbstractRestService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.AbstractRestService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.AbstractRestService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.AbstractRestService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.AbstractRestService.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="callbackKey"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.AbstractRestService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.AbstractRestService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.AbstractRestService.Options#callbackKey" local-name="callbackKey" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <method name="H.service.AbstractRestService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.Platform" local-name="Platform" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>The Platform class represents central class from which all other service
stubs are created. It also contains the shared settings to be passed to
the individual service stubs, for example the root URL of the platform,
application credentials, etc.</p></prose>
            <example>var platform = new H.service.Platform({
  app_id: [your app_id],       //set your app_id
  app_code: [your app_code],   //set your app_code
  useCIT: true                 //configure all services to use the &apos;CIT&apos; environment
});

var geocoder = plaform.createGeocodingService();
//Now you are ready to talk to the HERE Geocoder API</example>
          </description>
          <constructor local-name="Platform" name="H.service.Platform">
            <param name="options">
              <types>
                <type ref="H.service.Platform.Options"/>
              </types>
              <ctype>
                <name name="H.service.Platform.Options"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <property name="H.service.Platform#tileServices_" local-name="tileServices_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Dictionary of tile services that were already created.</p></prose>
            </description>
          </property>
          <method name="H.service.Platform#setCredentials_" local-name="setCredentials_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method sets the credentials to use for authenticating the client
 with the platform</p></prose>
            </description>
            <param name="app_id">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the app id of the client application</p></prose>
              </description>
            </param>
            <param name="app_code">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the app code of the client application</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.Platform#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Method attempts to configure object that implements <code>H.service.IConfigurable</code></p></prose>
            </description>
            <param name="configurable">
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#setUseHTTPS" local-name="setUseHTTPS" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method enables or disables HTTPS communication with the platform</p></prose>
            </description>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>a boolean value indicating whether to communicate
 with the platform via HTTPS</p></prose>
              </description>
            </param>
          </method>
          <property name="H.service.Platform#baseHost_" local-name="baseHost_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The host of the baseUrl, needed for setUseCIT</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <method name="H.service.Platform#setUseCIT" local-name="setUseCIT" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method configures whether to use the &quot;customer integration testing&quot;
instance of the platform.</p></prose>
            </description>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>a boolean value indicating whether the CIT platform
 instance is to be used</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.Platform#setBaseUrl" local-name="setBaseUrl" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method modifies the base URL to be used when creating service stubs.</p></prose>
            </description>
            <param name="baseUrl">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the new base URL to use</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.Platform#getBaseUrl" local-name="getBaseUrl" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the currently used base URL.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.Platform.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="app_id"/>
                  </key>
                  <value>
                    <name name="string" nullable="true"/>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="app_code"/>
                  </key>
                  <value>
                    <name name="string" nullable="true"/>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="useHTTPS"/>
                  </key>
                  <value>
                    <name name="boolean"/>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="useCIT"/>
                  </key>
                  <value>
                    <name name="boolean"/>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseUrl"/>
                  </key>
                  <value>
                    <name name="H.service.Url"/>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.Platform.Options#app_id" local-name="app_id" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.service.Platform.Options#app_code" local-name="app_code" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.service.Platform.Options#baseUrl" local-name="baseUrl" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.Platform.Options#useCIT" local-name="useCIT" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.Platform.Options#useHTTPS" local-name="useHTTPS" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <method name="H.service.Platform#getPlacesService" local-name="getPlacesService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns an implementation instance of
<link ref="H.service.PlacesService" /></p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.PlacesService"/>
              </types>
              <ctype>
                <name name="H.service.PlacesService"/>
              </ctype>
              <description>
                <prose><p>a new places service instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getMapTileService" local-name="getMapTileService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns a map tile service stub.</p></prose>
            </description>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.MapTileService.Options"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.MapTileService"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getTrafficIncidentsService" local-name="getTrafficIncidentsService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns an implementation instance of
<link ref="H.service.TrafficIncidentsService" /></p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.TrafficIncidentsService"/>
              </types>
              <ctype>
                <name name="H.service.TrafficIncidentsService"/>
              </ctype>
              <description>
                <prose><p>a new places service instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#createDefaultLayers" local-name="createDefaultLayers" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method creates a pre-configured set of HERE tile layers for convenient use with the
map.</p>
<p>This method returns an object holding the three default map types</p>
<ul>
<li><code>normal</code></li>
<li><code>satellite</code></li>
<li><code>terrain</code></li>
</ul>
<p>Each of the map types in turn contains the following variant tile layers:</p>
<ul>
<li><code>map</code></li>
<li><code>xbase</code></li>
<li><code>base</code></li>
<li><code>traffic</code></li>
<li><code>panorama</code></li>
<li><code>labels</code></li>
</ul>
<p>In addition the <code>normal</code> map type contains the <code>transit</code> and <code>metaInfo</code> variant.
Collection of default map types also includes <code>incidents</code> type, that provides an overlay that
displays current trffic incidents.</p></prose>
              <example>// Create the default layers
var layers = platform.createDefaultLayers();

// Set the satellite map type&apos;s traffic variant as the map&apos;s base layer
map.setBaseLayer(layers.satellite.traffic);</example>
            </description>
            <param name="opt_tileSize" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional tile size to be queried from the HERE Map Tile API, default is <code>256</code></p></prose>
              </description>
            </param>
            <param name="opt_ppi" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional 'ppi' parameter to use when querying tiles, default is not specified</p></prose>
              </description>
            </param>
            <param name="opt_lg" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional primary language parameter, default is not specified</p></prose>
              </description>
            </param>
            <param name="opt_lg2" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional secondary language parameter, default is not specified</p></prose>
              </description>
            </param>
            <param name="opt_style" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional 'style' parameter to use when querying map tiles, default is not specified</p></prose>
              </description>
            </param>
            <param name="opt_pois" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>indicates if pois are displayed on the map</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Object.&lt;string, H.service.MapType&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="H.service.MapType"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>a set of tile layers ready to use</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getMetaInfoTileService" local-name="getMetaInfoTileService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns a map tile service stub.</p></prose>
            </description>
            <param name="opt_params" optional="true">
              <types>
                <type ref="H.service.metaInfo.Service.Options"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.Service.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>additional service parameters</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.metaInfo.Service"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.Service"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getEnterpriseRoutingService" local-name="getEnterpriseRoutingService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns a service stub to query the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Enterprise Routing REST API</a>.</p></prose>
            </description>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.EnterpriseRoutingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.EnterpriseRoutingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.EnterpriseRoutingService"/>
              </types>
              <ctype>
                <name name="H.service.EnterpriseRoutingService"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getRoutingService" local-name="getRoutingService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns an instance of <link ref="H.service.RoutingService" />.</p></prose>
            </description>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.RoutingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.RoutingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.RoutingService"/>
              </types>
              <ctype>
                <name name="H.service.RoutingService"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.Platform#getGeocodingService" local-name="getGeocodingService" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns an implementation instance of
<link ref="H.service.GeocodingService" /></p></prose>
            </description>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.GeocodingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.GeocodingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional set of options for the new
 geocoding service to connect to</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.GeocodingService"/>
              </types>
              <ctype>
                <name name="H.service.GeocodingService"/>
              </ctype>
              <description>
                <prose><p>a new geocoding service instance</p></prose>
              </description>
            </returns>
          </method>
        </class>
        <property name="H.service.defaultOptions_" local-name="defaultOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This property holds the global default options</p></prose>
          </description>
        </property>
        <method name="H.service.setOptions" local-name="setOptions" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose></prose>
          </description>
          <param name="key">
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <description>
              <prose><p>the key which identifies the options to set</p></prose>
            </description>
          </param>
          <param name="value">
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
            <description>
              <prose><p>the configuration values to set</p></prose>
            </description>
          </param>
        </method>
        <method name="H.service.getOptions" local-name="getOptions" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose></prose>
          </description>
          <param name="key">
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <description>
              <prose><p>the key which identifies the options to set</p></prose>
            </description>
          </param>
          <returns>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
            <description>
              <prose><p>returns the configuration values</p></prose>
            </description>
          </returns>
        </method>
        <method name="H.service.mergeOptions" local-name="mergeOptions" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>Merges an options overriding the provided default options.</p></prose>
          </description>
          <param name="defaultOptions">
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
            <description>
              <prose><p>the default values</p></prose>
            </description>
          </param>
          <param name="opt_options" optional="true">
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object" optional="true"/>
            </ctype>
            <description>
              <prose><p>the overriding option values</p></prose>
            </description>
          </param>
          <returns>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </returns>
        </method>
        <typedef name="H.service.ServiceParameters" local-name="ServiceParameters" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This type encapsulates URL parameters to be sent to a HERE platform service.</p>
<p>When calling HERE REST APIs additional URL parameters can be sent by providing
an object parameter which contain URL parameters in key-value format, where
keys are URL parameter names and the values are the parameter values.</p>
<p>Note: The object assumes that values are in string format.</p></prose>
            <example>serviceParameters = {
  paramA: &apos;valueA&apos;,
  paramB: &apos;valueB&apos;
}</example>
          </description>
          <types>
            <type ref="Object"/>
          </types>
          <ctype>
            <name name="Object"/>
          </ctype>
        </typedef>
        <typedef name="H.service.ServiceResult" local-name="ServiceResult" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This type encapsulates a response object provider by a HERE platform service.</p>
<p>In most cases the HERE Maps API for JavaScript will communicate to the
HERE REST APIs via the JSON-P protocol. In such cases the resulting JSON
response is parsed and provided to the callback function.</p>
<p>The structure of a service response object is specific to each service.</p></prose>
          </description>
          <types>
            <type ref="Object"/>
          </types>
          <ctype>
            <name name="Object"/>
          </ctype>
        </typedef>
        <class name="H.service.PlacesService" local-name="PlacesService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>Places service implements a low level places RestApi access.
Please refer to <a href="http://developer.here.com/rest-apis/documentation/places">Restful API documentation</a>
for providing parameters and handling response objects.</p>
<p>Entry point parameters are specified as objects as key:value pairs which are transformed to URL parameters.
Request headers can be specified along with entry point parameters.</p></prose>
            <example>var places = platform.getPlacesService();
places.search({
 &apos;at&apos;: &apos;52.5044,13.3909&apos;,
 &apos;q&apos;: &apos;pizza&apos;,
 &apos;Accept-Language&apos;: &apos;de&apos;
}, function(response) {
 //handle response
}, function() {
 //handle network error
});</example>
          </description>
          <extends>
            <type ref="H.service.AbstractRestService"/>
          </extends>
          <constructor local-name="PlacesService" name="H.service.PlacesService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.PlacesService.Options"/>
              </types>
              <ctype>
                <name name="H.service.PlacesService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <enum name="H.service.PlacesService.EntryPoint" local-name="EntryPoint" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>List of available entry points</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <value name="H.service.PlacesService.EntryPoint.SEARCH" local-name="SEARCH">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.service.PlacesService.EntryPoint.SUGGEST" local-name="SUGGEST">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.service.PlacesService.EntryPoint.EXPLORE" local-name="EXPLORE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.service.PlacesService.EntryPoint.AROUND" local-name="AROUND">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.service.PlacesService.EntryPoint.HERE" local-name="HERE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.service.PlacesService.EntryPoint.CATEGORIES" local-name="CATEGORIES">
              <description>
                <prose></prose>
              </description>
            </value>
          </enum>
          <method name="H.service.PlacesService#request" local-name="request" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This is generic method to query places RestAPI.</p></prose>
              <example>var places = platform.getPlacesService(),
    entryPoint = H.service.PlacesService.EntryPoint;
places.request(entryPoint.SEARCH, { &apos;at&apos;: &apos;52.5044,13.3909&apos;, &apos;q&apos;: &apos;pizza&apos;}, function(resp) {
 console.log(resp);
}, function(resp) {
 console.log(&apos;ERROR: &apos;+resp);
});</example>
            </description>
            <param name="entryPoint">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>can be one of available entry points <link ref="H.service.PlacesService.EntryPoint" />
i.e value of H.service.PlacesService.EntryPoint.SEARCH</p></prose>
              </description>
            </param>
            <param name="entryPointParams">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>parameter map key value pairs will be transformed into the
url key=value parametes. For entry point parameters description please refer to places
restful api <a href="http://developer.here.com/rest-apis/documentation/places">documentation</a>
documentation for available parameters for chose entry point</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose><p>callback which is called when result is returned</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose><p>callback which is called when error occured (i.e request timeout)</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#search" local-name="search" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'search' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-search.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="searchParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api search entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#suggest" local-name="suggest" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'suggestions' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-suggest.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="suggestParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api suggest entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#explore" local-name="explore" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'explore' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-explore.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="exploreParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api explore entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#around" local-name="around" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'around' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-around.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="aroundParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api around entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#here" local-name="here" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'here' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-here.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="hereParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api here entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#categories" local-name="categories" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Function triggers places api 'categories' entry point. Please refer to
<a href="http://developer.here.com/rest-apis/documentation/places/topics_api/resource-place-categories.html">documentation</a>
for parameter specification and response handling.</p></prose>
            </description>
            <param name="categoriesParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>places api here entry
point parameters please refer to places api documentation</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp request handle</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#follow" local-name="follow" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method should be used to follow hyperlinks available in results returned
by dicovery queries.</p></prose>
              <example>var places = platform.getPlacesService(),
    entryPoint = H.service.PlacesService.EntryPoint;
places.request(entryPoint.SEARCH, { &apos;at&apos;: &apos;52.5044,13.3909&apos;, &apos;q&apos;: &apos;pizza&apos;}, function(response) {
   var items = response.results.items;
   places.follow(items[0].href, function(resp) {
     console.log(resp);
   },
   function(resp) {
     console.log(&apos;ERROR: &apos;+resp);
   });
}, function(resp) {
 console.log(&apos;ERROR: &apos;+resp);
});</example>
            </description>
            <param name="hyperlink">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>additional parameters to send with request</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose><p>jsonp resquest handle</p></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.PlacesService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseUrl"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.Url"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.PlacesService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the sub-domain of the places service relative
 to the platform's base URL, default is <code>'places'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.PlacesService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the path of the places service, default is
 <code>'places/v1'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.PlacesService.Options#baseUrl" local-name="baseUrl" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>an optional base URL if it differs
 from the platform's default base URL</p></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <property name="H.service.PlacesService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#subDomain_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.PlacesService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#path_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.PlacesService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#callbackKey_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.PlacesService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#baseUrl_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.PlacesService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#getUrl">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#restApiRequest">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.PlacesService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.JsonX" local-name="JsonX" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose><p>Sends a XHR request and invokes the provided callback once the request finished.
Must not be published, platform-API internal use only!</p></prose>
          </description>
          <constructor local-name="JsonX" name="H.service.JsonX">
            <param name="url">
              <types>
                <type ref="string"/>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="H.service.Url"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The URL of the JSON-XHR service to be called</p></prose>
              </description>
            </param>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <unknown/>
                  </param>
                  <param>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>The function to be called once the request finished.
       It gets the JSON parse result and an optional error type as arguments. Possible error types are:
       <ul>
         <li><code>undefined</code> - if no error occurred </li>
         <li><code>&quot;abort&quot;</code> - if the request was explicit aborted {@see H.service.JsonX.prototype.abort}}</li>
         <li><code>&quot;timeout&quot;</code> - if the request timed out {@see H.net.Xhr.Options#timeout} </li>
         <li><code>&quot;network&quot;</code> - if a <code>NetworkError</code> occurred </li>
         <li><code>&quot;parse&quot;</code> - if the response has no valid JSON format</li>
       </ul></p></prose>
              </description>
            </param>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.net.Xhr.Options"/>
              </types>
              <ctype>
                <name name="H.net.Xhr.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>The optional parameters for this underlaying XHR request</p></prose>
              </description>
            </param>
          </constructor>
          <property name="H.service.JsonX#callback_" local-name="callback_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func>
                <param>
                  <unknown/>
                </param>
                <param>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </param>
              </func>
            </ctype>
          </property>
          <property name="H.service.JsonX#request_" local-name="request_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.net.Xhr"/>
            </types>
            <ctype>
              <name name="H.net.Xhr"/>
            </ctype>
          </property>
          <method name="H.service.JsonX#xhrCallback_" local-name="xhrCallback_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The callback for the XHR request</p></prose>
            </description>
            <param name="opt_responseText" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_errorType" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.JsonX#abort" local-name="abort" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>It aborts an ongoing request.
If the request is not already finished, the request's callback is invoked with error &quot;abort&quot;</p></prose>
            </description>
          </method>
          <typedef name="H.service.JsonX.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="timeout"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="withCredentials"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="cors"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="method"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="data"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="headers"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <typed>
                          <base>
                            <name name="Object"/>
                          </base>
                          <app>
                            <name name="string"/>
                          </app>
                          <app>
                            <name name="string"/>
                          </app>
                        </typed>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseURL"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.JsonX.Options#timeout" local-name="timeout" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The number of milliseconds to wait before the request timed out (0 means no timeout)</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.JsonX.Options#withCredentials" local-name="withCredentials" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates whether user credentials should be included with the request, defaults to <code>false</code>
          This option is ignored by IE9 because of technical limitations.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.JsonX.Options#cors" local-name="cors" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates a Cross-Origin Resource Sharing request, defaults to <code>false</code>
          This flag is only necessary for IE9, where a XDomainRequest is API-internally used.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.JsonX.Options#method" local-name="method" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The http request method which should be used. (i.e GET, POST...)</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.JsonX.Options#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The data which will be send by the request</p>
<pre><code>      Map of request headers and their values which should
      be set for the current request</code></pre></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.JsonX.Options#baseURL" local-name="baseURL" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>base url which will be used for
          provided url paths</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
          </typedef>
        </class>
        <class name="H.service.TrafficIncidentsIcons" local-name="TrafficIncidentsIcons" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This class provides marker icons for traffic incidents.</p></prose>
          </description>
          <constructor local-name="TrafficIncidentsIcons" name="H.service.TrafficIncidentsIcons"/>
          <property name="H.service.TrafficIncidentsIcons#icons_" local-name="icons_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
          </property>
          <method name="H.service.TrafficIncidentsIcons#getIcon" local-name="getIcon" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns a marker icon for a given type of incident and a givent severity</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>one of 'CONGESTION', 'ROADWORKS', 'ACCIDENT' or 'OTHER</p></prose>
              </description>
            </param>
            <param name="severity">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>one of 'VERYHIGH', 'HIGH' or 'BLOCKING'</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.Icon"/>
              </types>
              <ctype>
                <name name="H.map.Icon"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.TrafficIncidentsIcons.colors_" local-name="colors_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
          </property>
          <property name="H.service.TrafficIncidentsIcons.CONGESTION_" local-name="CONGESTION_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsIcons.ROADWORKS_" local-name="ROADWORKS_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsIcons.ACCIDENT_" local-name="ACCIDENT_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsIcons.OTHER_" local-name="OTHER_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsIcons.MARKER_" local-name="MARKER_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsIcons.CLOSURE_" local-name="CLOSURE_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
        </class>
        <class name="H.service.TrafficIncidentsProvider" local-name="TrafficIncidentsProvider" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents traffic incidents provider which requests traffic incidents data
from platform traffic incidents service and converts it to map objects.</p></prose>
          </description>
          <extends>
            <type ref="H.map.provider.MarkerTileProvider"/>
          </extends>
          <constructor local-name="TrafficIncidentsProvider" name="H.service.TrafficIncidentsProvider">
            <param name="service">
              <types>
                <type ref="H.service.TrafficIncidentsService"/>
              </types>
              <ctype>
                <name name="H.service.TrafficIncidentsService"/>
              </ctype>
              <description>
                <prose><p>traffic incidents service that serves incidents data</p></prose>
              </description>
            </param>
            <param name="opt_refreshTime" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>argument indicates timeframe when provider tiles should be updated (in ms)
     defaults to <code>3</code> minutes</p></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>an additional set of URL parameters</p></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.TrafficIncidentsProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method will dispatch event on the event target object</p></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.Event"/>
                <type ref="string"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.util.Event"/>
                  </type>
                  <type>
                    <name name="string"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>event object or event name</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
            </description>
          </method>
          <method name="H.service.TrafficIncidentsProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
            </description>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
            </description>
            <param name="bounds">
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
              </description>
            </param>
            <param name="level">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
              </types>
              <ctype>
                <typed nullable="true">
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.map.ICopyright"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.TrafficIncidentsProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <method name="H.service.TrafficIncidentsProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Request data on a tile basis</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The row number of the tile</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The column number of the tile</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The zoom level for which the tile is requested</p></prose>
              </description>
            </param>
            <param name="cacheOnly">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether only cached tiles are to be considered</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.provider.Tile"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.map.provider.Tile"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>tile object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>x tile coordinate (row)</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>y tile coordinate (column)</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>tile coordinate (zoom)</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Cancels tile from being requested using a tile-key</p></prose>
            </description>
            <param name="tileKey">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The key of the tile</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>x tile coordinate (row)</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>y tile coordinate (column)</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>tile coordinate (zoom)</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The x tile coordinate (row)</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The y tile coordinate (column)</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The z tile coordinate (zoom level)</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>string</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.TrafficIncidentsProvider#tileSize" local-name="tileSize" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>The size of a tile as edge length in pixels. It must be 2^n where n is in range <code>[0 ... 30],
default is {@code 256</code></p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.service.TrafficIncidentsProvider#getCache" local-name="getCache" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method returns cache which should be used to store tiles</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.util.Cache"/>
              </types>
              <ctype>
                <name name="H.util.Cache"/>
              </ctype>
              <description>
                <prose><p>cache</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsProvider#requestInternal" local-name="requestInternal" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method request tile from remote service</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The row number of the tile</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The column number of the tile</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The zoom level for which the tile is requested</p></prose>
              </description>
            </param>
            <param name="onResponse">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <union>
                      <type>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.Object"/>
                          </app>
                        </typed>
                      </type>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                      <type>
                        <null/>
                      </type>
                    </union>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>function which
   is called after response arrives</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="string"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>function which is called in case of communication error</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.util.ICancelable"/>
              </types>
              <ctype>
                <name name="H.util.ICancelable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsProvider#reload" local-name="reload" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This method instructs the provider to reload data from it's source.</p>
<p>Two reload modes are possible:</p>
<ul>
<li><code>hard</code>: A hard immediately removes the cached tiles from
the tile cache and forces the provider to re-fetch the tiles. Currently
cached tiles will not be used for rendering.</li>
<li><code>soft</code>: A soft invalidation only marks tiles as invalid and requests
the tiles to be re-fetched at the earliest convenience. The provider does
not invalidate the cache immediately in this case. This means that cached
tiles can still be rendered while the updated tiles are fetched.</li>
</ul></prose>
            </description>
            <param name="hard">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>a boolean flag indicating whether to invalidate in
 <code>hard</code> mode (<code>true</code>) or in <code>soft</code> mode (<code>false</code>);</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#invalidateObject" local-name="invalidateObject" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>To signal to this provider that a map object has been changed.
The method marks tile, that contains that objectm as invalid and triggers dispatchUpdate()</p></prose>
            </description>
            <param name="marker">
              <types>
                <type ref="H.map.AbstractMarker"/>
              </types>
              <ctype>
                <name name="H.map.AbstractMarker" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The map object to be invalidated</p></prose>
              </description>
            </param>
            <param name="flags">
              <types>
                <type ref="H.math.BitMask"/>
              </types>
              <ctype>
                <name name="H.math.BitMask"/>
              </ctype>
              <description>
                <prose><p>The flags indicating the types of occurred changes</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.TrafficIncidentsProvider#providesDomMarkers" local-name="providesDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Checks whether this provider is currently providing <link ref="H.map.DomMarker" /> map objects.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.TrafficIncidentsProvider#icons_" local-name="icons_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.TrafficIncidentsIcons"/>
            </types>
            <ctype>
              <name name="H.service.TrafficIncidentsIcons"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsProvider#service_" local-name="service_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.TrafficIncidentsService"/>
            </types>
            <ctype>
              <name name="H.service.TrafficIncidentsService"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsProvider#params_" local-name="params_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object.&lt;string, string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Object"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsProvider#criticalityDict_" local-name="criticalityDict_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
          </property>
          <method name="H.service.TrafficIncidentsProvider#requestData_" local-name="requestData_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Implementation of H.map.provider.MarkerTileProvider requestData function</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>x tile coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>y tile coordinate</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>zoom level</p></prose>
              </description>
            </param>
            <param name="onSuccess">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.AbstractMarker"/>
                      </app>
                    </typed>
                  </param>
                </func>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.util.ICancelable"/>
              </types>
              <ctype>
                <name name="H.util.ICancelable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Disposes of this map tile provider instance</p></prose>
            </description>
          </method>
        </class>
        <class name="H.service.MapTileCopyrights" local-name="MapTileCopyrights" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This class represents the copyrights for a map tile service. A tile
provider can query for the copyrights in a given map view (zoom level and
  bounding rectangle) for the correct attribution string.</p></prose>
          </description>
          <constructor local-name="MapTileCopyrights" name="H.service.MapTileCopyrights"/>
          <method name="H.service.MapTileCopyrights#query" local-name="query" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method allows to query the copyright string for a given map type,
zoom level and bounding rectangle. Copyright information is concatenated
and returned as a string.</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map type</p></prose>
              </description>
            </param>
            <param name="level">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the zoom level</p></prose>
              </description>
            </param>
            <param name="rect">
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose><p>the bounding rectangle of the area for which to
 retrieve the attribution string</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Array.&lt;Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.service.MapTileCopyrights.inegi_" local-name="inegi_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Copyrights for Mexico</p></prose>
            </description>
            <types>
              <type ref="H.service.MapTileCopyright_"/>
            </types>
            <ctype>
              <name name="H.service.MapTileCopyright_"/>
            </ctype>
          </property>
          <property name="H.service.MapTileCopyrights.navinfo_" local-name="navinfo_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Copyrights for china</p></prose>
            </description>
            <types>
              <type ref="H.service.MapTileCopyright_"/>
            </types>
            <ctype>
              <name name="H.service.MapTileCopyright_"/>
            </ctype>
          </property>
          <property name="H.service.MapTileCopyrights#normal_" local-name="normal_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Hardcoded bounding box for map imagery. (see user story MAPSJS-389)
structure deliberately replicates server response</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;H.service.MapTileCopyright_&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="H.service.MapTileCopyright_"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.service.MapTileCopyrights#satellite_" local-name="satellite_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Hardcoded bounding box for satellite imagery. (see user story MAPSJS-389)
structure deliberately replicates server response</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;H.service.MapTileCopyright_&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="H.service.MapTileCopyright_"/>
                </app>
              </typed>
            </ctype>
          </property>
        </class>
        <class name="H.service.MapTileCopyright_" local-name="MapTileCopyright_" access="private" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This class represents an internal helper class to query copyrights easily.</p></prose>
          </description>
          <constructor local-name="MapTileCopyright_" name="H.service.MapTileCopyright_">
            <param name="def">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>a copyright definition as received by the map tile service</p></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.MapTileCopyright_#intersects" local-name="intersects" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method checks if a copyright is valid for the given level and bounding
rectangle</p></prose>
            </description>
            <param name="level">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the zoom level</p></prose>
              </description>
            </param>
            <param name="rect">
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose><p>the rectangular bounding area</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>true if this copyright is active, false otherwise</p></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.MapTileProvider" local-name="MapTileProvider" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This class represents a map tile provider which requests map tiles from
a platform map tile service.</p></prose>
          </description>
          <extends>
            <type ref="H.map.provider.ImageTileProvider"/>
          </extends>
          <constructor local-name="MapTileProvider" name="H.service.MapTileProvider">
            <param name="service">
              <types>
                <type ref="H.service.MapTileService"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService"/>
              </ctype>
              <description>
                <prose><p>the map tile service which serves the tiles</p></prose>
              </description>
            </param>
            <param name="tileType">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map tile type</p></prose>
              </description>
            </param>
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map scheme</p></prose>
              </description>
            </param>
            <param name="tileSize">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the map tile size</p></prose>
              </description>
            </param>
            <param name="format">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map tile image format</p></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>an additional set of URL parameters</p></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.MapTileProvider.hash" local-name="hash" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Creates a unique string for the provider.</p></prose>
            </description>
            <param name="service">
              <types>
                <type ref="H.service.MapTileService"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService"/>
              </ctype>
              <description>
                <prose><p>the map tile service which serves the tiles</p></prose>
              </description>
            </param>
            <param name="tileType">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map tile type</p></prose>
              </description>
            </param>
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map scheme</p></prose>
              </description>
            </param>
            <param name="tileSize">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the map tile size</p></prose>
              </description>
            </param>
            <param name="format">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map tile image format</p></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>an additional set of URL parameters</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the unique string for this provider</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileProvider#disposeInternal" local-name="disposeInternal" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Disposes of this map tile provider instance</p></prose>
            </description>
          </method>
        </class>
        <class name="H.service.MapTileService" local-name="MapTileService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class encapsulates a map tile end point of the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile">HERE Map Tile API</a>.</p>
<p>An instance of this class can be retrieved by calling the factory method on
a platform instance. <link ref="H.service.Platform#getMapTileService" />.</p></prose>
            <example>var platform = new H.service.Platform(),
    maptiler = platform.getMapTileService({type: &apos;aerial&apos;}),
    tileLayer = maptiler.createTileLayer(&apos;maptile&apos;, &apos;hybrid.day&apos;, 256, &apos;jpg&apos;);
map.setBaseLayer(tileLayer);</example>
          </description>
          <extends>
            <type ref="H.util.EventTarget"/>
          </extends>
          <extends>
            <type ref="H.service.IConfigurable"/>
          </extends>
          <constructor local-name="MapTileService" name="H.service.MapTileService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.MapTileService.Options"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <event name="H.service.MapTileService#event:infoupdate" local-name="infoupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is fired when the service's info resource was successfully
retrieved and processed.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <event name="H.service.MapTileService#event:versionupdate" local-name="versionupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is fired when the service's version hash was successfully
updated.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <event name="H.service.MapTileService#event:copyrightupdate" local-name="copyrightupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is fired when the service's copyrights were successfully
retrieved.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.service.MapTileService#providers_" local-name="providers_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Stores all providers created by this map tile service</p></prose>
            </description>
          </property>
          <method name="H.service.MapTileService.hash" local-name="hash" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.MapTileService.Options"/>
              </types>
              <ctype>
                <name name="H.service.MapTileService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService.listToObject" local-name="listToObject" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Transforms an info list from the map tile service into a JS-style object</p></prose>
            </description>
            <param name="infoData">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="what">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.MapTileService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns the configured service URL.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#getShards" local-name="getShards" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns the sharding sub domains for this service.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;string&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#getType" local-name="getType" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map tile type provided by this service.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the map tile type</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#getVersion" local-name="getVersion" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map tile service's newest version hash.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>meta information for this map tile service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#setVersion_" local-name="setVersion_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method sets this map tile service's version string</p></prose>
            </description>
            <param name="version">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.MapTileService#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Returns this MapTileService's copyrights collection.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.MapTileCopyrights"/>
              </types>
              <ctype>
                <name name="H.service.MapTileCopyrights"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#updateInfo" local-name="updateInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This mathod updates this map tile service's meta information.</p></prose>
            </description>
            <param name="info">
              <types>
                <type ref="H.service.ServiceResult"/>
              </types>
              <ctype>
                <name name="H.service.ServiceResult"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.service.MapTileService#fetchInfo" local-name="fetchInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method retrieves meta-information from the map tile backend</p></prose>
            </description>
          </method>
          <method name="H.service.MapTileService#getInfo" local-name="getInfo" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map tile service's meta information. The method will
return an object once the map tile service's data has been fetched.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.MapTileService.Info"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.service.MapTileService.Info"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>meta information for this map tile service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#createTileProvider" local-name="createTileProvider" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method creates a tile provider which uses the specified map tiles. This provider can be used as a data source
for an ImageTileLayer.</p></prose>
            </description>
            <param name="tileType">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile type</p></prose>
              </description>
            </param>
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile scheme</p></prose>
              </description>
            </param>
            <param name="tileSize">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the tile size</p></prose>
              </description>
            </param>
            <param name="format">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile image format</p></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>a hash of additional parameters to be</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.provider.ImageTileProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ImageTileProvider"/>
              </ctype>
              <description>
                <prose><p>the image tile provider</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.MapTileService#createTileLayer" local-name="createTileLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method creates a tile layer. This layer can be used as a layer on a map's data model.</p></prose>
            </description>
            <param name="tileType">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile type</p></prose>
              </description>
            </param>
            <param name="scheme">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile scheme</p></prose>
              </description>
            </param>
            <param name="tileSize">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the tile size</p></prose>
              </description>
            </param>
            <param name="format">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tile image format</p></prose>
              </description>
            </param>
            <param name="opt_additionalParameters" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>Additional parameters for the map tile service</p></prose>
              </description>
            </param>
            <param name="opt_opacity" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The opacity of this layer</p></prose>
              </description>
            </param>
            <param name="opt_dark" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
          See also <link ref="H.Map.Options#autoColor" /></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.layer.TileLayer"/>
              </types>
              <ctype>
                <name name="H.map.layer.TileLayer"/>
              </ctype>
              <description>
                <prose><p>the tile layer</p></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.MapTileService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="type"/>
                  </key>
                  <value>
                    <name name="string"/>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="version"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.MapTileService.Options#type" local-name="type" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the type of the map tile service to communicate
 with, e.g. 'base' (default), 'aerial', etc. (refer to the Map Tile REST API
 documentation for available types)</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Options#version" local-name="version" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the map version hash to use for retrieving tiles,
 default is newest and will be automatically updated</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the sub-domain of the map tile service relative
 to the platform's base URL, default is <code>'maps'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the path of the map tile service, default is
 <code>'maptile/2.1'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <typedef name="H.service.MapTileService.Info" local-name="Info" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="maps"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="schemes"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="tiletypes"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="formats"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="resolutions"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="languages"/>
                  </key>
                  <value>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="Object"/>
                      </app>
                    </typed>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.MapTileService.Info#maps" local-name="maps" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Info#schemes" local-name="schemes" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Info#tiletypes" local-name="tiletypes" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Info#formats" local-name="formats" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Info#resolutions" local-name="resolutions" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.MapTileService.Info#languages" local-name="languages" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="Object"/>
                  </app>
                </typed>
              </ctype>
            </property>
          </typedef>
          <method name="H.service.MapTileService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.TrafficIncidentsService" local-name="TrafficIncidentsService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>TrafficIncindentsService provides functionality to the low level traffic incidents api
<a href="http://developer.here.com/rest-apis/documentation/traffic/topics/overview.html">Traffic API documentation</a>
were it is possible to retrieve traffic incident information on a tile basis</p></prose>
          </description>
          <extends>
            <type ref="H.service.AbstractRestService"/>
          </extends>
          <constructor local-name="TrafficIncidentsService" name="H.service.TrafficIncidentsService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.TrafficIncidentsService.Options"/>
              </types>
              <ctype>
                <name name="H.service.TrafficIncidentsService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.TrafficIncidentsService#requestIncidents" local-name="requestIncidents" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method requests traffic incidents based on the service parameters provided.</p></prose>
            </description>
            <param name="serviceParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResponse">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsService#requestIncidentsByTile" local-name="requestIncidentsByTile" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method requests traffic incident information by tile coordinates</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>tile column number</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>tile row number</p></prose>
              </description>
            </param>
            <param name="z">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>zoom level</p></prose>
              </description>
            </param>
            <param name="onResponse">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>callback to handle service resposne</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func/>
              </ctype>
              <description>
                <prose><p>callback to habdle communication error</p></prose>
              </description>
            </param>
            <param name="opt_serviceParams" optional="true">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional service parameters to be added to the request</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.TrafficIncidentsService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseUrl"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.Url"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.TrafficIncidentsService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the sub-domain of the traffic incidents service relative
 to the platform's base URL, default is <code>'traffic'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.TrafficIncidentsService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the path of the traffic incidents service, default is
 <code>'traffic/6.1'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.TrafficIncidentsService.Options#baseUrl" local-name="baseUrl" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>an optional base URL if it differs
 from the platform's default base URL</p></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <property name="H.service.TrafficIncidentsService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#subDomain_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#path_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#callbackKey_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.TrafficIncidentsService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#baseUrl_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.TrafficIncidentsService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#getUrl">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#restApiRequest">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.TrafficIncidentsService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <typedef name="H.service.MapType" local-name="MapType" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>A map type is an object holding tile layers corresponding to a map type (e.g. 'normal', 'satellite' or
'terrain'). A map type contains at least a <code>map</code> property which defines the basic map layer for
a given map type. In addition it can hold other map layers with the given style, e.g. <code>base</code>,
<code>xbase</code>, <code>traffic</code> etc.</p></prose>
          </description>
          <types>
            <type ref="Object"/>
          </types>
          <ctype>
            <record>
              <field>
                <key>
                  <name name="map"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="xbase"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="base"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="traffic"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="panorama"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
              <field>
                <key>
                  <name name="labels"/>
                </key>
                <value>
                  <union>
                    <type>
                      <name name="H.map.layer.TileLayer"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </value>
              </field>
            </record>
          </ctype>
          <property name="H.service.MapType#map" local-name="map" access="public" scope="" virtual="false" published="false" exported="false">
            <description>
              <prose><p>the basic map tiles with all features and labels</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer"/>
            </ctype>
          </property>
          <property name="H.service.MapType#xbase" local-name="xbase" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>map tiles without features and labels</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.MapType#base" local-name="base" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>map tiles without labels</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.MapType#traffic" local-name="traffic" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>map tiles with traffic flow highlighting</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.MapType#transit" local-name="transit" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>map tiles with public transit lines highlighted</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.MapType#panorama" local-name="panorama" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>map tiles highlighting areas with HERE StreetLevel coverage</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
          <property name="H.service.MapType#labels" local-name="labels" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
            <description>
              <prose><p>transparent map tiles with labels only</p></prose>
            </description>
            <types>
              <type ref="H.map.layer.TileLayer"/>
            </types>
            <ctype>
              <name name="H.map.layer.TileLayer" optional="true"/>
            </ctype>
          </property>
        </typedef>
        <ns name="H.service.metaInfo" local-name="metaInfo" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This namespace contains classes related to the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tiles</a>
Service.</p></prose>
          </description>
          <class name="H.service.metaInfo.Spatial" local-name="Spatial" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This class represents a spatial object which stores and provides projected geometries on tile base.</p></prose>
            </description>
            <extends>
              <type ref="H.map.Spatial"/>
            </extends>
            <extends>
              <type ref="H.service.metaInfo.IObject"/>
            </extends>
            <constructor local-name="Spatial" name="H.service.metaInfo.Spatial">
              <param name="provider">
                <types>
                  <type ref="H.service.metaInfo.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.ObjectProvider"/>
                </ctype>
                <description>
                  <prose><p>The provider of this object.</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
                </description>
              </param>
              <param name="remoteId">
                <types>
                  <type ref="string"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>An ID to use for this object. If the ID evalues to a falsy the ID is ignored.</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Spatial.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The options to apply</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.service.metaInfo.Spatial.spatialOptions_" local-name="spatialOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reusable object used as H.map.Spatial.Options to specify the spatial's provider</p></prose>
              </description>
              <types>
                <type ref="H.map.Spatial.Options"/>
              </types>
              <ctype>
                <name name="H.map.Spatial.Options"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Spatial#remoteId_" local-name="remoteId_" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The unique ID of this object defined by the remote service</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Spatial#referenceCounter_" local-name="referenceCounter_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The reference counter for this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <class name="H.service.metaInfo.Spatial.GeometryData_" local-name="GeometryData_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To store the geometry and the hybrid index of a spatial object for a certain tile</p></prose>
              </description>
              <constructor local-name="GeometryData_" name="H.service.metaInfo.Spatial.GeometryData_">
                <param name="geometry">
                  <types>
                    <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.math.Point"/>
                          </app>
                        </typed>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_hybridIdx" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.service.metaInfo.Spatial.GeometryData_#geometry" local-name="geometry" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Spatial.GeometryData_#hybridIdx" local-name="hybridIdx" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
            </class>
            <property name="H.service.metaInfo.Spatial.emptyGeometryData_" local-name="emptyGeometryData_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reusable GeometryData_ instance to use if no geometry data could be found</p></prose>
              </description>
              <types>
                <type ref="H.service.metaInfo.Spatial.GeometryData_"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.Spatial.GeometryData_"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Spatial#geometryDataByTileKey_" local-name="geometryDataByTileKey_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A mapping of tile keys and geometry data for the tile</p></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, H.service.metaInfo.Spatial.GeometryData_&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="H.service.metaInfo.Spatial.GeometryData_"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Spatial#getGeometryData_" local-name="getGeometryData_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A internal helper function to fetch geometry data for a given tile</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry data are requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.service.metaInfo.Spatial.GeometryData_"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.Spatial.GeometryData_"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Spatial#setGeometry" local-name="setGeometry" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Sets the geometry for a tile. Be aware that NO invalidation is triggered, because we expect that geometries are only
set during RemoteTileProvider#createTileInternal which triggers an update by itself!</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is added</p></prose>
                </description>
              </param>
              <param name="geometry">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geometry to add</p></prose>
                </description>
              </param>
              <param name="opt_hybridIdx" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The index where the outline geometry is starting.
       If ommited the geometry is treated as none-hybrid</p></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.Spatial#removeGeometry" local-name="removeGeometry" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Removes the geometry for a the given tile. Be aware that NO invalidation is triggered, beacuse we expect that
geometries are only removed during a Cache#onDrop!</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is removed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.Spatial#getRemoteId" local-name="getRemoteId" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.service.metaInfo.IObject#getRemoteId">
              <description>
                <prose><p>Returns this object's remote ID which is used to identify different remote objects who are represented as one and
the same map object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Spatial#retain" local-name="retain" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.service.metaInfo.IObject#retain">
              <description>
                <prose><p>A method which is called whenever a new reference to this object is retained.</p></prose>
              </description>
            </method>
            <method name="H.service.metaInfo.Spatial#release" local-name="release" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.service.metaInfo.IObject#release">
              <description>
                <prose><p>A method which is called whenever a previously retained reference to this object is now released.
A concrete implementation of this method has to call H.service.metaInfo.ObjectProvider#removeObject
when all references to this object are released.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>to indicate if all references to this object are released</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <interface name="H.service.metaInfo.IParser" local-name="IParser" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This interface represents functionality to parse a tile based response of a remote object service</p></prose>
            </description>
            <method name="H.service.metaInfo.IParser#parse" local-name="parse" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>To parse a response of a remote object service. If error occurres during parsing, method should
return <code>undefined</code></p></prose>
              </description>
              <param name="provider">
                <types>
                  <type ref="H.service.metaInfo.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.ObjectProvider"/>
                </ctype>
                <description>
                  <prose><p>The provider to create map objects for</p></prose>
                </description>
              </param>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The according tile of the response</p></prose>
                </description>
              </param>
              <param name="response">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The response to parse</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.service.metaInfo.IParser.Result"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.service.metaInfo.IParser.Result"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.service.metaInfo.IParser.Result" local-name="Result" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To store the resulting map objects after parsing a remote object service response</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="spatials"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="H.map.Spatial"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="markers"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="H.map.Marker"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="domMarkers"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="H.map.DomMarker"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.service.metaInfo.IParser.Result#spatials" local-name="spatials" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A list of parsed spatial objects or undefined if no spatials result</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.Spatial&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Spatial"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.IParser.Result#markers" local-name="markers" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A list of parsed marker objects or undefined if no markers result</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.Marker&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Marker"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.IParser.Result#domMarkers" local-name="domMarkers" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A list of parsed DOM marker objects or undefined if no DOM markers result</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.DomMarker&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.DomMarker"/>
                    </app>
                  </typed>
                </ctype>
              </property>
            </typedef>
          </interface>
          <class name="H.service.metaInfo.Parser" local-name="Parser" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A concrete parser implementation for
<a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tiles</a>.</p>
<p>The parser provides aditional features like:</p>
<ul>
<li>Cleanups of meaningless meta-info properties as well as geometry data to reduce the memory foot print.</li>
<li>Adds a &quot;category&quot; property to each meta-info.</li>
<li>Stores the meta-info for all created map objects {@see H.map.Object#getData}.</li>
<li>Creates hybrid spatial objects for buildings (see H.map.Spatial.Options#hybridIdx).</li>
<li>Determines objects with the same remote ID and utilize the remote object managment of the provider.</li>
</ul></prose>
            </description>
            <extends>
              <type ref="H.service.metaInfo.IParser"/>
            </extends>
            <constructor local-name="Parser" name="H.service.metaInfo.Parser">
              <param name="opt_categoryFilter" optional="true">
                <types>
                  <type ref="Array.&lt;string&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of meta-info category names which should be suppressed.
    See section
    <a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tile</a>
    for valid category names.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.service.metaInfo.Parser#suppressedCategories_" local-name="suppressedCategories_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A mapping of category names and a their suppression state
We set a same-named instance property if any category is suppressed</p></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, boolean&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="boolean"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Parser.parseFailed_" local-name="parseFailed_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A flag to indicate whether the parsing failed</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Parser.faile_" local-name="faile_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A helper method to signalize a failed parse</p></prose>
              </description>
            </method>
            <property name="H.service.metaInfo.Parser.entityParsers_" local-name="entityParsers_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A dictionary of entity parsers for all known meta-info categories.
The expected arguments are:</p>
<ul>
<li>the according spatial tile of the response</li>
<li>the objects provider to use for map object creation</li>
<li>the parser instance</li>
<li>the category</li>
<li>the response's entity to parse</li>
<li>the parser result set to store the resulting objects</li>
</ul></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, function( H.map.provider.SpatialTile, H.service.metaInfo.ObjectProvider, H.service.metaInfo.Parser, string, Object, H.service.metaInfo.IParser.Result)&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <func>
                      <param>
                        <name name="H.map.provider.SpatialTile"/>
                      </param>
                      <param>
                        <name name="H.service.metaInfo.ObjectProvider"/>
                      </param>
                      <param>
                        <name name="H.service.metaInfo.Parser"/>
                      </param>
                      <param>
                        <name name="string"/>
                      </param>
                      <param>
                        <name name="Object"/>
                      </param>
                      <param>
                        <name name="H.service.metaInfo.IParser.Result"/>
                      </param>
                    </func>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Parser.verticesToGeometry_" local-name="verticesToGeometry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To convert meta-info vertices into a geometry</p></prose>
              </description>
              <param name="vertices">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list vertices as alternating x and y coordinates</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the resulting geometry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Parser.boxToGeometry_" local-name="boxToGeometry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To convert a meta-info box into a sub-geometry.</p></prose>
              </description>
              <param name="box">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A meta data box, formatted as [left, top, width, height]</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the resulting sub-geometry. Be aware that it returns an array of
                                    H.math.Point but NOT an array of arrays of H.math.Point.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Parser.boundingBoxListToGeometry_" local-name="boundingBoxListToGeometry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To convert a list of &quot;bounding boxes&quot; into a geometry</p></prose>
              </description>
              <param name="boundingBoxList">
                <types>
                  <type ref="Array.&lt;Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of bounding box maps</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the resulting geometry</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.service.metaInfo.Parser.boundingBoxKeys_" local-name="boundingBoxKeys_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A list of all supported names of bounding boxes</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Parser.boundingBoxMapToGeometry_" local-name="boundingBoxMapToGeometry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Parses a map of bounding boxes like
  {
    &quot;text box&quot;:       [x, y, w, ,h],
    &quot;bullet box&quot;:     [x, y, w, ,h],
    &quot;annotation box&quot;: [x, y, w, ,h]
  }
and push the resulting sub-geometries to the given geometry</p></prose>
              </description>
              <param name="boundingBoxMap">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>A map of bounding boxes</p></prose>
                </description>
              </param>
              <param name="geometry">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the geometry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Parser.vertexIndicesToGeometry_" local-name="vertexIndicesToGeometry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To convert meta-info vertex-indices into a geometry</p></prose>
              </description>
              <param name="vertices">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of vertices as alternating x and y values</p></prose>
                </description>
              </param>
              <param name="indices">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of vertex indices to discribe the geometry</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the resulting geometry</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.service.metaInfo.Parser.spatialOptions_" local-name="spatialOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reusable object to use as spatial options</p></prose>
              </description>
              <types>
                <type ref="H.map.Spatial.Options"/>
              </types>
              <ctype>
                <name name="H.map.Spatial.Options"/>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Parser.createSpatial_" local-name="createSpatial_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A helper function to create and prepare a spatial objects</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="provider">
                <types>
                  <type ref="H.service.metaInfo.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.ObjectProvider"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="geometry">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="style">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="data">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="category">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="result">
                <types>
                  <type ref="H.service.metaInfo.IParser.Result"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.IParser.Result"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="hybridIdx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_remoteId" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.service.metaInfo.Spatial"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.Spatial"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.service.metaInfo.Parser.TRANSPARENT_" local-name="TRANSPARENT_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Parser#defaultStyle_" local-name="defaultStyle_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The spatial style to use by default.
It has full transparent fill- and stroke-color to be not rendered but detectable in hit test</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Parser#streetLabelStyles_" local-name="streetLabelStyles_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Mapping of &quot;font-size&quot; to an SpatialStyle with corresponding lineWidth</p></prose>
              </description>
              <types>
                <type ref="Object.&lt;*, H.map.SpatialStyle&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <all/>
                  </app>
                  <app>
                    <name name="H.map.SpatialStyle"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.metaInfo.Parser.streetLabelStyleAttributes_" local-name="streetLabelStyleAttributes_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Reusable object to pass style attributes to SpatialStyle#getCopy</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle.Options"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle.Options"/>
              </ctype>
            </property>
            <method name="H.service.metaInfo.Parser#getStreetLabelStyle_" local-name="getStreetLabelStyle_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns a &quot;street label&quot; style according to the given font size</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="fontSize">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Parser.cleanupMetaInfoData_" local-name="cleanupMetaInfoData_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Cleans up meta-info data by removing all meaningless fields recursively
We treat as meaningless: empty strings, false, null, empty arrays and empty objects.
Caused of revcursive calls an object like { &quot;foo&quot;: [], &quot;bar&quot;: {}, &quot;foobar&quot;: &quot;&quot; } will be cleaned to { } and
the return value is false because it's an empty object (after cleanup).
An object like { &quot;foo&quot;: [], &quot;bar&quot;: {}, &quot;foobar&quot;: 4711 } will be cleaned to { &quot;foobar&quot;: 4711 } and
the return value is true because it's not empty.</p></prose>
              </description>
              <param name="key">
                <types>
                  <type ref="string"/>
                  <type ref="number"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <name name="number"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The property name or index of the data value</p></prose>
                </description>
              </param>
              <param name="value">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The meta-info data value to clean up</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates wheter the data value is meaningfull</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Parser#parse" local-name="parse" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.service.metaInfo.IParser#parse">
              <description>
                <prose><p>To parse a response of a remote object service. If error occurres during parsing, method should
return <code>undefined</code></p></prose>
              </description>
              <param name="provider">
                <types>
                  <type ref="H.service.metaInfo.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.ObjectProvider"/>
                </ctype>
                <description>
                  <prose><p>The provider to create map objects for</p></prose>
                </description>
              </param>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The according tile of the response</p></prose>
                </description>
              </param>
              <param name="response">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The response to parse</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.service.metaInfo.IParser.Result"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.service.metaInfo.IParser.Result"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </class>
          <interface name="H.service.metaInfo.IObject" local-name="IObject" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This interface represents additional properties for map objects from remote object providers</p></prose>
            </description>
            <method name="H.service.metaInfo.IObject#getRemoteId" local-name="getRemoteId" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Returns this object's remote ID which is used to identify different remote objects who are represented as one and
the same map object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.IObject#retain" local-name="retain" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>A method which is called whenever a new reference to this object is retained.</p></prose>
              </description>
            </method>
            <method name="H.service.metaInfo.IObject#release" local-name="release" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>A method which is called whenever a previously retained reference to this object is now released.
A concrete implementation of this method has to call H.service.metaInfo.ObjectProvider#removeObject
when all references to this object are released.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>to indicate if all references to this object are released</p></prose>
                </description>
              </returns>
            </method>
          </interface>
          <class name="H.service.metaInfo.ObjectProvider" local-name="ObjectProvider" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This class represents a provider for remote objects which requests the data from a service and converts them to
map objects.</p></prose>
            </description>
            <extends>
              <type ref="H.map.provider.ObjectProvider"/>
            </extends>
            <constructor local-name="ObjectProvider" name="H.service.metaInfo.ObjectProvider">
              <param name="parser">
                <types>
                  <type ref="H.service.metaInfo.IParser"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.IParser"/>
                </ctype>
                <description>
                  <prose><p>The parser to use for parsing the responses</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.service.metaInfo.ObjectProvider.Options"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.ObjectProvider.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The options for the provider</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.service.metaInfo.ObjectProvider#parser_" local-name="parser_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.service.metaInfo.IParser"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.IParser"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.ObjectProvider#options_" local-name="options_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.service.metaInfo.ObjectProvider.Options"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.ObjectProvider.Options"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.ObjectProvider.emptyArray_" local-name="emptyArray_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <method name="H.service.metaInfo.ObjectProvider#registerResponse" local-name="registerResponse" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To register a response object for a given tile</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the response should be registered</p></prose>
                </description>
              </param>
              <param name="response">
                <types>
                  <type ref="Object.&lt;string, *&gt;"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <all/>
                        </app>
                      </typed>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The response to register</p></prose>
                </description>
              </param>
            </method>
            <property name="H.service.metaInfo.ObjectProvider#remoteObjects_" local-name="remoteObjects_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To map IDs of remote objects to map objects.</p></prose>
              </description>
              <types>
                <type ref="Object.&lt;string, H.service.metaInfo.Spatial&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="H.service.metaInfo.Spatial"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.service.metaInfo.ObjectProvider#fetchObjectById" local-name="fetchObjectById" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To fetch an managed remote object.
The ID must not equal any property name of the Javascript object's prototype!</p></prose>
              </description>
              <param name="id">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The remote ID of the object to fetch</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.map.Object"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>the fetched object or undefined if it is not managed</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.ObjectProvider#addObject" local-name="addObject" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To add an objects to the remote object managment.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.service.metaInfo.Spatial"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.Spatial"/>
                </ctype>
                <description>
                  <prose><p>The object to add</p></prose>
                </description>
              </param>
              <exception>
                <description>
                  <prose>Error if the remote object was already added before</prose>
                </description>
              </exception>
            </method>
            <method name="H.service.metaInfo.ObjectProvider#removeObject" local-name="removeObject" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To remove an object from the remote object managment.
This method must not called before all references to this remote object are released!
Otherwise all state (like style, visibility etc.) will be lost
The ID must not equal any property name of the Javascript object's prototype!</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.service.metaInfo.IObject"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.IObject"/>
                </ctype>
                <description>
                  <prose><p>The object to remove</p></prose>
                </description>
              </param>
            </method>
            <typedef name="H.service.metaInfo.ObjectProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Options which are used to initialize the meta-info povider</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.service.metaInfo.ObjectProvider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.service.metaInfo.ObjectProvider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The max maximal supported zoom level, default is <code>22</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
            </typedef>
          </class>
          <class name="H.service.metaInfo.Service" local-name="Service" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class encapsulates a
<a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tile</a>
end point of the HERE Map Tile API.</p>
<p>An instance of this class can be retrieved by calling the factory method on
a platform instance. <link ref="H.service.Platform#getMetaInfoTileService" />.</p></prose>
            </description>
            <extends>
              <type ref="H.service.IConfigurable"/>
            </extends>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <constructor local-name="Service" name="H.service.metaInfo.Service">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.service.metaInfo.Service.Options"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.Service.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>additional service parameters</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.service.metaInfo.Service#event:infoupdate" local-name="infoupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is fired when the service's info resource was successfully
retrieved and processed.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <event name="H.service.metaInfo.Service#event:versionupdate" local-name="versionupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is fired when the service's version hash was successfully
updated.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <event name="H.service.metaInfo.Service#event:copyrightupdate" local-name="copyrightupdate" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is fired when the service's copyrights were successfully
retrieved.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.service.metaInfo.Service.hash" local-name="hash" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service.listToObject" local-name="listToObject" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Transforms an info list from the map tile service into a JS-style object</p></prose>
              </description>
              <param name="infoData">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="what">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.Service#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the configured service URL.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.service.Url"/>
                </types>
                <ctype>
                  <name name="H.service.Url"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#getShards" local-name="getShards" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the sharding sub domains for this service.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;string&gt;"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                      </typed>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#getType" local-name="getType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the map tile type provided by this service.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the map tile type</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#getVersion" local-name="getVersion" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the mmeta info tile service's newest version hash.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>meta information for this map tile service</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#setVersion_" local-name="setVersion_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method sets this meta tile service's version string</p></prose>
              </description>
              <param name="version">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.Service#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Returns this MetaInfoTileService's copyrights collection.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.service.MapTileCopyrights"/>
                </types>
                <ctype>
                  <name name="H.service.MapTileCopyrights"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#updateInfo" local-name="updateInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This mathod updates this map tile service's meta information.</p></prose>
              </description>
              <param name="info">
                <types>
                  <type ref="H.service.ServiceResult"/>
                </types>
                <ctype>
                  <name name="H.service.ServiceResult"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.Service#fetchInfo" local-name="fetchInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method retrieves meta-information from the map tile backend</p></prose>
              </description>
            </method>
            <method name="H.service.metaInfo.Service#getInfo" local-name="getInfo" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the meta info tile service's meta information. The method will
return an object once the map tile service's data has been fetched.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.service.metaInfo.Service.Info"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.service.metaInfo.Service.Info"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>meta information for this meta info tile service</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#createTileProvider" local-name="createTileProvider" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates a tile provider which uses the meta info tile backend. This provider can be used as a data source
for an TileLayer.</p></prose>
              </description>
              <param name="tileSize">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The tile size</p></prose>
                </description>
              </param>
              <param name="pixelratio">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_categoryFilter" optional="true">
                <types>
                  <type ref="Array.&lt;string&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of meta-info category names which should be suppressed. See
     <a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tile</a>
     for valid category names.</p></prose>
                </description>
              </param>
              <param name="opt_additionalParameters" optional="true">
                <types>
                  <type ref="H.service.ServiceParameters"/>
                </types>
                <ctype>
                  <name name="H.service.ServiceParameters" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Additional parameters for the meta info service</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.provider.TileProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.TileProvider"/>
                </ctype>
                <description>
                  <prose><p>the tile provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.Service#createTileLayer" local-name="createTileLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates a tile layer. This layer can be used as a layer on a map's data model.</p></prose>
              </description>
              <param name="tileSize">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the tile size</p></prose>
                </description>
              </param>
              <param name="pixelratio">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the tile's pixel ratio, should be aligned with base map tile</p></prose>
                </description>
              </param>
              <param name="opt_categoryFilter" optional="true">
                <types>
                  <type ref="Array.&lt;string&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of meta-info category names which should be suppressed. See
     <a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tile</a>
     for valid category names.</p></prose>
                </description>
              </param>
              <param name="opt_additionalParameters" optional="true">
                <types>
                  <type ref="H.service.ServiceParameters"/>
                </types>
                <ctype>
                  <name name="H.service.ServiceParameters" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Additional parameters for the meta info service</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.layer.TileLayer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.TileLayer"/>
                </ctype>
                <description>
                  <prose><p>the tile layer</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.service.metaInfo.Service.Info" local-name="Info" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="maps"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="schemes"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="tiletypes"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="formats"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="resolutions"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="languages"/>
                    </key>
                    <value>
                      <typed>
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="Object"/>
                        </app>
                      </typed>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.service.metaInfo.Service.Info#maps" local-name="maps" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Info#schemes" local-name="schemes" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Info#tiletypes" local-name="tiletypes" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Info#formats" local-name="formats" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Info#resolutions" local-name="resolutions" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Info#languages" local-name="languages" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
            </typedef>
            <typedef name="H.service.metaInfo.Service.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="version"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="subDomain"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.service.metaInfo.Service.Options#version" local-name="version" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the map version hash to use for retrieving tiles,
 default is newest and will be automatically updated</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.service.metaInfo.Service.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the sub-domain of the map tile service relative
 to the platform's base URL, default is <code>'maps'</code></p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <method name="H.service.metaInfo.Service#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
              <description>
                <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
              </description>
              <param name="appId">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
                </description>
              </param>
              <param name="appCode">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
                </description>
              </param>
              <param name="useHTTPS">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
                </description>
              </param>
              <param name="useCIT">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
                </description>
              </param>
              <param name="opt_baseUrl" optional="true">
                <types>
                  <type ref="H.service.Url"/>
                </types>
                <ctype>
                  <name name="H.service.Url" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.service.IConfigurable"/>
                </types>
                <ctype>
                  <name name="H.service.IConfigurable"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </class>
          <class name="H.service.metaInfo.TileProvider" local-name="TileProvider" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents
<a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tiles</a>
that annotate map tiles <link ref="H.service.MapTileProvider" />
with additional data that describes objects (buildings, labels, public transport etc.) rendered on
map tiles.</p></prose>
            </description>
            <extends>
              <type ref="H.map.provider.RemoteTileProvider"/>
            </extends>
            <constructor local-name="TileProvider" name="H.service.metaInfo.TileProvider">
              <param name="service">
                <types>
                  <type ref="H.service.metaInfo.Service"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.Service"/>
                </ctype>
                <description>
                  <prose><p>the meta tile service which holds information from
  about the soutce of the tiles</p></prose>
                </description>
              </param>
              <param name="opt_params" optional="true">
                <types>
                  <type ref="H.service.ServiceParameters"/>
                </types>
                <ctype>
                  <name name="H.service.ServiceParameters" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an additional set of URL parameters</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.service.metaInfo.TileProvider.Options"/>
                </types>
                <ctype>
                  <name name="H.service.metaInfo.TileProvider.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>additional parameters</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.service.metaInfo.TileProvider#params_" local-name="params_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#service_" local-name="service_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Meta info tile service.</p></prose>
              </description>
              <types>
                <type ref="H.service.metaInfo.Service"/>
              </types>
              <ctype>
                <name name="H.service.metaInfo.Service"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#shards_" local-name="shards_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
                <type ref="null"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <null/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#pixelratio_" local-name="pixelratio_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#tileCacheSize_" local-name="tileCacheSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#canvasPool_" local-name="canvasPool_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Simple canvas pool resembles one in SpatialTileProvider.
TODO: we need proper API-wide canvas pool</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;HTMLCanvasElement&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="HTMLCanvasElement"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.service.metaInfo.TileProvider#cache_" local-name="cache_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Tile cache.</p></prose>
              </description>
              <types>
                <type ref="H.util.Cache"/>
              </types>
              <ctype>
                <name name="H.util.Cache"/>
              </ctype>
            </property>
            <method name="H.service.metaInfo.TileProvider#onTileDropped_" local-name="onTileDropped_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Method revokes canvas to canvas pool when tile drops from cache.</p></prose>
              </description>
              <param name="tileKey">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The ID of the dropped tile</p></prose>
                </description>
              </param>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The dropped tile</p></prose>
                </description>
              </param>
              <param name="size">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The size of the entry</p></prose>
                </description>
              </param>
            </method>
            <method name="H.service.metaInfo.TileProvider#getCanvas_" local-name="getCanvas_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Method fetches canvas from canvas pool or creates new canvas.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <name name="HTMLCanvasElement"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.service.metaInfo.TileProvider#onObjectProviderUpdate_" local-name="onObjectProviderUpdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Method redispatches update event from object provider.</p></prose>
              </description>
            </method>
            <method name="H.service.metaInfo.TileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Disposes of this map tile provider instance.</p></prose>
              </description>
            </method>
            <method name="H.service.metaInfo.TileProvider#updateAndReload_" local-name="updateAndReload_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Callback that's invoked when version information arrives from the server.</p></prose>
              </description>
            </method>
            <property name="H.service.metaInfo.TileProvider#additionalParams_" local-name="additionalParams_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Additional GET parameters needed to fetch meta info.</p></prose>
              </description>
            </property>
            <typedef name="H.service.metaInfo.TileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Configuration object which can be used to initialize the TileProvider.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="tileCacheSize"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="pixelratio"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="tileSize"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="categoryFilter"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="string"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.service.metaInfo.TileProvider.Options#tileCacheSize" local-name="tileCacheSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The number of fully rendered spatial tiles that are cached for immediate reuse, default is <code>32</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.service.metaInfo.TileProvider.Options#tileSize" local-name="tileSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The size of the tiles rendered by this provider (must be power of 2, default is <code>256</code>)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.service.metaInfo.TileProvider.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.service.metaInfo.TileProvider.Options#(Array.&lt;string&gt;=)" local-name="(Array.&lt;string&gt;=)" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A list of meta-info category names which should be suppressed. See
     <a href="http://developer.here.com/rest-apis/documentation/enterprise-map-tile/topics/tile-metainfo.html">Metainfo Tile</a>
     for valid category names.</p></prose>
                </description>
              </property>
            </typedef>
          </class>
        </ns>
        <class name="H.service.EnterpriseRoutingService" local-name="EnterpriseRoutingService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class encapsulates Enterprise Routing REST API as a service stub.
An instance of this class can be retrieved by calling the factory method on
a platform instance. <link ref="H.service.Platform#getEnterpriseRoutingService" />.</p></prose>
            <example>var platform = new H.service.Platform(),
    router = platform.getEnterpriseRoutingService();

var calculateIsoline = {
      &apos;start&apos;: &apos;geo!52.5,13.4&apos;,
      &apos;distance&apos;: &apos;1000,2000&apos;,
      &apos;mode&apos;: &apos;fastest;car;traffic:disabled&apos;
    },
    onResult = function(result) {
      console.log(result.response.isolines[0]);
    },
    onError = function(error) {
       console.log(error);
    };
router.calculateIsoline(calculateIsoline, onResult, onError);</example>
          </description>
          <extends>
            <type ref="H.service.AbstractRestService"/>
          </extends>
          <constructor local-name="EnterpriseRoutingService" name="H.service.EnterpriseRoutingService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.EnterpriseRoutingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.EnterpriseRoutingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.EnterpriseRoutingService#calculateRoute" local-name="calculateRoute" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a &quot;calculateroute&quot; request to Enterprise Routing REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Routing REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="calculateRouteParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the routing request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the
 <a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Enterprise Routing REST API</a>
 provides a response to the request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.EnterpriseRoutingService#getRoute" local-name="getRoute" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a &quot;getroute&quot; request to Enterprise Routing REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Routing REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="getRouteParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the routing request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the
 <a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Enterprise Routing REST API</a>
 provides a response to the request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.EnterpriseRoutingService#getLinkInfo" local-name="getLinkInfo" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a &quot;getlinkinfo&quot; request to Enterprise Routing REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Routing REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="getLinkInfoParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the routing request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the
 <a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Enterprise Routing REST API</a>
 provides a response to the request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
          </method>
          <method name="H.service.EnterpriseRoutingService#calculateIsoline" local-name="calculateIsoline" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a &quot;calculateisoline&quot; request to Enterprise Routing REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Routing REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="calculateIsolineParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the routing request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the
 <a href="http://developer.here.com/rest-apis/documentation/enterprise-routing">Enterprise Routing REST API</a>
 provides a response to the request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
          </method>
          <typedef name="H.service.EnterpriseRoutingService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseUrl"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.Url"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.EnterpriseRoutingService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The sub-domain of the routing service relative to the platform's base URL (default is <code>'route'</code>)</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.EnterpriseRoutingService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The path of the map tile service, default is <code>&quot;routing/7.2&quot;</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.EnterpriseRoutingService.Options#baseUrl" local-name="baseUrl" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The base URL of the service, defaults to the the platform's base URL</p></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <property name="H.service.EnterpriseRoutingService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#subDomain_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.EnterpriseRoutingService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#path_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.EnterpriseRoutingService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#callbackKey_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.EnterpriseRoutingService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#baseUrl_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.EnterpriseRoutingService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#getUrl">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.EnterpriseRoutingService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#restApiRequest">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.EnterpriseRoutingService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.RoutingService" local-name="RoutingService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class encapsulates the Routing REST API as a service stub.
An instance of this class can be retrieved by calling the factory method on
a platform instance. <link ref="H.service.Platform#getRoutingService" />.</p></prose>
            <example>var platform = new H.service.Platform(),
    router = platform.getRoutingService();

var calculateRouteParams = {
      &apos;waypoint0&apos;: &apos;geo!52.5,13.4&apos;,
      &apos;waypoint1&apos;: &apos;geo!52.5,13.45&apos;,
      &apos;mode&apos;: &apos;fastest;car;traffic:disabled&apos;
    },
    onResult = function(result) {
      console.log(result.response.route[0]);
    },
    onError = function(error) {
       console.log(error);
    };
router.calculateRoute(calculateRouteParams, onResult, onError);</example>
          </description>
          <extends>
            <type ref="H.service.AbstractRestService"/>
          </extends>
          <constructor local-name="RoutingService" name="H.service.RoutingService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.RoutingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.RoutingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.RoutingService#calculateRoute" local-name="calculateRoute" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a &quot;calculateroute&quot; request to Routing REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/routing">Routing REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="calculateRouteParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the routing request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the
 <a href="http://developer.here.com/rest-apis/documentation/routing">Routing REST API</a>
 provides a response to the request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
          </method>
          <typedef name="H.service.RoutingService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="baseUrl"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.Url"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.RoutingService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the sub-domain of the routing service relative
 to the platform's base URL, default is <code>'route'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.RoutingService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the path of the map tile service, default is
 <code>'routing/7.2'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.RoutingService.Options#baseUrl" local-name="baseUrl" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>an optional base URL if it differs
 from the platform's default base URL</p></prose>
              </description>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <property name="H.service.RoutingService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#subDomain_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.RoutingService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#path_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.RoutingService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#callbackKey_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.RoutingService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#baseUrl_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.RoutingService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#getUrl">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.RoutingService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#restApiRequest">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.RoutingService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <class name="H.service.GeocodingService" local-name="GeocodingService" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class encapsulates the Geocoding REST API in a service stub with calls
to its various resources implemented.</p>
<p>An instance of this class can be retrieved by calling the factory method on
a platform instance. <link ref="H.service.Platform#createGeocodingService" />.</p></prose>
            <example>var platform = new H.service.Platform(),
    geocoder = platform.getGeocodingService();

var geocodingParams = {
      searchText: &apos;425 W Randolph Street, Chicago&apos;
    },
    onResult = function(result) {
      console.log(result.view[0].result[0].displayPosition);
    },
    onError = function(error) {
       console.log(error);
    };
geocoder.geocode(geocodingParams, onResult, onError);</example>
          </description>
          <extends>
            <type ref="H.service.AbstractRestService"/>
          </extends>
          <constructor local-name="GeocodingService" name="H.service.GeocodingService">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.service.GeocodingService.Options"/>
              </types>
              <ctype>
                <name name="H.service.GeocodingService.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <method name="H.service.GeocodingService#geocode" local-name="geocode" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a reverse geocoding request to Geocoder REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/geocoder">Geocoder REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="geoodingParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the service
 parameters to be sent with the geocoding request.</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the Geocoder REST API provides a response to the
 request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.GeocodingService#reverseGeocode" local-name="reverseGeocode" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a reverse geocoding request to Geocoder REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/geocoder">Geocoder REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="reverseGeocodingParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the
 service parameters to be sent with the reverse geocoding request</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the Geocoder REST API provides a response to the
 request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.GeocodingService#search" local-name="search" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sends a landmark search request to Geocoder REST API and
calls the <code>onResult</code> callback function once the service response
was received - providing a <link ref="H.service.ServiceResult" /> object -
or the <code>onError</code> callback if a communication error occured.</p>
<p>Please refer to the
<a href="http://developer.here.com/rest-apis/documentation/geocoder">Geocoder REST API documentation</a>
for information on available parameters and the response object structure.</p></prose>
            </description>
            <param name="searchParams">
              <types>
                <type ref="H.service.ServiceParameters"/>
              </types>
              <ctype>
                <name name="H.service.ServiceParameters"/>
              </ctype>
              <description>
                <prose><p>the
 service parameters to be sent with the reverse geocoding request</p></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="H.service.ServiceResult"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function
 will be called once the Geocoder REST API provides a response to the
 request.</p></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Error"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>this function will
 be called if a communication error occurs during the JSON-P request</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.service.GeocodingService.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="subDomain"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="path"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.service.GeocodingService.Options#subDomain" local-name="subDomain" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the sub-domain of the geo-coding service relative
 to the platform's base URL, default is <code>'geocoder'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.service.GeocodingService.Options#path" local-name="path" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the path of the map tile service, default is
 <code>'6.2'</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <property name="H.service.GeocodingService#subDomain_" local-name="subDomain_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#subDomain_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.GeocodingService#path_" local-name="path_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#path_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.GeocodingService#callbackKey_" local-name="callbackKey_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#callbackKey_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <property name="H.service.GeocodingService#baseUrl_" local-name="baseUrl_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#baseUrl_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.Url"/>
            </types>
            <ctype>
              <name name="H.service.Url"/>
            </ctype>
          </property>
          <method name="H.service.GeocodingService#getUrl" local-name="getUrl" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#getUrl">
            <description>
              <prose><p>Returns this service's URL according to it's configuration.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose><p>the URL of this service</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.GeocodingService#restApiRequest" local-name="restApiRequest" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.service.AbstractRestService#restApiRequest">
            <description>
              <prose><p>This method fires request to actual rest service</p></prose>
            </description>
            <param name="url">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onResult">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onError">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.JsonpRequestHandle"/>
              </types>
              <ctype>
                <name name="H.service.JsonpRequestHandle"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.service.GeocodingService#configure" local-name="configure" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.service.IConfigurable#configure">
            <description>
              <prose><p>This methods receive configuration parameters from the platform, that can be
used by the object implementing the interface.</p></prose>
            </description>
            <param name="appId">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application ID to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="appCode">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The application code to identify the client against the platform (mandatory to provide)</p></prose>
              </description>
            </param>
            <param name="useHTTPS">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether secure communication should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="useCIT">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates whether the Customer Integration Testing should be used, default is <code>false</code></p></prose>
              </description>
            </param>
            <param name="opt_baseUrl" optional="true">
              <types>
                <type ref="H.service.Url"/>
              </types>
              <ctype>
                <name name="H.service.Url" optional="true"/>
              </ctype>
              <description>
                <prose><p>The base URL of the platform, default is <code>http://api.here.com</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.IConfigurable"/>
              </types>
              <ctype>
                <name name="H.service.IConfigurable"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
        </class>
        <method name="H.service.buildInfo" local-name="buildInfo" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose><p>Function returns build information</p></prose>
          </description>
          <returns>
            <types>
              <type ref="H.util.BuildInfo"/>
            </types>
            <ctype>
              <name name="H.util.BuildInfo"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </returns>
        </method>
      </ns>
    </symbols>
  </module>
</modules>
