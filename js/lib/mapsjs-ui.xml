<?xml version="1.0"?>
<modules>
  <module name="mapsjs-ui">
    <symbols>
      <ns name="H.ui" local-name="ui" access="public" scope="static" virtual="false" published="true" exported="false">
        <description>
          <prose><p>This namespace contains classes and functionality for UI elements.</p></prose>
        </description>
        <ns name="H.ui.base" local-name="base" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This namespace contains basic UI elements from which the UI controls are built.</p></prose>
          </description>
          <class name="H.ui.base.Element" local-name="Element" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents the base class of UI elements such as Buttons, ListEntries, etc.</p></prose>
            </description>
            <extends>
              <type ref="goog.events.EventTarget"/>
            </extends>
            <constructor local-name="Element" name="H.ui.base.Element">
              <param name="opt_elementType" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose><p>the type of HTML element this UI element renders as, default is <code>'div'</code></p></prose>
                </description>
              </param>
              <param name="opt_className" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional class name to be used on this element</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.ui.base.Element#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This event is dispatched when Element state is was modified.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.ui.base.Element#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.Element#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Element#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <enum name="H.ui.base.Element.EventType" local-name="EventType" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.ui.base.Element.EventType.STATECHANGE" local-name="STATECHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <method name="H.ui.base.Element#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Element#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Element#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Element#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.Element#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.Element#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Element#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Element#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.ui.base.Container" local-name="Container" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents an abstract base class for container UI elements such as Lists and Panels.</p></prose>
            </description>
            <extends>
              <type ref="H.ui.base.Element"/>
            </extends>
            <constructor local-name="Container" name="H.ui.base.Container">
              <param name="opt_elementType" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose><p>the type of HTML element this UI element renders as, default is <code>'div'</code></p></prose>
                </description>
              </param>
              <param name="opt_className" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional class name to be used on this element</p></prose>
                </description>
              </param>
              <param name="opt_children" optional="true">
                <types>
                  <type ref="Array.&lt;H.ui.base.Element&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.Element"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>optional child elements to be added to this container</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.ui.base.Container#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Adds a child element to be rendered within the container element.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be added</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Container"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Container"/>
                </ctype>
                <description>
                  <prose><p>this container instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Returns the child collection of this container.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;H.ui.base.Element&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.Element"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the children of this container</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Removes a child element from this container's child collection.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be removed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Disposes of a single child element within this container</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child to be disposed of</p></prose>
                </description>
              </param>
            </method>
            <event name="H.ui.base.Container#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
              <description>
                <prose><p>This event is dispatched when Element state is was modified.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.ui.base.Container#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.Container#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.Container#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.Container#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Container#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Container#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.ui.base.OverlayPanel" local-name="OverlayPanel" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a panel that points to a control.</p></prose>
            </description>
            <extends>
              <type ref="H.ui.base.Container"/>
            </extends>
            <constructor local-name="OverlayPanel" name="H.ui.base.OverlayPanel"/>
            <method name="H.ui.base.OverlayPanel#setState" local-name="setState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the state of this panel.</p></prose>
              </description>
              <param name="state">
                <types>
                  <type ref="H.ui.base.OverlayPanel.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.OverlayPanel.State"/>
                </ctype>
                <description>
                  <prose><p>the state of this panel</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating that the value should be propagated even if it is the same as
 the current value</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.OverlayPanel"/>
                </types>
                <ctype>
                  <name name="H.ui.base.OverlayPanel"/>
                </ctype>
                <description>
                  <prose><p>this panel instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#getState" local-name="getState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the current state of the panel.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.ui.base.OverlayPanel.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.OverlayPanel.State"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#pointToControl" local-name="pointToControl" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adjusts the alignment of the overlay panel to point to the provided control.</p></prose>
              </description>
              <param name="control">
                <types>
                  <type ref="H.ui.Control"/>
                </types>
                <ctype>
                  <name name="H.ui.Control"/>
                </ctype>
                <description>
                  <prose><p>the control to which to point</p></prose>
                </description>
              </param>
            </method>
            <enum name="H.ui.base.OverlayPanel.State" local-name="State" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.ui.base.OverlayPanel.State.OPEN" local-name="OPEN">
                <description>
                  <prose><p>Defines a state where the OverlayPanel is open and visible</p></prose>
                </description>
              </value>
              <value name="H.ui.base.OverlayPanel.State.CLOSED" local-name="CLOSED">
                <description>
                  <prose><p>Defines a state where the OverlayPanel is closed and invisible</p></prose>
                </description>
              </value>
            </enum>
            <method name="H.ui.base.OverlayPanel#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
              <description>
                <prose><p>Adds a child element to be rendered within the container element.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be added</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Container"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Container"/>
                </ctype>
                <description>
                  <prose><p>this container instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
              <description>
                <prose><p>Returns the child collection of this container.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;H.ui.base.Element&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.Element"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the children of this container</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
              <description>
                <prose><p>Removes a child element from this container's child collection.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be removed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
              <description>
                <prose><p>Disposes of a single child element within this container</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child to be disposed of</p></prose>
                </description>
              </param>
            </method>
            <event name="H.ui.base.OverlayPanel#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
              <description>
                <prose><p>This event is dispatched when Element state is was modified.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.ui.base.OverlayPanel#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.OverlayPanel#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.OverlayPanel#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.OverlayPanel#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.OverlayPanel#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.OverlayPanel#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.ui.base.RadioGroup" local-name="RadioGroup" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a group of push buttons of which only one can be active at a time.</p></prose>
            </description>
            <extends>
              <type ref="H.ui.base.Container"/>
            </extends>
            <constructor local-name="RadioGroup" name="H.ui.base.RadioGroup">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.ui.base.RadioGroup.Options"/>
                </types>
                <ctype>
                  <name name="H.ui.base.RadioGroup.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional parameters to be passed to the group</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.ui.base.RadioGroup#event:activebuttonchange" local-name="activebuttonchange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is fired when a radio button becomes active.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <event name="H.ui.base.RadioGroup#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is fired when RadioGroup's state is modified.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <property name="H.ui.base.RadioGroup#title_" local-name="title_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
            </property>
            <property name="H.ui.base.RadioGroup#buttons_" local-name="buttons_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
            </property>
            <enum name="H.ui.base.RadioGroup.EventType" local-name="EventType" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>List of events fired by the radion group</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.ui.base.RadioGroup.EventType.ACTIVEBUTTONCHANGE" local-name="ACTIVEBUTTONCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <method name="H.ui.base.RadioGroup#setTitle" local-name="setTitle" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method set the title of this group.</p></prose>
              </description>
              <param name="title">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the new title of this group</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional flag indicating that the new value is to be updated and propagated even if
 it has the same value as the current title</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.RadioGroup"/>
                </types>
                <ctype>
                  <name name="H.ui.base.RadioGroup"/>
                </ctype>
                <description>
                  <prose><p>this group instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#getTitle" local-name="getTitle" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the current title string of this group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current title</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#addButton" local-name="addButton" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds an button element to this group.</p></prose>
              </description>
              <param name="button">
                <types>
                  <type ref="H.ui.base.PushButton"/>
                </types>
                <ctype>
                  <name name="H.ui.base.PushButton"/>
                </ctype>
                <description>
                  <prose><p>the button to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.RadioGroup"/>
                </types>
                <ctype>
                  <name name="H.ui.base.RadioGroup"/>
                </ctype>
                <description>
                  <prose><p>this group instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#removeButton" local-name="removeButton" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes an button element from this group.</p></prose>
              </description>
              <param name="button">
                <types>
                  <type ref="H.ui.base.PushButton"/>
                </types>
                <ctype>
                  <name name="H.ui.base.PushButton"/>
                </ctype>
                <description>
                  <prose><p>the button to remove</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.RadioGroup"/>
                </types>
                <ctype>
                  <name name="H.ui.base.RadioGroup"/>
                </ctype>
                <description>
                  <prose><p>this group instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#getButtons" local-name="getButtons" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the buttons currently registered with this group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;H.ui.base.PushButton&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.PushButton"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the buttons</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#setActiveButton" local-name="setActiveButton" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the active button of this radio group.</p></prose>
              </description>
              <param name="button">
                <types>
                  <type ref="H.ui.base.PushButton"/>
                </types>
                <ctype>
                  <name name="H.ui.base.PushButton"/>
                </ctype>
                <description>
                  <prose><p>the button to be made the active one</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that no statechange event is to be fired</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#getActiveButton" local-name="getActiveButton" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the currently active button from this group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.ui.base.PushButton"/>
                </types>
                <ctype>
                  <name name="H.ui.base.PushButton"/>
                </ctype>
                <description>
                  <prose><p>the currently active button</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.ui.base.RadioGroup.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="title"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="buttonsOptions"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="H.ui.base.Button.Options"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.ui.base.RadioGroup.Options#title" local-name="title" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>an optional title string for this group</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.ui.base.RadioGroup.Options#buttons" local-name="buttons" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>an optional set of button options to be added to this
 group</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.ui.base.Button.Options&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.Button.Options"/>
                    </app>
                  </typed>
                </ctype>
              </property>
            </typedef>
            <method name="H.ui.base.RadioGroup#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
              <description>
                <prose><p>Adds a child element to be rendered within the container element.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be added</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Container"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Container"/>
                </ctype>
                <description>
                  <prose><p>this container instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
              <description>
                <prose><p>Returns the child collection of this container.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;H.ui.base.Element&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.ui.base.Element"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the children of this container</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
              <description>
                <prose><p>Removes a child element from this container's child collection.</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child element to be removed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
              <description>
                <prose><p>Disposes of a single child element within this container</p></prose>
              </description>
              <param name="child">
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>the child to be disposed of</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.RadioGroup#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.RadioGroup#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.RadioGroup#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.RadioGroup#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.RadioGroup#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.ui.base.Button" local-name="Button" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a button.</p></prose>
            </description>
            <extends>
              <type ref="H.ui.base.Element"/>
            </extends>
            <constructor local-name="Button" name="H.ui.base.Button">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.ui.base.Button.Options"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional parameters to be passed to the button instance</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.ui.base.Button#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This event is dispatched by the button when it's state changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.ui.base.Button#getState" local-name="getState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the current state of the button.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.ui.base.Button.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.State"/>
                </ctype>
                <description>
                  <prose><p>the current state of the button</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setState" local-name="setState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the state of this button.</p></prose>
              </description>
              <param name="state">
                <types>
                  <type ref="H.ui.base.Button.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.State"/>
                </ctype>
                <description>
                  <prose><p>the state to which this button is to be set</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional flag indicating that the onStateChange callback is
 not to be invoked</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Button"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button"/>
                </ctype>
                <description>
                  <prose><p>this button instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#getLabel" local-name="getLabel" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the label string of this button.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the label string of this button</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setLabel" local-name="setLabel" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the label string of this button.</p></prose>
              </description>
              <param name="label">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the label to set on this button</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating that the new label should be set and propagated even if
 it has the same value as the current one.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Button"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button"/>
                </ctype>
                <description>
                  <prose><p>this button instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#onDown_" local-name="onDown_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This button's onDown handler (setting the state to DOWN).</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="Event"/>
                </types>
                <ctype>
                  <name name="Event"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#onUp_" local-name="onUp_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This button's onUp handler (setting the state to UP).</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="Event"/>
                </types>
                <ctype>
                  <name name="Event"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <typedef name="H.ui.base.Button.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="disabled"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="label"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="data"/>
                    </key>
                    <value>
                      <all/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="onStateChange"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <func>
                            <param>
                              <name name="H.util.Event"/>
                            </param>
                          </func>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.ui.base.Button.Options#disabled" local-name="disabled" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>a flag to indicate whether this button is disabled, default is <code>false</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.ui.base.Button.Options#label" local-name="label" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the mark up (used as innerHTML) to be rendered into this button</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.ui.base.Button.Options#onStateChange" local-name="onStateChange" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>an optional event listener for the <code>onstatechange</code> event
 to be immediately added</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="H.util.Event"/>
                    </param>
                  </func>
                </ctype>
              </property>
              <property name="H.ui.base.Button.Options#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>an arbitrary data object to be stored with this button</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
            </typedef>
            <enum name="H.ui.base.Button.State" local-name="State" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This enumeration represents the possible state a button can have, namely 'UP' and 'DOWN'</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.ui.base.Button.State.UP" local-name="UP">
                <description>
                  <prose><p>The button's state when it is not pressed. ('up')</p></prose>
                </description>
              </value>
              <value name="H.ui.base.Button.State.DOWN" local-name="DOWN">
                <description>
                  <prose><p>The button's state when it is pressed. ('down')</p></prose>
                </description>
              </value>
            </enum>
            <method name="H.ui.base.Button#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.Button#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.Button#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.Button#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.Button#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.Button#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.ui.base.PushButton" local-name="PushButton" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a button, which will keep its state when pressed.
Pressing once will change this button's state to down. Pressing it again
will change the button's state to up.</p></prose>
            </description>
            <extends>
              <type ref="H.ui.base.Button"/>
            </extends>
            <constructor local-name="PushButton" name="H.ui.base.PushButton">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.ui.base.Button.Options"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional parameters to be passed to this button instance.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.ui.base.PushButton#onStart_" local-name="onStart_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Event"/>
                  </param>
                </func>
              </ctype>
            </property>
            <method name="H.ui.base.PushButton#toggleState" local-name="toggleState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method toggles this button's state between the two possible button states (see
<link ref="H.ui.base.Button.State" />).</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.ui.base.PushButton"/>
                </types>
                <ctype>
                  <name name="H.ui.base.PushButton"/>
                </ctype>
                <description>
                  <prose><p>this button instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#disposeInternal" local-name="disposeInternal" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Disposes of this button</p></prose>
              </description>
            </method>
            <event name="H.ui.base.PushButton#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Button#event:statechange">
              <description>
                <prose><p>This event is dispatched by the button when it's state changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <method name="H.ui.base.PushButton#getState" local-name="getState" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Button#getState">
              <description>
                <prose><p>This method returns the current state of the button.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.ui.base.Button.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.State"/>
                </ctype>
                <description>
                  <prose><p>the current state of the button</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setState" local-name="setState" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Button#setState">
              <description>
                <prose><p>This method sets the state of this button.</p></prose>
              </description>
              <param name="state">
                <types>
                  <type ref="H.ui.base.Button.State"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button.State"/>
                </ctype>
                <description>
                  <prose><p>the state to which this button is to be set</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional flag indicating that the onStateChange callback is
 not to be invoked</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Button"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button"/>
                </ctype>
                <description>
                  <prose><p>this button instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#getLabel" local-name="getLabel" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Button#getLabel">
              <description>
                <prose><p>This method returns the label string of this button.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the label string of this button</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setLabel" local-name="setLabel" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Button#setLabel">
              <description>
                <prose><p>This method sets the label string of this button.</p></prose>
              </description>
              <param name="label">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the label to set on this button</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating that the new label should be set and propagated even if
 it has the same value as the current one.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Button"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Button"/>
                </ctype>
                <description>
                  <prose><p>this button instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#onDown_" local-name="onDown_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Button#onDown_">
              <description>
                <prose><p>This button's onDown handler (setting the state to DOWN).</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="Event"/>
                </types>
                <ctype>
                  <name name="Event"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#onUp_" local-name="onUp_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Button#onUp_">
              <description>
                <prose><p>This button's onUp handler (setting the state to UP).</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="Event"/>
                </types>
                <ctype>
                  <name name="Event"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
              <description>
                <prose><p>This method disposes of the element.</p></prose>
              </description>
            </method>
            <method name="H.ui.base.PushButton#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
              <description>
                <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the document object into which to render</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
              <description>
                <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
              </description>
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element's HTML representation</p></prose>
                </description>
              </param>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>the HTML document into which the element is currently being rendered</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
              <description>
                <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
              <description>
                <prose><p>This method set's the disabled state of this UI element.</p></prose>
              </description>
              <param name="disabled">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
                </description>
              </param>
              <param name="opt_force" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
              <description>
                <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
              <description>
                <prose><p>This method stores arbitrary data with this UI element.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
              <description>
                <prose><p>This method returns the tool tip of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the current tool tip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
              <description>
                <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
              </description>
              <param name="tooltip">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the tool tip to be shown when hovering over this element</p></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
              <description>
                <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLElement"/>
                </types>
                <ctype>
                  <name name="HTMLElement" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the element</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
              <description>
                <prose></prose>
              </description>
              <param name="el">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>the HTML element representing this control</p></prose>
                </description>
              </param>
            </method>
            <property name="H.ui.base.PushButton#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
              <description>
                <prose><p>The current visibility of this element</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.ui.base.PushButton#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
              <description>
                <prose><p>Sets the visibility of this element.</p></prose>
              </description>
              <param name="visibility">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.ui.base.PushButton#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
              <description>
                <prose><p>Returns the visibility of this element.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>visibility</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
              <description>
                <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
              <description>
                <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
              </description>
              <param name="className">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the CSS class name to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.ui.base.Element"/>
                </types>
                <ctype>
                  <name name="H.ui.base.Element"/>
                </ctype>
                <description>
                  <prose><p>this UI element instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.base.PushButton#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
              <description>
                <prose><p>Removes the UI element from the UI.</p></prose>
              </description>
            </method>
          </class>
        </ns>
        <enum name="H.ui.LayoutAlignment" local-name="LayoutAlignment" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This enumeration holds the possible layout alignments for UI elements.</p></prose>
          </description>
          <types>
            <type ref="string"/>
          </types>
          <ctype>
            <name name="string"/>
          </ctype>
          <value name="H.ui.LayoutAlignment.TOP_LEFT" local-name="TOP_LEFT">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.TOP_CENTER" local-name="TOP_CENTER">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.TOP_RIGHT" local-name="TOP_RIGHT">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.LEFT_TOP" local-name="LEFT_TOP">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.LEFT_MIDDLE" local-name="LEFT_MIDDLE">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.LEFT_BOTTOM" local-name="LEFT_BOTTOM">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.RIGHT_TOP" local-name="RIGHT_TOP">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.RIGHT_MIDDLE" local-name="RIGHT_MIDDLE">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.RIGHT_BOTTOM" local-name="RIGHT_BOTTOM">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.BOTTOM_LEFT" local-name="BOTTOM_LEFT">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.BOTTOM_CENTER" local-name="BOTTOM_CENTER">
            <description>
              <prose></prose>
            </description>
          </value>
          <value name="H.ui.LayoutAlignment.BOTTOM_RIGHT" local-name="BOTTOM_RIGHT">
            <description>
              <prose></prose>
            </description>
          </value>
        </enum>
        <method name="H.ui.validateAlignment" local-name="validateAlignment" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>Checks whether the passed alignment is supported</p></prose>
          </description>
          <param name="alignment">
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </param>
          <returns>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </returns>
        </method>
        <class name="H.ui.Control" local-name="Control" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents the base class for UI controls on the map.</p></prose>
          </description>
          <extends>
            <type ref="H.ui.base.Container"/>
          </extends>
          <constructor local-name="Control" name="H.ui.Control"/>
          <event name="H.ui.Control#event:alignmentchange" local-name="alignmentchange" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is fired when control is realigned</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.Control#map" local-name="map" access="protected" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.Control#alignment_" local-name="alignment_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.LayoutAlignment"/>
            </types>
            <ctype>
              <name name="H.ui.LayoutAlignment" nullable="false"/>
            </ctype>
          </property>
          <property name="H.ui.Control#locale" local-name="locale" access="protected" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.i18n.Localization"/>
            </types>
            <ctype>
              <name name="H.ui.i18n.Localization"/>
            </ctype>
          </property>
          <method name="H.ui.Control#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#setLocalization" local-name="setLocalization" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method sets locale for the current control. Not exported! only
for UI class use</p></prose>
            </description>
            <param name="localization">
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Renders this control into a map UI object.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this control renders.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the fully rendered HTML representation of this control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#onUnitSystemChange" local-name="onUnitSystemChange" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the UI object's unit system
changes.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system the UI currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#onMapEngineTypeChange" local-name="onMapEngineTypeChange" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the underlying map engine
changes.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose><p>the engine type the map currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map to which this control is attached.</p>
<p>Note: Before adding a control to a UI object this method returns null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map" nullable="true"/>
              </ctype>
              <description>
                <prose><p>return the map</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the localization object which corresponds to the UI's current
locale.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#getAlignment" local-name="getAlignment" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns this control's layout alignment.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the control's current layout alignment</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#setAlignment" local-name="setAlignment" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the control's layout alignments.</p>
<p>The possible alignments are as follows within the map view port:</p>
<pre>
+--------------------------------------------------------------------------------+
|  "top-left"  > >           &lt; &lt;  "top-center"  > >            &lt; &lt;  "top-right"  |
|  "lef-ttop"                                                       "right-top"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-middle"                                                 "right-middle"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-bottom"                                                 "right-bottom"  |
|  "bottom-left"  > >       &lt; &lt;  "bottom-center"  > >       &lt; &lt;  "bottom-right"  |
+--------------------------------------------------------------------------------+
</pre>

<p>Elements with the same layout alignments are lined up in the directions of the arrows (see the illustration above).</p></prose>
            </description>
            <param name="alignment">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new alignment of the control</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>returns this control instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
            <description>
              <prose><p>Adds a child element to be rendered within the container element.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
              <description>
                <prose><p>this container instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
            <description>
              <prose><p>Returns the child collection of this container.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.base.Element&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.base.Element"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the children of this container</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
            <description>
              <prose><p>Removes a child element from this container's child collection.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
            <description>
              <prose><p>Disposes of a single child element within this container</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child to be disposed of</p></prose>
              </description>
            </param>
          </method>
          <event name="H.ui.Control#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
            <description>
              <prose><p>This event is dispatched when Element state is was modified.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <method name="H.ui.Control#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
            <description>
              <prose><p>This method disposes of the element.</p></prose>
            </description>
          </method>
          <method name="H.ui.Control#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.Control#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.Control#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Control#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Control#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <class name="H.ui.Pano" local-name="Pano" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents the UI controls for panorama</p></prose>
          </description>
          <extends>
            <type ref="H.ui.Control"/>
          </extends>
          <constructor local-name="Pano" name="H.ui.Pano">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.Pano.Options"/>
              </types>
              <ctype>
                <name name="H.ui.Pano.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional parameters to be passed to the map.</p></prose>
              </description>
            </param>
          </constructor>
          <property name="H.ui.Pano#leaveButton_" local-name="leaveButton_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.Button"/>
            </types>
            <ctype>
              <name name="H.ui.base.Button"/>
            </ctype>
          </property>
          <method name="H.ui.Pano#processMapTypes_" local-name="processMapTypes_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="mapTypes">
              <types>
                <type ref="H.service.MapTypes"/>
              </types>
              <ctype>
                <name name="H.service.MapTypes"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#setupStates_" local-name="setupStates_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This methods sets up states for panorama UI,
some of the states label and tooltip values
will be filled with setLocalization</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.ui.Pano#state_" local-name="state_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object.&lt;string,string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Object"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.Pano#prevState_" local-name="prevState_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object.&lt;string,string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Object"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.Pano#prevBaseLayer_" local-name="prevBaseLayer_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.map.layer.Layer"/>
            </types>
            <ctype>
              <name name="H.map.layer.Layer"/>
            </ctype>
          </property>
          <property name="H.ui.Pano#fallbackMapTypes_" local-name="fallbackMapTypes_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The map types to use when looking for a fallback map layer (panorama &lt;--&gt; map) in descending order</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;H.service.MapType&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="H.service.MapType"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.Pano#mapTypes_" local-name="mapTypes_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.service.MapTypes"/>
            </types>
            <ctype>
              <name name="H.service.MapTypes"/>
            </ctype>
          </property>
          <method name="H.ui.Pano#getMapTypeGroup_" local-name="getMapTypeGroup_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>To get the map type group of the given layer</p></prose>
            </description>
            <param name="layer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.service.MapType"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.service.MapType"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#getBestMatchingLayer_" local-name="getBestMatchingLayer_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns the best matching base layer for the given type key. It tries to get the layer from the same map type group.
If no success it tries to find such layer in the fallbackMapTypes_ collection</p></prose>
            </description>
            <param name="layer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="key">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the key of the base layer to search for, e.g. &quot;panorama&quot; or &quot;map&quot;</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.layer.Layer"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.map.layer.Layer"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the layer which was found or undefined if no success</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#onLayersChange_" local-name="onLayersChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Method is responsible for disabling discovery and panorama button if base map layer was changed
on the map.</p></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
              <description>
                <prose><p>from layers collectino</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#setState" local-name="setState" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Sets the state of the Panorama Control</p></prose>
            </description>
            <param name="state">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <typedef name="H.ui.Pano.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="alignment"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.LayoutAlignment"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="mapeTypes"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.MapTypes"/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.Pano.Options#alignment" local-name="alignment" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>the preferred layout alignment for this control</p></prose>
              </description>
              <types>
                <type ref="H.ui.LayoutAlignment"/>
              </types>
              <ctype>
                <name name="H.ui.LayoutAlignment"/>
              </ctype>
            </property>
            <property name="H.ui.Pano.Options#mapTypes" local-name="mapTypes" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The map types to use</p></prose>
              </description>
              <types>
                <type ref="H.service.MapTypes"/>
              </types>
              <ctype>
                <name name="H.service.MapTypes"/>
              </ctype>
            </property>
          </typedef>
          <event name="H.ui.Pano#event:alignmentchange" local-name="alignmentchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.Control#event:alignmentchange">
            <description>
              <prose><p>This event is fired when control is realigned</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.Pano#map" local-name="map" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#map">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.Pano#alignment_" local-name="alignment_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#alignment_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.LayoutAlignment"/>
            </types>
            <ctype>
              <name name="H.ui.LayoutAlignment" nullable="false"/>
            </ctype>
          </property>
          <property name="H.ui.Pano#locale" local-name="locale" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#locale">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.i18n.Localization"/>
            </types>
            <ctype>
              <name name="H.ui.i18n.Localization"/>
            </ctype>
          </property>
          <method name="H.ui.Pano#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setMap">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#setLocalization" local-name="setLocalization" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setLocalization">
            <description>
              <prose><p>This method sets locale for the current control. Not exported! only
for UI class use</p></prose>
            </description>
            <param name="localization">
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#render">
            <description>
              <prose><p>Renders this control into a map UI object.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this control renders.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the fully rendered HTML representation of this control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#onUnitSystemChange" local-name="onUnitSystemChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onUnitSystemChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the UI object's unit system
changes.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system the UI currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#onMapEngineTypeChange" local-name="onMapEngineTypeChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onMapEngineTypeChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the underlying map engine
changes.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose><p>the engine type the map currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getMap">
            <description>
              <prose><p>This method returns the map to which this control is attached.</p>
<p>Note: Before adding a control to a UI object this method returns null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map" nullable="true"/>
              </ctype>
              <description>
                <prose><p>return the map</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getLocalization">
            <description>
              <prose><p>This method returns the localization object which corresponds to the UI's current
locale.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#getAlignment" local-name="getAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getAlignment">
            <description>
              <prose><p>This method returns this control's layout alignment.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the control's current layout alignment</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#setAlignment" local-name="setAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#setAlignment">
            <description>
              <prose><p>This method sets the control's layout alignments.</p>
<p>The possible alignments are as follows within the map view port:</p>
<pre>
+--------------------------------------------------------------------------------+
|  "top-left"  > >           &lt; &lt;  "top-center"  > >            &lt; &lt;  "top-right"  |
|  "lef-ttop"                                                       "right-top"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-middle"                                                 "right-middle"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-bottom"                                                 "right-bottom"  |
|  "bottom-left"  > >       &lt; &lt;  "bottom-center"  > >       &lt; &lt;  "bottom-right"  |
+--------------------------------------------------------------------------------+
</pre>

<p>Elements with the same layout alignments are lined up in the directions of the arrows (see the illustration above).</p></prose>
            </description>
            <param name="alignment">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new alignment of the control</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>returns this control instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
            <description>
              <prose><p>Adds a child element to be rendered within the container element.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
              <description>
                <prose><p>this container instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
            <description>
              <prose><p>Returns the child collection of this container.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.base.Element&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.base.Element"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the children of this container</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
            <description>
              <prose><p>Removes a child element from this container's child collection.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
            <description>
              <prose><p>Disposes of a single child element within this container</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child to be disposed of</p></prose>
              </description>
            </param>
          </method>
          <event name="H.ui.Pano#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
            <description>
              <prose><p>This event is dispatched when Element state is was modified.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <method name="H.ui.Pano#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
            <description>
              <prose><p>This method disposes of the element.</p></prose>
            </description>
          </method>
          <method name="H.ui.Pano#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.Pano#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.Pano#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Pano#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.Pano#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <class name="H.ui.InfoBubble" local-name="InfoBubble" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents an information bubble bound to a geo-position on the map.</p></prose>
          </description>
          <extends>
            <type ref="H.ui.base.Element"/>
          </extends>
          <constructor local-name="InfoBubble" name="H.ui.InfoBubble">
            <param name="position">
              <types>
                <type ref="H.geo.IPoint"/>
              </types>
              <ctype>
                <name name="H.geo.IPoint"/>
              </ctype>
              <description>
                <prose><p>the geo-position to which this info bubble corresponds</p></prose>
              </description>
            </param>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.InfoBubble.Options"/>
              </types>
              <ctype>
                <name name="H.ui.InfoBubble.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional parameters to be passed to the info bubble</p></prose>
              </description>
            </param>
          </constructor>
          <method name="H.ui.InfoBubble#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Disposes of this InfoBubble instance.</p>
<p>Note: Disposing of an info bubble does not automatically remove it from the UI's info bubble collection.
Please call <link ref="H.ui.UI#removeBubble" /> before disposing of an info bubble instance.</p></prose>
            </description>
          </method>
          <event name="H.ui.InfoBubble#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is dispatched when state of the bubble has changed</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.InfoBubble#onUserClose_" local-name="onUserClose_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func>
                <param>
                  <name name="Event"/>
                </param>
              </func>
            </ctype>
          </property>
          <property name="H.ui.InfoBubble#map_" local-name="map_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <method name="H.ui.InfoBubble#getPosition" local-name="getPosition" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns the current geo-position of this info bubble.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
              <description>
                <prose><p>the current geo-position</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setPosition" local-name="setPosition" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the geo-position of this info bubble.</p></prose>
            </description>
            <param name="position">
              <types>
                <type ref="H.geo.IPoint"/>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.geo.IPoint"/>
                  </type>
                  <type>
                    <name name="H.geo.Point"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the new geo-position of this bubble</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#deferredUdate_" local-name="deferredUdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A helper method to trigger a deferrred update() call.
It's necessary to assure that the browser has time to render the bubble's content element and updates the offsetWidth</p></prose>
            </description>
          </method>
          <property name="H.ui.InfoBubble#deferredUdateHandle_" local-name="deferredUdateHandle_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The handle to an remained deferred update call</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.ui.InfoBubble#update" local-name="update" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method updates the position of the bubble on the screen.</p></prose>
            </description>
          </method>
          <method name="H.ui.InfoBubble#setContentOffset_" local-name="setContentOffset_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Updates this bubble left-right wobbliness.</p></prose>
            </description>
            <param name="overlap">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the overlap between the bubble and the left screen border</p></prose>
              </description>
            </param>
            <param name="opt_contentWidth" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>the width of the content</p></prose>
              </description>
            </param>
          </method>
          <enum name="H.ui.InfoBubble.State" local-name="State" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This enumeration holds the state an info bubble can have.</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <value name="H.ui.InfoBubble.State.OPEN" local-name="OPEN">
              <description>
                <prose><p>This value represents the state where an info bubble is open and visible (value: 'open').</p></prose>
              </description>
            </value>
            <value name="H.ui.InfoBubble.State.CLOSED" local-name="CLOSED">
              <description>
                <prose><p>This value represents the state where an info bubble is closed and invisible (value: 'closed')</p></prose>
              </description>
            </value>
          </enum>
          <property name="H.ui.InfoBubble#state_" local-name="state_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The current state (OPEN / CLOSED) of this info bubble</p></prose>
            </description>
            <types>
              <type ref="H.ui.InfoBubble.State"/>
            </types>
            <ctype>
              <name name="H.ui.InfoBubble.State"/>
            </ctype>
          </property>
          <method name="H.ui.InfoBubble#getState" local-name="getState" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns this info bubbles current state.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.InfoBubble.State"/>
              </types>
              <ctype>
                <name name="H.ui.InfoBubble.State"/>
              </ctype>
              <description>
                <prose><p>this bubble's current state</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setState" local-name="setState" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the info bubble's state.</p></prose>
            </description>
            <param name="state">
              <types>
                <type ref="H.ui.InfoBubble.State"/>
              </types>
              <ctype>
                <name name="H.ui.InfoBubble.State"/>
              </ctype>
              <description>
                <prose><p>the new state</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#close" local-name="close" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method closes the info bubble (setting its state to CLOSED)</p></prose>
            </description>
          </method>
          <method name="H.ui.InfoBubble#open" local-name="open" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method opens the info bubble (setting its state to OPEN)</p></prose>
            </description>
          </method>
          <method name="H.ui.InfoBubble#getContentElement" local-name="getContentElement" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the bubble's content element.</p>
<p>Note: Before adding an info bubble to a UI object the content element is null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the content element of this info bubble</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setContent" local-name="setContent" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This methods sets the content of the info bubble. This can either be a string (applied as innerHTML) to
the content element of this info bubble or a HTML node which is appended to the content element.</p></prose>
            </description>
            <param name="content">
              <types>
                <type ref="string"/>
                <type ref="Node"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="Node"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the content for this bubble</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.InfoBubble.TAIL_SVG_" local-name="TAIL_SVG_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The SVG for the bubble's tail</p></prose>
            </description>
          </property>
          <property name="H.ui.InfoBubble.CLOSE_SVG_" local-name="CLOSE_SVG_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The SVG for the bubble's close button</p></prose>
            </description>
          </property>
          <typedef name="H.ui.InfoBubble.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="onStateChange"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <func>
                          <param>
                            <name name="H.ui.InfoBubble.State"/>
                          </param>
                        </func>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="content"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <name name="Node"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.InfoBubble.Options#onStateChange" local-name="onStateChange" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>a callback to be invoked when the info bubble's state
 changes</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func optional="true">
                  <param>
                    <name name="H.util.Event"/>
                  </param>
                </func>
              </ctype>
            </property>
            <property name="H.ui.InfoBubble.Options#content" local-name="content" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>content to be added to the info bubble</p></prose>
              </description>
              <types>
                <type ref="string"/>
                <type ref="Node"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="Node"/>
                  </type>
                </union>
              </ctype>
            </property>
          </typedef>
          <method name="H.ui.InfoBubble#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#render">
            <description>
              <prose><p>This method is called internally by the UI system to invoke the rendering of the
UI element.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document object into which to render</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.InfoBubble#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.InfoBubble#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.InfoBubble#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.InfoBubble#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <class name="H.ui.MapSettingsControl" local-name="MapSettingsControl" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents a menu control allowing to control which map type the map shows, etc.</p></prose>
          </description>
          <extends>
            <type ref="H.ui.Control"/>
          </extends>
          <constructor local-name="MapSettingsControl" name="H.ui.MapSettingsControl">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.MapSettingsControl.Options"/>
              </types>
              <ctype>
                <name name="H.ui.MapSettingsControl.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional parameters to be passed to this control</p></prose>
              </description>
            </param>
          </constructor>
          <property name="H.ui.MapSettingsControl#menu_" local-name="menu_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.OverlayPanel"/>
            </types>
            <ctype>
              <name name="H.ui.base.OverlayPanel"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#mapTypes_" local-name="mapTypes_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.RadioGroup"/>
            </types>
            <ctype>
              <name name="H.ui.base.RadioGroup"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#transitBtn_" local-name="transitBtn_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.PushButton"/>
            </types>
            <ctype>
              <name name="H.ui.base.PushButton"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#trafficBtn_" local-name="trafficBtn_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.PushButton"/>
            </types>
            <ctype>
              <name name="H.ui.base.PushButton"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#menuButton_" local-name="menuButton_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.PushButton"/>
            </types>
            <ctype>
              <name name="H.ui.base.PushButton"/>
            </ctype>
          </property>
          <method name="H.ui.MapSettingsControl#onLayerSelect_" local-name="onLayerSelect_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Handler when the layer drop down selection changes.</p></prose>
            </description>
            <param name="opt_evt" optional="true">
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#onTrafficStateChange_" local-name="onTrafficStateChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Handler for state changes of the traffic button</p></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
              <description>
                <prose><p>the current state of the button</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#onTransitStateChange_" local-name="onTransitStateChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Handler for state changes of the traffic button</p></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
              <description>
                <prose><p>the event signaling the state change</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#onLayersChange_" local-name="onLayersChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
              <description>
                <prose><p>the change event from the data model</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#onBaseLayerChange_" local-name="onBaseLayerChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Handles base layer changes on the map (possibly from the outside world)</p></prose>
            </description>
            <param name="opt_evt" optional="true">
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#closeMenu" local-name="closeMenu" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method closes the map settings panel.</p></prose>
            </description>
          </method>
          <method name="H.ui.MapSettingsControl#addMapTypeEntry" local-name="addMapTypeEntry" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method add a map type entry to this map settings control.</p></prose>
            </description>
            <param name="entry">
              <types>
                <type ref="H.ui.MapSettingsControl.MapTypeEntry"/>
              </types>
              <ctype>
                <name name="H.ui.MapSettingsControl.MapTypeEntry"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#removeMapTypeEntry" local-name="removeMapTypeEntry" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method removes a map type entry from this map settings control.</p></prose>
            </description>
            <param name="entry">
              <types>
                <type ref="H.ui.MapSettingsControl.MapTypeEntry"/>
              </types>
              <ctype>
                <name name="H.ui.MapSettingsControl.MapTypeEntry"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#setIncidentsLayer" local-name="setIncidentsLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Sets the traffic incidents layer to be shown when activating the respective button
on the map settings control.</p>
<p>Setting this layer to a <code>falsy</code> value will hide the button.</p></prose>
            </description>
            <param name="incidentsLayer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose><p>the incidents layer</p></prose>
              </description>
            </param>
          </method>
          <typedef name="H.ui.MapSettingsControl.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="alignment"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="entries"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.ui.MapSettingsControl.MapTypeEntry"/>
                          </app>
                        </typed>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="incidents"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.map.layer.Layer"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.MapSettingsControl.Options#alignment" local-name="alignment" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the layout alignment which should be applied to this control,
          default is <link ref="H.ui.LayoutPositon.BOTTOM_RIGHT" /></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
            <property name="H.ui.MapSettingsControl.Options#entries" local-name="entries" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the map type entries to be shown in this
  map settings control</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;H.ui.MapSettingsControl.MapTypeEntry&gt;="/>
              </types>
              <ctype>
                <typed optional="true">
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.MapSettingsControl.MapTypeEntry"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.ui.MapSettingsControl.Options#incidents" local-name="incidents" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>the traffic incidents layer to be activated by the map settings
  control</p></prose>
              </description>
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
            </property>
          </typedef>
          <typedef name="H.ui.MapSettingsControl.MapTypeEntry" local-name="MapTypeEntry" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>The map type entry is an object containing a display name and a map type object to which it refers.</p></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="name"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="mapType"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.service.MapType"/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.MapSettingsControl.MapTypeEntry#name" local-name="name" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>label which describes the map type</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.ui.MapSettingsControl.MapTypeEntry#mapType" local-name="mapType" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>reference to map type</p></prose>
              </description>
              <types>
                <type ref="H.service.MapType"/>
              </types>
              <ctype>
                <name name="H.service.MapType"/>
              </ctype>
            </property>
          </typedef>
          <event name="H.ui.MapSettingsControl#event:alignmentchange" local-name="alignmentchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.Control#event:alignmentchange">
            <description>
              <prose><p>This event is fired when control is realigned</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.MapSettingsControl#map" local-name="map" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#map">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#alignment_" local-name="alignment_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#alignment_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.LayoutAlignment"/>
            </types>
            <ctype>
              <name name="H.ui.LayoutAlignment" nullable="false"/>
            </ctype>
          </property>
          <property name="H.ui.MapSettingsControl#locale" local-name="locale" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#locale">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.i18n.Localization"/>
            </types>
            <ctype>
              <name name="H.ui.i18n.Localization"/>
            </ctype>
          </property>
          <method name="H.ui.MapSettingsControl#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setMap">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#setLocalization" local-name="setLocalization" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setLocalization">
            <description>
              <prose><p>This method sets locale for the current control. Not exported! only
for UI class use</p></prose>
            </description>
            <param name="localization">
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#render">
            <description>
              <prose><p>Renders this control into a map UI object.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this control renders.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the fully rendered HTML representation of this control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#onUnitSystemChange" local-name="onUnitSystemChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onUnitSystemChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the UI object's unit system
changes.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system the UI currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#onMapEngineTypeChange" local-name="onMapEngineTypeChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onMapEngineTypeChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the underlying map engine
changes.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose><p>the engine type the map currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getMap">
            <description>
              <prose><p>This method returns the map to which this control is attached.</p>
<p>Note: Before adding a control to a UI object this method returns null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map" nullable="true"/>
              </ctype>
              <description>
                <prose><p>return the map</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getLocalization">
            <description>
              <prose><p>This method returns the localization object which corresponds to the UI's current
locale.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#getAlignment" local-name="getAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getAlignment">
            <description>
              <prose><p>This method returns this control's layout alignment.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the control's current layout alignment</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#setAlignment" local-name="setAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#setAlignment">
            <description>
              <prose><p>This method sets the control's layout alignments.</p>
<p>The possible alignments are as follows within the map view port:</p>
<pre>
+--------------------------------------------------------------------------------+
|  "top-left"  > >           &lt; &lt;  "top-center"  > >            &lt; &lt;  "top-right"  |
|  "lef-ttop"                                                       "right-top"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-middle"                                                 "right-middle"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-bottom"                                                 "right-bottom"  |
|  "bottom-left"  > >       &lt; &lt;  "bottom-center"  > >       &lt; &lt;  "bottom-right"  |
+--------------------------------------------------------------------------------+
</pre>

<p>Elements with the same layout alignments are lined up in the directions of the arrows (see the illustration above).</p></prose>
            </description>
            <param name="alignment">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new alignment of the control</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>returns this control instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
            <description>
              <prose><p>Adds a child element to be rendered within the container element.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
              <description>
                <prose><p>this container instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
            <description>
              <prose><p>Returns the child collection of this container.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.base.Element&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.base.Element"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the children of this container</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
            <description>
              <prose><p>Removes a child element from this container's child collection.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
            <description>
              <prose><p>Disposes of a single child element within this container</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child to be disposed of</p></prose>
              </description>
            </param>
          </method>
          <event name="H.ui.MapSettingsControl#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
            <description>
              <prose><p>This event is dispatched when Element state is was modified.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <method name="H.ui.MapSettingsControl#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
            <description>
              <prose><p>This method disposes of the element.</p></prose>
            </description>
          </method>
          <method name="H.ui.MapSettingsControl#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.MapSettingsControl#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.MapSettingsControl#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.MapSettingsControl#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.MapSettingsControl#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <class name="H.ui.Layout" local-name="Layout" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>This class encapsulates the layout functionality for UI element alignments.</p></prose>
          </description>
          <constructor local-name="Layout" name="H.ui.Layout">
            <param name="uiEl">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the UI element to which this Layout belongs.</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this layout renders</p></prose>
              </description>
            </param>
          </constructor>
          <property name="H.ui.Layout#anchors_" local-name="anchors_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This property holds the anchor elements to which UI elements can be appended.</p></prose>
            </description>
            <types>
              <type ref="Object.&lt;string, HTMLElement&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Object"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
                <app>
                  <name name="HTMLElement"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.Layout#corners_" local-name="corners_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This property holds the corner elements within which the corner anchors are located.</p></prose>
            </description>
            <types>
              <type ref="Object.&lt;string, HTMLElement&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Object"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
                <app>
                  <name name="HTMLElement"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.Layout.cssClassPrefix_" local-name="cssClassPrefix_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
          </property>
          <enum name="H.ui.Layout.CssClassNames" local-name="CssClassNames" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This enumeration holds the CSS class names used for layout elements</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <value name="H.ui.Layout.CssClassNames.TOP" local-name="TOP">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.BOTTOM" local-name="BOTTOM">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.LEFT" local-name="LEFT">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.RIGHT" local-name="RIGHT">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.CENTER" local-name="CENTER">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.MIDDLE" local-name="MIDDLE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.HORIZONTAL" local-name="HORIZONTAL">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.VERTICAL" local-name="VERTICAL">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.ui.Layout.CssClassNames.ANCHOR" local-name="ANCHOR">
              <description>
                <prose></prose>
              </description>
            </value>
          </enum>
          <method name="H.ui.Layout#update" local-name="update" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method updates the layout when items change within the layout containers.</p></prose>
            </description>
          </method>
          <method name="H.ui.Layout#updateAnchor_" local-name="updateAnchor_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Updates an anchors alignment (for ...center anchors).</p></prose>
            </description>
            <param name="anchor">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the anchor element to update</p></prose>
              </description>
            </param>
            <param name="horizontal">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>whether this anchor needs a horizontal update (otherwise vertical)</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.Layout#put" local-name="put" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method moves a UI element to the specified alignment anchor within the layout.</p></prose>
            </description>
            <param name="control">
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>the control to move</p></prose>
              </description>
            </param>
            <param name="alignment">
              <types>
                <type ref="H.ui.LayoutAlignment"/>
              </types>
              <ctype>
                <name name="H.ui.LayoutAlignment"/>
              </ctype>
              <description>
                <prose><p>the the anchor's alignment to which to move the control</p></prose>
              </description>
            </param>
          </method>
        </class>
        <enum name="H.ui.UnitSystem" local-name="UnitSystem" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This enumeration holds the possible unit systems for the UI to display distances.</p></prose>
          </description>
          <types>
            <type ref="string"/>
          </types>
          <ctype>
            <name name="string"/>
          </ctype>
          <value name="H.ui.UnitSystem.IMPERIAL" local-name="IMPERIAL">
            <description>
              <prose><p>This value represents the imperial unit system using miles and feet (value: 'imperial').</p></prose>
            </description>
          </value>
          <value name="H.ui.UnitSystem.METRIC" local-name="METRIC">
            <description>
              <prose><p>This value represents the metric unit system using meters and kilometers, etc (value: 'metric').</p></prose>
            </description>
          </value>
        </enum>
        <ns name="H.ui.i18n" local-name="i18n" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>Namespace contaisn functionality related to internationalization.</p></prose>
          </description>
          <property name="H.ui.i18n.defaultLocales" local-name="defaultLocales" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Default available locales. UI provides default translations for
this set of locale codes.</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.i18n.defaultStrings" local-name="defaultStrings" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Set of default translation maps</p></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <name name="Object"/>
            </ctype>
          </property>
          <property name="H.ui.i18n.minimumKeySet" local-name="minimumKeySet" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Defines minimum key set required for external
maps</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <method name="H.ui.i18n.define" local-name="define" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method sets default translation map
used by default translations. Do not publish!</p></prose>
            </description>
            <param name="locale">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="map">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.i18n.hasDefaultLocale" local-name="hasDefaultLocale" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns a bollean value indicating whether the UI supports
the locale by default.</p></prose>
            </description>
            <param name="locale">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the locale code to be queried</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the locale is supported, otherwise <code>false</code>.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.i18n.validateMap" local-name="validateMap" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method validates provided translation map. It
returns false if map has less number of matching keys than
default minimum key set. Do not publish!</p></prose>
            </description>
            <param name="locale">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="map">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <class name="H.ui.i18n.Localization" local-name="Localization" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class is used for internationalization of UI components.</p></prose>
            </description>
            <constructor local-name="Localization" name="H.ui.i18n.Localization">
              <param name="locale">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>locale code i.e en-GB</p></prose>
                </description>
              </param>
              <param name="opt_translationMap" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional translation map for this locale
 if not provided Locale will be initialized with default translations if available</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.ui.i18n.Localization#map_" local-name="map_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
            </property>
            <property name="H.ui.i18n.Localization#locale_" local-name="locale_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <method name="H.ui.i18n.Localization#getLocale" local-name="getLocale" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns current locale code i.e 'en-US'</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>locale code</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.i18n.Localization#getKeys" local-name="getKeys" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns translation keys for current
locale. Keys from this set can be used to get translations
via <code>translate</code> method.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;string&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.i18n.Localization#hasKey" local-name="hasKey" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns a boolean value indicating whether this localization
object has a translation for the specified translation key.</p></prose>
              </description>
              <param name="key">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>a transaltion key</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p><code>true</code> if the key exists, otherwise <code>false</code>.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.ui.i18n.Localization#translate" local-name="translate" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns translation for provided key. It throws exception
if translation is not available</p></prose>
              </description>
              <param name="key">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>a translation key</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>a localized string corresponding to provided key</p></prose>
                </description>
              </returns>
            </method>
          </class>
        </ns>
        <class name="H.ui.UI" local-name="UI" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class encapsulates map UI functionality.</p></prose>
          </description>
          <extends>
            <type ref="goog.events.EventTarget"/>
          </extends>
          <extends>
            <type ref="H.util.ICapturable"/>
          </extends>
          <constructor local-name="UI" name="H.ui.UI">
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.UI.Options"/>
              </types>
              <ctype>
                <name name="H.ui.UI.Options" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </constructor>
          <property name="H.ui.UI#map_" local-name="map_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.UI#doc_" local-name="doc_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Document"/>
            </types>
            <ctype>
              <name name="Document"/>
            </ctype>
          </property>
          <property name="H.ui.UI#controls_" local-name="controls_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
          </property>
          <property name="H.ui.UI#bubbles_" local-name="bubbles_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Array.&lt;H.ui.InfoBubble&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="H.ui.InfoBubble"/>
                </app>
              </typed>
            </ctype>
          </property>
          <property name="H.ui.UI#el_" local-name="el_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Element"/>
            </types>
            <ctype>
              <name name="Element"/>
            </ctype>
          </property>
          <property name="H.ui.UI#onControlAlignmentChanged_" local-name="onControlAlignmentChanged_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func>
                <param>
                  <name name="H.util.Event"/>
                </param>
              </func>
            </ctype>
          </property>
          <property name="H.ui.UI#layout_" local-name="layout_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.Layout"/>
            </types>
            <ctype>
              <name name="H.ui.Layout"/>
            </ctype>
          </property>
          <property name="H.ui.UI#unitSystem_" local-name="unitSystem_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.UnitSystem"/>
            </types>
            <ctype>
              <name name="H.ui.UnitSystem"/>
            </ctype>
          </property>
          <property name="H.ui.UI#engineType_" local-name="engineType_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map.EngineType"/>
            </types>
            <ctype>
              <name name="H.Map.EngineType"/>
            </ctype>
          </property>
          <method name="H.ui.UI#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns this ui's root element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the root element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns the map instance to which this UI was added.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#getUnitSystem" local-name="getUnitSystem" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns this UI object's current unit system.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the current unit system</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#setUnitSystem" local-name="setUnitSystem" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets this UI object's unit system for displaying distances.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system to use</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#setLocale_" local-name="setLocale_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="locale">
              <types>
                <type ref="string"/>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="H.ui.i18n.Localization"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the locale to be used</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns the UI's current localization object</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose><p>the localization object</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#onEngineTypeChange_" local-name="onEngineTypeChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Informs all current control that the map's engine changed.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#toggleUnitSystem" local-name="toggleUnitSystem" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Toggles this UI's unit system between <link ref="H.ui.UnitSystem.METRIC" /> and <link ref="H.ui.UnitSystem.IMPERIAL" />.</p></prose>
            </description>
          </method>
          <method name="H.ui.UI#addBubble" local-name="addBubble" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method adds an info bubble to the UI.</p></prose>
            </description>
            <param name="bubble">
              <types>
                <type ref="H.ui.InfoBubble"/>
              </types>
              <ctype>
                <name name="H.ui.InfoBubble"/>
              </ctype>
              <description>
                <prose><p>the info bubble to be added</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#removeBubble" local-name="removeBubble" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method removes a previously added info bubble from the UI.</p></prose>
            </description>
            <param name="bubble">
              <types>
                <type ref="H.ui.InfoBubble"/>
              </types>
              <ctype>
                <name name="H.ui.InfoBubble"/>
              </ctype>
              <description>
                <prose><p>the info bubble to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#getBubbles" local-name="getBubbles" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns a list of info bubble objects which are currently attached to this UI.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.InfoBubble&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.InfoBubble"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the list of info bubbles</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#addControl" local-name="addControl" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method appends a control to the UI.</p></prose>
            </description>
            <param name="name">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the name under which to register this control</p></prose>
              </description>
            </param>
            <param name="control">
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>the control to add to this UI</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI#removeControl" local-name="removeControl" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Removes a previously registered control from the UI object.</p></prose>
            </description>
            <param name="name">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the name under which this control was previously registered</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>the removed control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#getControl" local-name="getControl" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns a UI control which was previously registered with the provided name.</p></prose>
            </description>
            <param name="name">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the name under which the control was registered.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>the control or <code>undefined</code> if the control does not exist.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.UI#processOptions_" local-name="processOptions_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method processes UI options passed to the UI's constructor.</p></prose>
            </description>
            <param name="options">
              <types>
                <type ref="H.ui.UI.Options"/>
              </types>
              <ctype>
                <name name="H.ui.UI.Options"/>
              </ctype>
              <description>
                <prose><p>the UI options</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.UI.createDefault" local-name="createDefault" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This function creates the default UI including the zoom control, map settings control and scalebar and panorama
discovery control. The default controls will be assigned the following values:</p>
<ul>
<li>Zoom control:<ul>
<li>id: 'zoom'</li>
<li>alignment: 'right-middle'</li>
</ul>
</li>
<li>Map settings control:<ul>
<li>id: 'mapsettings'</li>
<li>alignment: 'bottom-right'</li>
</ul>
</li>
<li>Scalebar:<ul>
<li>id: 'scalebar'</li>
<li>alignment: 'bottom-right'</li>
</ul>
</li>
<li>Pano:<ul>
<li>id: 'panorama'</li>
<li>alignment: 'top-right'</li>
</ul>
</li>
</ul></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>The map instance to which to append the UI</p></prose>
              </description>
            </param>
            <param name="mapTypes">
              <types>
                <type ref="Object.&lt;H.service.MapType&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="H.service.MapType"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>The map types to use</p></prose>
              </description>
            </param>
            <param name="opt_locale">
              <types>
                <type ref="H.ui.i18n.Localization"/>
                <type ref="string"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.ui.i18n.Localization"/>
                  </type>
                  <type>
                    <name name="string" optional="true"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>the language to use (or a full localization object).</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.UI"/>
              </types>
              <ctype>
                <name name="H.ui.UI"/>
              </ctype>
              <description>
                <prose><p>the UI instance configured with the default controls</p></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.ui.UI.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Optional parameters to be passed to the UI constructor.</p></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="unitSystem"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.UnitSystem"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="zoom"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.ZoomControl.Options"/>
                      </type>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="mapsettings"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.MapSettingsControl.Options"/>
                      </type>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="scalebar"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.ScaleBar.Options"/>
                      </type>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="panorama"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.Pano.Options"/>
                      </type>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="locale"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.i18n.Localization"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.UI.Options#unitSystem" local-name="unitSystem" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>An optional unit system to be used by the UI, default is <link ref="H.ui.UnitSystem.METRIC" /></p></prose>
              </description>
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem" optional="true"/>
              </ctype>
            </property>
            <property name="H.ui.UI.Options#zoom" local-name="zoom" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.ZoomControl.Options"/>
                <type ref="boolean"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="H.ui.ZoomControl.Options"/>
                  </type>
                  <type>
                    <name name="boolean"/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.ui.UI.Options#mapsettings" local-name="mapsettings" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.MapSettingsControl.Options"/>
                <type ref="boolean"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="H.ui.MapSettingsControl.Options"/>
                  </type>
                  <type>
                    <name name="boolean"/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.ui.UI.Options#scalebar" local-name="scalebar" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.ScaleBar.Options"/>
                <type ref="boolean"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="H.ui.ScaleBar.Options"/>
                  </type>
                  <type>
                    <name name="boolean"/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.ui.UI.Options#panorama" local-name="panorama" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.ui.Pano.Options"/>
                <type ref="boolean"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="H.ui.Pano.Options"/>
                  </type>
                  <type>
                    <name name="boolean"/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.ui.UI.Options#locale" local-name="locale" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>defines language in which UI
 can be rendered. It can be predefined <link ref="H.ui.i18n.Localization" /> object
 with custom translation map, or a string one of following
 'en-US', 'de-DE', 'es-ES', 'fi-FI', 'fr-FR', 'it-IT', 'nl-NL', 'pl-PL',
 'pt-BR', 'pt-PT', 'ru-RU', 'tr-TR', 'zh-CN'. If not defined ui will use
 <code>'en-US'</code> by default</p></prose>
              </description>
              <types>
                <type ref="H.ui.i18n.Localization"/>
                <type ref="string"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="H.ui.i18n.Localization"/>
                  </type>
                  <type>
                    <name name="string"/>
                  </type>
                </union>
              </ctype>
            </property>
          </typedef>
        </class>
        <class name="H.ui.ZoomControl" local-name="ZoomControl" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents the UI controls for zooming in an out of the map.</p></prose>
          </description>
          <extends>
            <type ref="H.ui.Control"/>
          </extends>
          <constructor local-name="ZoomControl" name="H.ui.ZoomControl">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.ZoomControl.Options"/>
              </types>
              <ctype>
                <name name="H.ui.ZoomControl.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional parameters to be passed to the map.</p></prose>
              </description>
            </param>
          </constructor>
          <property name="H.ui.ZoomControl#zoomInBtn_" local-name="zoomInBtn_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.Button"/>
            </types>
            <ctype>
              <name name="H.ui.base.Button"/>
            </ctype>
          </property>
          <property name="H.ui.ZoomControl#zoomOutBtn_" local-name="zoomOutBtn_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.base.Button"/>
            </types>
            <ctype>
              <name name="H.ui.base.Button"/>
            </ctype>
          </property>
          <method name="H.ui.ZoomControl#onZoomBtnStateChange_" local-name="onZoomBtnStateChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="goog.events.Event"/>
              </types>
              <ctype>
                <name name="goog.events.Event"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#getZoomSpeed" local-name="getZoomSpeed" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the zoom speed (in levels per millisecond) which is applied when the button is pressed
constantly.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the current zoom speed</p></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.ui.ZoomControl.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="zoomSpeed"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="alignment"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.ui.LayoutAlignment"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.ZoomControl.Options#zoomSpeed" local-name="zoomSpeed" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the speed if zooming in and out in levels per millisecond, default is <code>0.05</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
            </property>
            <property name="H.ui.ZoomControl.Options#alignment" local-name="alignment" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>the preferred layout alignment for this control</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
          </typedef>
          <event name="H.ui.ZoomControl#event:alignmentchange" local-name="alignmentchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.Control#event:alignmentchange">
            <description>
              <prose><p>This event is fired when control is realigned</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.ZoomControl#map" local-name="map" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#map">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.ZoomControl#alignment_" local-name="alignment_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#alignment_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.LayoutAlignment"/>
            </types>
            <ctype>
              <name name="H.ui.LayoutAlignment" nullable="false"/>
            </ctype>
          </property>
          <property name="H.ui.ZoomControl#locale" local-name="locale" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#locale">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.i18n.Localization"/>
            </types>
            <ctype>
              <name name="H.ui.i18n.Localization"/>
            </ctype>
          </property>
          <method name="H.ui.ZoomControl#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setMap">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#setLocalization" local-name="setLocalization" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setLocalization">
            <description>
              <prose><p>This method sets locale for the current control. Not exported! only
for UI class use</p></prose>
            </description>
            <param name="localization">
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#render">
            <description>
              <prose><p>Renders this control into a map UI object.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this control renders.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the fully rendered HTML representation of this control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#onUnitSystemChange" local-name="onUnitSystemChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onUnitSystemChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the UI object's unit system
changes.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system the UI currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#onMapEngineTypeChange" local-name="onMapEngineTypeChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onMapEngineTypeChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the underlying map engine
changes.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose><p>the engine type the map currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getMap">
            <description>
              <prose><p>This method returns the map to which this control is attached.</p>
<p>Note: Before adding a control to a UI object this method returns null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map" nullable="true"/>
              </ctype>
              <description>
                <prose><p>return the map</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getLocalization">
            <description>
              <prose><p>This method returns the localization object which corresponds to the UI's current
locale.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#getAlignment" local-name="getAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getAlignment">
            <description>
              <prose><p>This method returns this control's layout alignment.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the control's current layout alignment</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#setAlignment" local-name="setAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#setAlignment">
            <description>
              <prose><p>This method sets the control's layout alignments.</p>
<p>The possible alignments are as follows within the map view port:</p>
<pre>
+--------------------------------------------------------------------------------+
|  "top-left"  > >           &lt; &lt;  "top-center"  > >            &lt; &lt;  "top-right"  |
|  "lef-ttop"                                                       "right-top"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-middle"                                                 "right-middle"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-bottom"                                                 "right-bottom"  |
|  "bottom-left"  > >       &lt; &lt;  "bottom-center"  > >       &lt; &lt;  "bottom-right"  |
+--------------------------------------------------------------------------------+
</pre>

<p>Elements with the same layout alignments are lined up in the directions of the arrows (see the illustration above).</p></prose>
            </description>
            <param name="alignment">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new alignment of the control</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>returns this control instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
            <description>
              <prose><p>Adds a child element to be rendered within the container element.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
              <description>
                <prose><p>this container instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
            <description>
              <prose><p>Returns the child collection of this container.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.base.Element&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.base.Element"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the children of this container</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
            <description>
              <prose><p>Removes a child element from this container's child collection.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
            <description>
              <prose><p>Disposes of a single child element within this container</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child to be disposed of</p></prose>
              </description>
            </param>
          </method>
          <event name="H.ui.ZoomControl#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
            <description>
              <prose><p>This event is dispatched when Element state is was modified.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <method name="H.ui.ZoomControl#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
            <description>
              <prose><p>This method disposes of the element.</p></prose>
            </description>
          </method>
          <method name="H.ui.ZoomControl#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.ZoomControl#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.ZoomControl#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ZoomControl#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ZoomControl#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <class name="H.ui.ScaleBar" local-name="ScaleBar" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This class represents a UI element showing the current zoom scale.</p></prose>
          </description>
          <extends>
            <type ref="H.ui.Control"/>
          </extends>
          <constructor local-name="ScaleBar" name="H.ui.ScaleBar">
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.ui.ScaleBar.Options"/>
              </types>
              <ctype>
                <name name="H.ui.ScaleBar.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional parameters to be passed to this scale bar.</p></prose>
              </description>
            </param>
          </constructor>
          <event name="H.ui.ScaleBar#event:toggleunitsystem" local-name="toggleunitsystem" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This event is fired when unit system is changed</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.ScaleBar#svgEl_" local-name="svgEl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Node"/>
            </types>
            <ctype>
              <name name="Node"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#scaleEl_" local-name="scaleEl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Node"/>
            </types>
            <ctype>
              <name name="Node"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#scaleShadowEl_" local-name="scaleShadowEl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Node"/>
            </types>
            <ctype>
              <name name="Node"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#labelEl_" local-name="labelEl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Node"/>
            </types>
            <ctype>
              <name name="Node"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#labelShadowEl_" local-name="labelShadowEl_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Node"/>
            </types>
            <ctype>
              <name name="Node"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#unitSystem_" local-name="unitSystem_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.UnitSystem"/>
            </types>
            <ctype>
              <name name="H.ui.UnitSystem"/>
            </ctype>
          </property>
          <method name="H.ui.ScaleBar#getTemplate_" local-name="getTemplate_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns an svg markup for this control</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#capture" local-name="capture" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Captures current ui state of the scale bar,
and call callback with its HTMLCanvasElement representation</p></prose>
            </description>
            <param name="pixelRatio">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays,
                           default is <code>1</code></p></prose>
              </description>
            </param>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="HTMLCanvasElement" optional="true"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>Callback function to call once result of
                                               the capturing is ready</p></prose>
              </description>
            </param>
            <param name="opt_errback" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func optional="true">
                  <param>
                    <name name="string"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>Callback function to call if error occurerd during capturing</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#update" local-name="update" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method updates the scale bar's size and units.</p></prose>
            </description>
          </method>
          <property name="H.ui.ScaleBar.MILE_IN_METERS_" local-name="MILE_IN_METERS_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar.FOOT_IN_METERS_" local-name="FOOT_IN_METERS_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.ui.ScaleBar#getDelta_" local-name="getDelta_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method returns the horizontal distance in meters which correspond to the pixelDistance on the map.</p></prose>
            </description>
            <param name="pixelDistance">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the pixel distance to measure in meters</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>the number of meters spanned by the pixel distance</p></prose>
              </description>
            </returns>
          </method>
          <typedef name="H.ui.ScaleBar.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="alignment"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.ui.ScaleBar.Options#alignment" local-name="alignment" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>the preferred layout alignment for this control, default is <code>&quot;bottom-right&quot;</code></p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <event name="H.ui.ScaleBar#event:alignmentchange" local-name="alignmentchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.Control#event:alignmentchange">
            <description>
              <prose><p>This event is fired when control is realigned</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <property name="H.ui.ScaleBar#map" local-name="map" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#map">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.Map"/>
            </types>
            <ctype>
              <name name="H.Map"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#alignment_" local-name="alignment_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#alignment_">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.LayoutAlignment"/>
            </types>
            <ctype>
              <name name="H.ui.LayoutAlignment" nullable="false"/>
            </ctype>
          </property>
          <property name="H.ui.ScaleBar#locale" local-name="locale" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#locale">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.ui.i18n.Localization"/>
            </types>
            <ctype>
              <name name="H.ui.i18n.Localization"/>
            </ctype>
          </property>
          <method name="H.ui.ScaleBar#setMap" local-name="setMap" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setMap">
            <description>
              <prose><p>Sets the map to which the UI is attached</p></prose>
            </description>
            <param name="map">
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#setLocalization" local-name="setLocalization" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#setLocalization">
            <description>
              <prose><p>This method sets locale for the current control. Not exported! only
for UI class use</p></prose>
            </description>
            <param name="localization">
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.Control#render">
            <description>
              <prose><p>Renders this control into a map UI object.</p></prose>
            </description>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the document into which this control renders.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the fully rendered HTML representation of this control</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#onUnitSystemChange" local-name="onUnitSystemChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onUnitSystemChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the UI object's unit system
changes.</p></prose>
            </description>
            <param name="unitSystem">
              <types>
                <type ref="H.ui.UnitSystem"/>
              </types>
              <ctype>
                <name name="H.ui.UnitSystem"/>
              </ctype>
              <description>
                <prose><p>the unit system the UI currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#onMapEngineTypeChange" local-name="onMapEngineTypeChange" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#onMapEngineTypeChange">
            <description>
              <prose><p>This abstract method can be overridden by deriving classes to be invoked when the underlying map engine
changes.</p></prose>
            </description>
            <param name="engineType">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose><p>the engine type the map currently uses</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#getMap" local-name="getMap" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getMap">
            <description>
              <prose><p>This method returns the map to which this control is attached.</p>
<p>Note: Before adding a control to a UI object this method returns null.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map" nullable="true"/>
              </ctype>
              <description>
                <prose><p>return the map</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#getLocalization" local-name="getLocalization" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getLocalization">
            <description>
              <prose><p>This method returns the localization object which corresponds to the UI's current
locale.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.ui.i18n.Localization"/>
              </types>
              <ctype>
                <name name="H.ui.i18n.Localization"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#getAlignment" local-name="getAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#getAlignment">
            <description>
              <prose><p>This method returns this control's layout alignment.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the control's current layout alignment</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#setAlignment" local-name="setAlignment" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.Control#setAlignment">
            <description>
              <prose><p>This method sets the control's layout alignments.</p>
<p>The possible alignments are as follows within the map view port:</p>
<pre>
+--------------------------------------------------------------------------------+
|  "top-left"  > >           &lt; &lt;  "top-center"  > >            &lt; &lt;  "top-right"  |
|  "lef-ttop"                                                       "right-top"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-middle"                                                 "right-middle"  |
|  v                                                                          v  |
|  v                                                                          v  |
|                                                                                |
|                                                                                |
|  ^                                                                          ^  |
|  ^                                                                          ^  |
|  "left-bottom"                                                 "right-bottom"  |
|  "bottom-left"  > >       &lt; &lt;  "bottom-center"  > >       &lt; &lt;  "bottom-right"  |
+--------------------------------------------------------------------------------+
</pre>

<p>Elements with the same layout alignments are lined up in the directions of the arrows (see the illustration above).</p></prose>
            </description>
            <param name="alignment">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the new alignment of the control</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.Control"/>
              </types>
              <ctype>
                <name name="H.ui.Control"/>
              </ctype>
              <description>
                <prose><p>returns this control instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#addChild" local-name="addChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#addChild">
            <description>
              <prose><p>Adds a child element to be rendered within the container element.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be added</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Container"/>
              </types>
              <ctype>
                <name name="H.ui.base.Container"/>
              </ctype>
              <description>
                <prose><p>this container instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#getChildren" local-name="getChildren" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Container#getChildren">
            <description>
              <prose><p>Returns the child collection of this container.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.ui.base.Element&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.ui.base.Element"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the children of this container</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#removeChild" local-name="removeChild" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Container#removeChild">
            <description>
              <prose><p>Removes a child element from this container's child collection.</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child element to be removed</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#disposeOfChild_" local-name="disposeOfChild_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Container#disposeOfChild_">
            <description>
              <prose><p>Disposes of a single child element within this container</p></prose>
            </description>
            <param name="child">
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>the child to be disposed of</p></prose>
              </description>
            </param>
          </method>
          <event name="H.ui.ScaleBar#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#event:statechange">
            <description>
              <prose><p>This event is dispatched when Element state is was modified.</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <method name="H.ui.ScaleBar#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#dispose">
            <description>
              <prose><p>This method disposes of the element.</p></prose>
            </description>
          </method>
          <method name="H.ui.ScaleBar#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.ui.base.Element#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#renderInternal" local-name="renderInternal" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#renderInternal">
            <description>
              <prose><p>This method is the concrete implementation of the UI element. This method receives the pre-rendered HTML
element which may be modified by deriving classes.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>this UI element's HTML representation</p></prose>
              </description>
            </param>
            <param name="doc">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose><p>the HTML document into which the element is currently being rendered</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#isDisabled" local-name="isDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#isDisabled">
            <description>
              <prose><p>This method returns this UI element's disabled state as a boolean value.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> if the element is disabled, <code>false</code> otherwise</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#setDisabled" local-name="setDisabled" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setDisabled">
            <description>
              <prose><p>This method set's the disabled state of this UI element.</p></prose>
            </description>
            <param name="disabled">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p><code>true</code> to disabled the element, <code>false</code> to enabled it</p></prose>
              </description>
            </param>
            <param name="opt_force" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>an optional boolean flag indicating that the value should be set and
 propagated even if it is the same as the current state</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getData">
            <description>
              <prose><p>This method returns a previously stored arbitrary data from this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the previously stored data object or <code>null</code> if not data was stored.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setData">
            <description>
              <prose><p>This method stores arbitrary data with this UI element.</p></prose>
            </description>
            <param name="data">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the data to be stored</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#getTooltip" local-name="getTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#getTooltip">
            <description>
              <prose><p>This method returns the tool tip of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the current tool tip</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#setTooltip" local-name="setTooltip" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setTooltip">
            <description>
              <prose><p>This method sets a tool tip string to be shown when the user hovers over element element.</p></prose>
            </description>
            <param name="tooltip">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the tool tip to be shown when hovering over this element</p></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getElement">
            <description>
              <prose><p>This method returns the HTML element this UI element renders.</p>
<p>Note: Before the UI element was rendered the method returns <code>null</code>.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="HTMLElement"/>
              </types>
              <ctype>
                <name name="HTMLElement" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the element</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#setElement_" local-name="setElement_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#setElement_">
            <description>
              <prose></prose>
            </description>
            <param name="el">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>the HTML element representing this control</p></prose>
              </description>
            </param>
          </method>
          <property name="H.ui.ScaleBar#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#visibility_">
            <description>
              <prose><p>The current visibility of this element</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.ui.ScaleBar#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#setVisibility">
            <description>
              <prose><p>Sets the visibility of this element.</p></prose>
            </description>
            <param name="visibility">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.ui.ScaleBar#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#getVisibility">
            <description>
              <prose><p>Returns the visibility of this element.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>visibility</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#addClass" local-name="addClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#addClass">
            <description>
              <prose><p>This method adds a CSS class to this UI element (if it is not already present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#removeClass" local-name="removeClass" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.ui.base.Element#removeClass">
            <description>
              <prose><p>This method removes a CSS class from this UI element (if it is present).</p></prose>
            </description>
            <param name="className">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>the CSS class name to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.ui.base.Element"/>
              </types>
              <ctype>
                <name name="H.ui.base.Element"/>
              </ctype>
              <description>
                <prose><p>this UI element instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.ui.ScaleBar#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.ui.base.Element#remove">
            <description>
              <prose><p>Removes the UI element from the UI.</p></prose>
            </description>
          </method>
        </class>
        <method name="H.ui.buildInfo" local-name="buildInfo" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose><p>Function returns build information</p></prose>
          </description>
          <returns>
            <types>
              <type ref="H.util.BuildInfo"/>
            </types>
            <ctype>
              <name name="H.util.BuildInfo"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </returns>
        </method>
      </ns>
    </symbols>
  </module>
</modules>
