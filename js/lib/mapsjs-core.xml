<?xml version="1.0"?>
<modules>
  <module name="mapsjs-core">
    <symbols>
      <property name="this[0]" local-name="this[0]" access="public" scope="global" virtual="false" published="true" exported="false">
        <description>
          <prose><p>The minimum y (top) value</p></prose>
        </description>
        <types>
          <type ref="number"/>
        </types>
        <ctype>
          <name name="number"/>
        </ctype>
      </property>
      <property name="this[1]" local-name="this[1]" access="public" scope="global" virtual="false" published="true" exported="false">
        <description>
          <prose><p>The maximum x (right) value</p></prose>
        </description>
        <types>
          <type ref="number"/>
        </types>
        <ctype>
          <name name="number"/>
        </ctype>
      </property>
      <property name="this[2]" local-name="this[2]" access="public" scope="global" virtual="false" published="true" exported="false">
        <description>
          <prose><p>The maximum y (bottom) value</p></prose>
        </description>
        <types>
          <type ref="number"/>
        </types>
        <ctype>
          <name name="number"/>
        </ctype>
      </property>
      <property name="this[3]" local-name="this[3]" access="public" scope="global" virtual="false" published="true" exported="false">
        <description>
          <prose><p>The minimum x (left) value</p></prose>
        </description>
        <types>
          <type ref="number"/>
        </types>
        <ctype>
          <name name="number"/>
        </ctype>
      </property>
      <method name="get" local-name="get" access="public" scope="global" virtual="false" published="false" exported="false">
        <description>
          <prose></prose>
        </description>
      </method>
      <ns name="H" local-name="H" access="public" scope="" virtual="false" published="true" exported="false">
        <description>
          <prose><p>HERE Maps for Javascript</p></prose>
        </description>
        <property name="H.global" local-name="global" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>Reference to the global object</p></prose>
          </description>
        </property>
        <ns name="H.lang" local-name="lang" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>Contains implementation for the base library definitions and error handling</p></prose>
          </description>
          <method name="H.lang.inherits" local-name="inherits" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This function uses prototype inheritance for provided
object constructors. Child constructor receives
parent's prototype methods.</p></prose>
              <example>function Parent(name){
  this.name = name;
};
Parent.prototype.printName = function(){
  console.log(this.name);
};

function Child(name){
  Parent.call(this, name);
};
H.lang.inherits(Child, Parent);

var childInstance = new Child(&apos;John&apos;);
childInstance.printName(); //method is available and will print name</example>
            </description>
            <param name="child">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="parent">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.lang.extend" local-name="extend" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Extends an object with another object. This operates 'in-place'; it does not create a new Object.</p>
<p>Example:
var o = {};
H.lang.extend(o, {a: 0, b: 1});
o; // {a: 0, b: 1}
H.lang.extend(o, {c: 2}, {d: 3});
o; // {a: 0, b: 1, c: 2, d: 3}</p></prose>
            </description>
            <param name="target">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose><p>The object to modify.</p></prose>
              </description>
            </param>
            <param name="var_args">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" repeatable="true"/>
              </ctype>
              <description>
                <prose><p>The objects from which values will be copied.</p></prose>
              </description>
            </param>
          </method>
          <method name="H.lang.bind" local-name="bind" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This function binds provided method to
given context. Which means whenever function will
be executed 'this' will point to provided context.</p></prose>
            </description>
            <param name="func">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="ctx">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="var_args">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all repeatable="true"/>
              </ctype>
              <description>
                <prose><p>Additional arguments that are partially
    applied to the function.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>a new function which is bound to the provided context</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.lang.String" local-name="String" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A reference to the global String function, used for code size optimization</p></prose>
            </description>
            <types>
              <type ref="function"/>
            </types>
            <ctype>
              <func>
                <param>
                  <unknown/>
                </param>
              </func>
            </ctype>
          </property>
          <method name="H.lang.evaluate_" local-name="evaluate_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A helper function to evaluate any kind of code without be boothered by CC</p></prose>
            </description>
            <param name="opt_code" optional="true">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>the evalueated code</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.lang.UNDEF" local-name="UNDEF" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The &quot;eval('')&quot; prevents CC to &quot;optimize&quot; references to H.lang.UNDEF with &quot;void 0&quot;</p></prose>
            </description>
            <types>
              <type ref="undefined"/>
            </types>
            <ctype>
              <undefined/>
            </ctype>
          </property>
          <property name="H.lang.NULL" local-name="NULL" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The &quot;eval(null)&quot; prevents CC to &quot;optimize&quot; references to H.lang.NULL with &quot;null&quot;</p></prose>
            </description>
            <types>
              <type ref="null"/>
            </types>
            <ctype>
              <null/>
            </ctype>
          </property>
          <typedef name="H.lang.ArrayLike" local-name="ArrayLike" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>An object which looks like an Array by having a 'length' property and entries accessible by an index.</p></prose>
            </description>
            <types>
              <type ref="string"/>
              <type ref="Array"/>
              <type ref="NodeList"/>
              <type ref="Arguments"/>
              <type ref="Object"/>
            </types>
            <ctype>
              <union>
                <type>
                  <name name="string"/>
                </type>
                <type>
                  <name name="Array"/>
                </type>
                <type>
                  <name name="NodeList"/>
                </type>
                <type>
                  <name name="Arguments"/>
                </type>
                <type>
                  <record>
                    <field>
                      <key>
                        <name name="length"/>
                      </key>
                      <value>
                        <name name="number"/>
                      </value>
                    </field>
                  </record>
                </type>
              </union>
            </ctype>
          </typedef>
          <typedef name="H.lang.NumberLike" local-name="NumberLike" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A NumberLike defines an object that can be converted to a number by operating
on it using number operators (+, -, etc.).</p></prose>
            </description>
            <types>
              <type ref="number"/>
              <type ref="string"/>
            </types>
            <ctype>
              <union>
                <type>
                  <name name="number"/>
                </type>
                <type>
                  <name name="string"/>
                </type>
              </union>
            </ctype>
          </typedef>
          <typedef name="H.lang.Booly" local-name="Booly" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Represents a truthy or falsy value. The value is evaluated by use of double negation <code>!!value</code></p></prose>
            </description>
            <types>
              <type ref="?"/>
            </types>
            <ctype>
              <unknown/>
            </ctype>
          </typedef>
          <method name="H.lang.tokenize" local-name="tokenize" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Splits the specified string into tokens</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to split it's string representation</p></prose>
              </description>
            </param>
            <param name="opt_delimiter" optional="true">
              <types>
                <type ref="string"/>
                <type ref="RegExp"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <name name="RegExp"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The delimiter to use for splitting, if omitted a space is used</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the list of tokens</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.lang.PROTOTYPEFIELDS" local-name="PROTOTYPEFIELDS" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The names of the fields that are defined on Object.prototype.</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;string&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <name name="string"/>
                </app>
              </typed>
            </ctype>
          </property>
          <method name="H.lang.isInstanceOf" local-name="isInstanceOf" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Checks whether the given value is an instance of the given constructor.
If not so and the optional caller is specified, an InvalidArgumentError is thrown</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <param name="cstr">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The constructor to test against.</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_message" optional="true">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all optional="true"/>
              </ctype>
              <description>
                <prose><p>The message to use for the error</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether the value is an instance of the constructor</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="H.lang.InvalidArgumentError"/>
              </types>
              <ctype>
                <name name="H.lang.InvalidArgumentError"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </exception>
          </method>
          <method name="H.lang.isConstructedBy" local-name="isConstructedBy" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the value's constructor is identical with the specified constructor</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <param name="cstr">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The constructor to test against.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether the value's constructor is identical</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.checkIllegalConstructor" local-name="checkIllegalConstructor" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>It checks the constructor of the given instance and the given constructor for identity. If the result of this check
not equals the opt_expected value a TypeError with the message &quot;Illegal constructor&quot; and the name of the constructor
symbol is thrown.</p></prose>
              <example>  MyAbstractClass = function() {
    H.lang.checkIllegalConstructor(this, MyAbstractClass, false);
  };
  MyFinalClass = function() {
    H.lang.checkIllegalConstructor(this, MyFinalClass, true);
    MyFinalClass.superClass_.constructor.call(this);
  };
  goog.inherits(MyFinalClass, MyAbstractClass);
  MyClass = function() {
    MyClass.superClass_.constructor.call(this);
  };
  goog.inherits(MyClass, MyFinalClass);

  new MyAbstractClass(); // TypeError - You can&apos;t instatiate an abstract class
  new MyFinalClass();
  new MyClass();         // TypeError - You can&apos;t extend a final class</example>
            </description>
            <param name="instance">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The instance to check</p></prose>
              </description>
            </param>
            <param name="constructor">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The construtor to check against</p></prose>
              </description>
            </param>
            <param name="opt_expected" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>The expected result of the identity-check, default is <code>false</code></p></prose>
              </description>
            </param>
            <exception>
              <types>
                <type ref="TypeError"/>
              </types>
              <ctype>
                <name name="TypeError"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </exception>
          </method>
          <property name="H.lang.isFunction" local-name="isFunction" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is a function</p></prose>
            </description>
          </property>
          <property name="H.lang.isObject" local-name="isObject" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines if the given value is an object</p></prose>
            </description>
          </property>
          <property name="H.lang.isNull" local-name="isNull" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is |null|</p></prose>
            </description>
          </property>
          <property name="H.lang.isArrayLike" local-name="isArrayLike" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the object looks like an array. To qualify as array like
the value needs to be either a NodeList or an object with a Number length
property.</p></prose>
            </description>
          </property>
          <method name="H.lang.isTypeOf" local-name="isTypeOf" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Checks whether H.lang.typeof() produces for the given value the given type.
If not so and the optional caller is specified, an InvalidArgumentError is thrown</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The type to test against.</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_message" optional="true">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all optional="true"/>
              </ctype>
              <description>
                <prose><p>The message to use for the error</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether the value is of the expected type</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="H.lang.InvalidArgumentError"/>
              </types>
              <ctype>
                <name name="H.lang.InvalidArgumentError"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </exception>
          </method>
          <method name="H.lang.isArray" local-name="isArray" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Checks whether the given value is of type Array.
If not so and the optional caller is specified, an InvalidArgumentError is thrown</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for the error</p></prose>
              </description>
            </param>
            <param name="opt_message" optional="true">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all optional="true"/>
              </ctype>
              <description>
                <prose><p>The message to use for the error</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether the value is of type Array</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="H.lang.InvalidArgumentError"/>
              </types>
              <ctype>
                <name name="H.lang.InvalidArgumentError"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </exception>
          </method>
          <method name="H.lang.isDef" local-name="isDef" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is not |undefined|.
WARNING: Do not use this to test if an object has a property. Use the in
operator instead.</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether variable is defined.</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.lang.isDefAndNotNull" local-name="isDefAndNotNull" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is defined and not null</p></prose>
            </description>
          </property>
          <property name="H.lang.isString" local-name="isString" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is a string</p></prose>
            </description>
          </property>
          <method name="H.lang.isNumber" local-name="isNumber" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is a number</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether variable is a number.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.isNumberLike" local-name="isNumberLike" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns true if the specified value is number like, a type whose valueOf or toString returns a (parseable) number
but not NaN. Examples: null, [ ], '4711', '47e11', '0xFF', new Date, '' etc.</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to test.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Whether variable is number like.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.typeOf" local-name="typeOf" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines the type of a value</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to reflect</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The type name of the value</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.lang.NO_SYMBOLS" local-name="NO_SYMBOLS" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A flag disbale expensive symbol path detection during <link ref="H.lang.getSymbolPath" /> calls.
It's automatially set to <code>true</code> if goog.DEBUG flag is set and jasmine is running.
To enable symbol path detection set the value to <code>false</code></p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.lang.getSymbolPath" local-name="getSymbolPath" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines for a given object the symbol path within H namespace
The optional arguments opt_namespace, opt_path and opt_passed MUST NOT passed in initial call, because they are
internally used for recursive calls only!</p></prose>
              <example>H.lang.InvalidArgumentError.getNamespace(H.map.Polyline); // ==&gt; &apos;H.map.Polyline&apos;
H.lang.InvalidArgumentError.getNamespace(function(){});        // ==&gt; &apos;~Function&apos;</example>
            </description>
            <param name="object">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The object to reflect</p></prose>
              </description>
            </param>
            <param name="opt_namespace" optional="true">
              <types>
                <type ref="Object"/>
                <type ref="function"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <name name="Function"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The namespace to reflect</p></prose>
              </description>
            </param>
            <param name="opt_path" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>The path to the namespace</p></prose>
              </description>
            </param>
            <param name="opt_passed" optional="true">
              <types>
                <type ref="Array.&lt;*&gt;"/>
              </types>
              <ctype>
                <union optional="true">
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The list of already passed namespaces</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The determined symbol path or an empty string if symbol clouldn't found</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.isWindow" local-name="isWindow" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines if the given value is a Window object</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to reflect</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.isNode" local-name="isNode" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines if the given value is a Document object</p></prose>
            </description>
            <param name="val">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>The value to reflect</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.firstOwnPropertyName" local-name="firstOwnPropertyName" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Detects the identifier of the first property which was found in the given object.
It's useful if there is a need to select a property via bracket notation (like myObject[myKey]) but the
property identifier was possibly renamed by Closure Compiler.
You can also use @link{H.lang.propertyNameByValue} if the property's value is unique within the object and
it's whole prototype chain.</p></prose>
              <example>myCar = {color: &apos;red&apos;, doors: 5}; // ==&gt; compiled to e.g. &apos;x = {m: &apos;red&apos;, o: 5};&apos;
colorKey = H.lang.firstOwnPropertyName({color:0}); // ==&gt; &apos;m&apos;
for(key in myObject) {
  if(key === colorKey) alert(&apos;A &apos; + myObject[key] + &apos; Car&apos;);  // ==&gt; &quot;A red Car&quot;
}</example>
            </description>
            <param name="object">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.propertyNameByValue" local-name="propertyNameByValue" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Tries to find the identifier of the property which references an identical value. If more than one property found,
the one with the longest name is taken (typically the non obfuscated exported one).
Returns undefined if no property was found which references the given value.</p></prose>
              <example>Cat.prototype.hello = function() { this.say_(); }; // ==&gt; &apos;hello&apos; compiled to &apos;a&apos;, but also exported as &apos;hello&apos;
Cat.prototype.say_ = function() {
  alert(H.lang.propertyNameByValue(this, arguments.callee.caller) // ==&gt; &apos;hello&apos;
};</example>
            </description>
            <param name="object">
              <types>
                <type ref="Object"/>
                <type ref="function"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <name name="Function"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="value">
              <types>
                <type ref="Object"/>
                <type ref="function"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <name name="Function"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_onlyOwnProperties" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>If set to <code>true</code> prototype properties are ignored</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.sortByLength" local-name="sortByLength" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>To sort a list of array like objects by length in descending order.</p></prose>
            </description>
            <param name="a">
              <types>
                <type ref="H.lang.ArrayLike"/>
              </types>
              <ctype>
                <name name="H.lang.ArrayLike"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="b">
              <types>
                <type ref="H.lang.ArrayLike"/>
              </types>
              <ctype>
                <name name="H.lang.ArrayLike"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.forEachProp" local-name="forEachProp" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Iterates over the object calling the supplied callback once for each property.</p></prose>
            </description>
            <param name="obj" nullable="true">
              <types>
                <type ref="Object"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union nullable="true">
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="onlyOwnProperties">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>If set to <code>true</code> prototype properties are ignored</p></prose>
              </description>
            </param>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="Object"/>
                  </param>
                  <param>
                    <name name="string"/>
                  </param>
                  <param>
                    <name name="boolean"/>
                  </param>
                  <return>
                    <unknown/>
                  </return>
                </func>
              </ctype>
              <description>
                <prose><p>The function to invoke.
     It gets the iterated object, the current property key and an isEnumerable flag as arguments.
     If the callback's return value evaluates to <code>true</code> the iteration stops</p></prose>
              </description>
            </param>
          </method>
          <method name="H.lang.propertyRelation" local-name="propertyRelation" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Creates a JSDOC like separator symbol for a property</p></prose>
              <example>H.lang.propertyRelation([], &apos;length&apos;); // &apos;^&apos;  ==&gt; length is a instance property of an Array instance
H.lang.propertyRelation([], &apos;splice&apos;); // &apos;#&apos;  ==&gt; splice is a prototype property of an Array instance
H.lang.propertyRelation(RegExp, &apos;$1&apos;); // &apos;.&apos;  ==&gt; $1 is a static property of the RegExp class
H.lang.propertyRelation({}, {});       // &apos;~&apos;  ==&gt; no relation between the given objects</example>
            </description>
            <param name="object" nullable="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" nullable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="key">
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The key of the property</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="string"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>The according property type '^' for instance, '.' for static, '#' for prototype
      or <code>undefined</code> if the property couldn't found</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.getFunctionName" local-name="getFunctionName" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines the name of a function</p></prose>
            </description>
            <param name="func">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The function's name or &quot;anonymous&quot;</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.dropComments" local-name="dropComments" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Removes the comments from a source code</p></prose>
            </description>
            <param name="sourceCode">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The source code without comments</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.numberedArguments" local-name="numberedArguments" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Renames the given argument names to '#0', '#1', #2' ...</p></prose>
            </description>
            <param name="name">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="idx">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="argumentNames">
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.lang.getArgumentNames" local-name="getArgumentNames" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Determines the argument names of a function.</p></prose>
            </description>
            <param name="func">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the argument names. If COMPILED is true the obfuscated names are replaces by '#0', '#1' ...</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.lang.deprecated" local-name="deprecated" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Function warns the user that a symbol has been
deprecated and it will be removed soon.</p></prose>
            </description>
            <param name="symbol">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
              <description>
                <prose><p>symbol function name or object which will be deprecated</p></prose>
              </description>
            </param>
            <param name="opt_message" optional="true">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string" optional="true"/>
              </ctype>
              <description>
                <prose><p>optional additional message i.e describing alternative</p></prose>
              </description>
            </param>
          </method>
          <class name="H.lang.InvalidArgumentError" local-name="InvalidArgumentError" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>An error to throw if an argument is invalid</p></prose>
              <example>H.Foo.prototype.bar = function(array, idx) {
  if(idx &lt; 0) throw new H.lang.InvalidArgumentError(
    H.Foo.prototype.bar, 2, &apos;less then  0&apos;);
}
new H.Foo().bar([], -4711); // ==&gt; &apos;Invalid Argument: H.Foo#bar &quot;idx&quot; (-4711) less then 0</example>
            </description>
            <extends>
              <type ref="Error"/>
            </extends>
            <constructor local-name="InvalidArgumentError" name="H.lang.InvalidArgumentError">
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The calling function</p></prose>
                </description>
              </param>
              <param name="opt_argNr" optional="true" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The number of the invalid argument (zero based)</p></prose>
                </description>
              </param>
              <param name="opt_message" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </constructor>
          </class>
          <class name="H.lang.IllegalOperationError" local-name="IllegalOperationError" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>An error to throw if an illegal operation happens</p></prose>
              <example>Foo.prototype.bar = function() {
  if(this.isDisposed()) {
    throw new H.lang.IllegalOperationError(H.Foo.prototype.bar, &apos;Instance already disposed&apos;);
  }
}</example>
            </description>
            <extends>
              <type ref="Error"/>
            </extends>
            <constructor local-name="IllegalOperationError" name="H.lang.IllegalOperationError">
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The calling function</p></prose>
                </description>
              </param>
              <param name="opt_message" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </constructor>
          </class>
          <class name="H.lang.OutOfRangeError" local-name="OutOfRangeError" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>An error to throw if an value is out of range</p></prose>
              <example>H.Foo.prototype.bar = function(array, idx) {
  if(idx &lt; 0) throw new H.lang.OutOfRangeError(
    H.Foo.prototype.bar, 2, 0, array.length - 1);
}
new H.Foo().bar([0, 1], -4); // ==&gt; &apos;OutOfrange: H.Foo#bar (-4 out of [0...1])</example>
            </description>
            <extends>
              <type ref="Error"/>
            </extends>
            <constructor local-name="OutOfRangeError" name="H.lang.OutOfRangeError">
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The calling function</p></prose>
                </description>
              </param>
              <param name="opt_val" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_range" optional="true">
                <types>
                  <type ref="Array.&lt;number&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The range's values as [min, max]</p></prose>
                </description>
              </param>
            </constructor>
          </class>
        </ns>
        <ns name="H.util" local-name="util" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>This namespace contains utility implementations.</p></prose>
          </description>
          <property name="H.util.alphaChannelRegExp_" local-name="alphaChannelRegExp_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A RegExp to isolate the alpha value of a &quot;rgba(...)&quot; or &quot;hsla(...)&quot; CSS color</p></prose>
            </description>
            <types>
              <type ref="RegExp"/>
            </types>
            <ctype>
              <name name="RegExp"/>
            </ctype>
          </property>
          <method name="H.util.isNonTransparent" local-name="isNonTransparent" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>To check if the given CCS color is non-transparent (neither &quot;transparent&quot; nor if rgba or hsla value with alpha 0)
DON'T publish, API internally used only in SpatialStyle and ArrowStyle!</p></prose>
            </description>
            <param name="color">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The CSS color string to check</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>whether the color is transparent</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.util.IS_MSIE" local-name="IS_MSIE" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Indicates whether the browser is a Micosoft Internet Explorer</p></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.util.getSuperProto" local-name="getSuperProto" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Returns the super class prototype of the passed constructor or <code>undefined</code> if the constructor
doesn't inherits another one.</p></prose>
            </description>
            <param name="constructor">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.eval" local-name="eval" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Method evals string in core module scope</p></prose>
            </description>
            <param name="str">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>string to be evaled</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.getValue" local-name="getValue" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Returns the given value if !== undefined - otherwise the given defaultValue</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The value to use</p></prose>
              </description>
            </param>
            <param name="defaultVal">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The default value to use</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.svgToDataUrl" local-name="svgToDataUrl" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Returns data URL from a given SVG markup. If markup is not a valid SVG returns it as is.</p></prose>
            </description>
            <param name="svgMarkup">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>The SVG markup to convert</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>Data URL</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.copyStyle" local-name="copyStyle" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns data URL from a given SVG markup. If markup is not a valid SVG returns it as is.</p></prose>
            </description>
            <param name="from">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="to">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>Passed element with the applied styling</p></prose>
              </description>
            </returns>
          </method>
          <property name="H.util.nextUid_" local-name="nextUid_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Counter for session wide unique identifier</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.util.getUid" local-name="getUid" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Creates a unique ID. The uniqueness is restricted to the session's life time.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.returnNull" local-name="returnNull" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A function which returns always null</p></prose>
            </description>
            <param name="var_args">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all repeatable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="null"/>
              </types>
              <ctype>
                <null/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.returnTrue" local-name="returnTrue" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A function which returns always true</p></prose>
            </description>
            <param name="var_args">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all repeatable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.returnFalse" local-name="returnFalse" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A function which returns always false</p></prose>
            </description>
            <param name="var_args">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all repeatable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.doNothing" local-name="doNothing" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A function which does nothing</p></prose>
            </description>
            <param name="var_args">
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all repeatable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <property name="H.util.emptyArray" local-name="emptyArray" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>An empty Array</p></prose>
            </description>
            <types>
              <type ref="Array.&lt;*&gt;"/>
            </types>
            <ctype>
              <typed>
                <base>
                  <name name="Array"/>
                </base>
                <app>
                  <all/>
                </app>
              </typed>
            </ctype>
          </property>
          <method name="H.util.getContainedCanvasses" local-name="getContainedCanvasses" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns all HTMLCanvasElement nodes on the descendant-or-self axis of the passed element.</p></prose>
            </description>
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.lang.ArrayLike.&lt;HTMLCanvasElement&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="H.lang.ArrayLike"/>
                  </base>
                  <app>
                    <name name="HTMLCanvasElement"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.util.cloneNode" local-name="cloneNode" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Clones a node (if owner- and targetDocument are equal) or imports a node into the targetDocument</p></prose>
            </description>
            <param name="node">
              <types>
                <type ref="Node"/>
              </types>
              <ctype>
                <name name="Node"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="targetDocument">
              <types>
                <type ref="Document"/>
              </types>
              <ctype>
                <name name="Document"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="containsCanvas">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>Indicates that the node is a HTMLCanvasElement or contains at least one of it.
     If so, the method blitts also the ImageData of all canvas elements into the according clones</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Node"/>
              </types>
              <ctype>
                <name name="Node"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.util.dummyCanvasContext_" local-name="dummyCanvasContext_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A 1x1 px canvas context used by util.isImageLoaded()</p></prose>
            </description>
            <types>
              <type ref="CanvasRenderingContext2D"/>
            </types>
            <ctype>
              <name name="CanvasRenderingContext2D"/>
            </ctype>
          </property>
          <method name="H.util.isImageLoaded" local-name="isImageLoaded" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Indicates whether the passed image is complete loaded</p></prose>
            </description>
            <param name="img">
              <types>
                <type ref="HTMLImageElement"/>
              </types>
              <ctype>
                <name name="HTMLImageElement"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <class name="H.util.QuadTree" local-name="QuadTree" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A quad tree is data structure to do space partitioning,
ray and square based intersecting lookup. The space spanned by the tree is always square
shaped by a given axis radius.</p>
<p>NOTE: Be aware that y coordinate is growing from top to bottom!</p></prose>
            </description>
            <constructor local-name="QuadTree" name="H.util.QuadTree">
              <param name="depth" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>To limit the depth levels of the tree. Default is 10 if the value is a falsy.</p></prose>
                </description>
              </param>
              <param name="radiusX" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The root-quad's half size on x-axis. Default is 1 if the value is a falsy.</p></prose>
                </description>
              </param>
              <param name="radiusY" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The root-quad's half size on y-axis. Default is 1 if the value is a falsy.</p></prose>
                </description>
              </param>
              <param name="centerX" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The x coordinate of the root-quad's center. Default is 0 if the value is a falsy.</p></prose>
                </description>
              </param>
              <param name="centerY" nullable="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The y coordinate of the root-quad's center. Default is 0 if the value is a falsy.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.util.QuadTree#depth_" local-name="depth_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds a depth limit for the quad tree.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#root_" local-name="root_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the root quad of the quad tree.</p></prose>
              </description>
              <types>
                <type ref="H.util.QuadTree.Quad_"/>
              </types>
              <ctype>
                <name name="H.util.QuadTree.Quad_" nullable="true"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#extremes_" local-name="extremes_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds a hash table of extreme values for min/max X and Y</p></prose>
              </description>
              <types>
                <type ref="H.util.QuadTree.Extremes"/>
              </types>
              <ctype>
                <name name="H.util.QuadTree.Extremes" nullable="true"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#head_" local-name="head_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds a reference to the first quad which holds more then one sub-quad or one or more entries. Using the head<em>
instead of root</em> optimizes read operations because during the intersection operation it ignores all parent quads of
the head<em> but starts the directly on the head</em> quad.</p></prose>
              </description>
              <types>
                <type ref="H.util.QuadTree.Quad_"/>
              </types>
              <ctype>
                <name name="H.util.QuadTree.Quad_" nullable="true"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#centerX_" local-name="centerX_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the x component of the root quad's center</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#centerY_" local-name="centerY_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the y component of the root quad's center.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#radiusX_" local-name="radiusX_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the starting axis radius of the quad tree in x direction.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.util.QuadTree#radiusY_" local-name="radiusY_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the starting axis radius of the quad tree in y direction.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.util.QuadTree.getExtremes_" local-name="getExtremes_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A static helper method to determine the extreme values for the given quad candidates for each aspect (top, right,
  bottom, left)</p></prose>
              </description>
              <param name="candidates">
                <types>
                  <type ref="H.util.QuadTree.Candidates_"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Candidates_"/>
                </ctype>
                <description>
                  <prose><p>The quad candidates for all aspects</p></prose>
                </description>
              </param>
              <param name="extremes">
                <types>
                  <type ref="H.util.QuadTree.Extremes"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Extremes"/>
                </ctype>
                <description>
                  <prose><p>The current extreme values for each aspect</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Extremes"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Extremes"/>
                </ctype>
                <description>
                  <prose><p>The determined extreme values or null if the tree is empty</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#getExtremes" local-name="getExtremes" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method determines the extreme values of all stored entries.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Extremes"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Extremes" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The determined extreme values or null if the tree is empty</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#flush" local-name="flush" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method removes all entries from the quad tree.</p></prose>
              </description>
            </method>
            <method name="H.util.QuadTree#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method removes an entry from the tree.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The quad tree entry to be removed.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the given entry could be found and removed or not</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#adjustExtremes_" local-name="adjustExtremes_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Adds or subtracts the given extremes from the extremes of the tree.</p></prose>
              </description>
              <param name="extremes">
                <types>
                  <type ref="H.util.QuadTree.Extremes"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Extremes"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_wasAdded" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>A flag to specify if the extremes should be added (true) or subtracted (false)</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.QuadTree#insert_" local-name="insert_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Creates and inserts an entry into the tree for the given coordinates (recursively if necessary).</p></prose>
              </description>
              <param name="quad">
                <types>
                  <type ref="H.util.QuadTree.Quad_"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Quad_"/>
                </ctype>
                <description>
                  <prose><p>The current quad of the tree.</p></prose>
                </description>
              </param>
              <param name="minX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The smaller x The component of the coordinates.</p></prose>
                </description>
              </param>
              <param name="minY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The smaller y The component of the coordinates.</p></prose>
                </description>
              </param>
              <param name="maxX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bigger x The component of the coordinates.</p></prose>
                </description>
              </param>
              <param name="maxY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bigger y The component of the coordinates.</p></prose>
                </description>
              </param>
              <param name="remainingDepth">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The number of remaining depth levels to fill the tree.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The created entry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#insertSorted" local-name="insertSorted" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Inserts an entry (line ore square - given by min and max pair values for x and y) into the tree.</p></prose>
              </description>
              <param name="minX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The minimum x component.</p></prose>
                </description>
              </param>
              <param name="minY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The minimum y component.</p></prose>
                </description>
              </param>
              <param name="maxX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The maximum x component.</p></prose>
                </description>
              </param>
              <param name="maxY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The maximum y component.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The created quad tree entry.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#insert" local-name="insert" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method inserts an entry (line ore square - given by two spanning coordinate pairs) into the tree.</p></prose>
              </description>
              <param name="x1">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The x component of the first coordinate.</p></prose>
                </description>
              </param>
              <param name="y1">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The y component of the first coordinate.</p></prose>
                </description>
              </param>
              <param name="x2">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The x component of the second coordinate.</p></prose>
                </description>
              </param>
              <param name="y2">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The y component of the second coordinate.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The created quad tree entry.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#adjustHead_" local-name="adjustHead_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>When item is inserted into tree shortcut to deepest parent quadrant of all entries is computed
and set as new head. Head is using for intersection, it is than not needed to traverse from
root to head quad. We are updating head when we remove some entry in that way: If we are deleting
quad because it doesn't have any entry, and this quad is head than we shift head pointer to quad
parent.</p></prose>
              </description>
              <param name="opt_quad" optional="true">
                <types>
                  <type ref="H.util.QuadTree.Quad_"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Quad_" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The new added quad</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.QuadTree#intersect" local-name="intersect" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Intersect the tree by given rectangle coordinates.
This method is suited mainly for visibility lookup (view port) operations.</p>
<p>NOTE: Basically quad tree returns all entries whose bounding boxes are partially intersecting with
intersecting rectangle (x1,x2,y1,y2) when intersect flag is set to true. It means that when we have a entry
with a big diagonal line and a small intersecting rectangle it is possible to get this entry in the resulting
entries list even if it is actually not intersecting this rectangle.</p>
<p>Example is below:</p>
<pre>
.|---|...../
.|...|..../.
.|---|.../..
......../...
......./....
....../.....
...../......
..../.......
</pre>

<p>NOTE2: Be aware that y coordinate is growing from top to bottom! It means that y1 component must be
smaller or equal to y2 otherwise nothing will be found hence the result will be an empty array.</p></prose>
              </description>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The left edge of the rectangle.</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The top edge of the rectangle.</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The right edge of the rectangle.</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bottom edge of the rectangle.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The matching entries of the quad tree.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.QuadTree#intersect_" local-name="intersect_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Intersect the tree by a given rectangle.</p></prose>
              </description>
              <param name="quad">
                <types>
                  <type ref="H.util.QuadTree.Quad_"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Quad_"/>
                </ctype>
                <description>
                  <prose><p>The current quad of the tree to use for intersection.</p></prose>
                </description>
              </param>
              <param name="result">
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list to push encountered entries into.</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The left (minimum x) value of the rectangle to intersect with</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The top (minimum y) value of the rectangle to intersect with</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The right (maximum x) value of the rectangle to intersect with</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bottom (maximum y) value of the rectangle to intersect with</p></prose>
                </description>
              </param>
            </method>
            <typedef name="H.util.QuadTree.Extremes" local-name="Extremes" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To provide minimum and maximum extremes values for x and y</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <property name="H.util.QuadTree.Extremes#0" local-name="0" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The minimum y (top) value</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Extremes#1" local-name="1" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The maximum x (right) value</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Extremes#2" local-name="2" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The maximum y (bottom) value</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Extremes#3" local-name="3" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The minimum x (left) value</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
            </typedef>
            <typedef name="H.util.QuadTree.Candidates_" local-name="Candidates_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Data structure to keep the quad candidates for all aspects</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <property name="H.util.QuadTree.Candidates_#0" local-name="0" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>List of all quad candidates for the minimum y aspect (top)</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Quad_&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Quad_"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Candidates_#1" local-name="1" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>List of all quad candidates for the maximum x aspect (right)</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Quad_&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Quad_"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Candidates_#2" local-name="2" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>List of all quad candidates for the maximum y aspect (bottom)</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Quad_&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Quad_"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Candidates_#3" local-name="3" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>List of all quad candidates for the minimum x aspect (left)</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Quad_&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Quad_"/>
                    </app>
                  </typed>
                </ctype>
              </property>
            </typedef>
            <enum name="H.util.QuadTree.Key" local-name="Key" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The keys for minimum and maximum x and y values</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <value name="H.util.QuadTree.Key.TL" local-name="TL">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.TR" local-name="TR">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.BL" local-name="BL">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.BR" local-name="BR">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MIN_Y" local-name="MIN_Y">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MAX_X" local-name="MAX_X">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MAX_Y" local-name="MAX_Y">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MIN_X" local-name="MIN_X">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MID_X" local-name="MID_X">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.MID_Y" local-name="MID_Y">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.RIGHT" local-name="RIGHT">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.QuadTree.Key.BOTTOM" local-name="BOTTOM">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <class name="H.util.QuadTree.Quad_" local-name="Quad_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A QuadTree node, holding the tree hierarchy informations (parent-quad and sub-quads) to traverse the QuadTreee.
It holds also min/mid/max values to specify the x/y range of the quad for performance optimization.</p></prose>
              </description>
              <constructor local-name="Quad_" name="H.util.QuadTree.Quad_">
                <param name="parent" nullable="true">
                  <types>
                    <type ref="H.util.QuadTree.Quad_"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree.Quad_" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The parent quad, needed if the quad has a parent (no root quad)</p></prose>
                  </description>
                </param>
                <param name="subQuadAddr" nullable="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The sub-quad-address, TL, TR, BL or BR, needed if the quad has a parent (no root quad)</p></prose>
                  </description>
                </param>
                <param name="opt_minX" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum x value of the quad, only needed if the quad has no parent (root quad)</p></prose>
                  </description>
                </param>
                <param name="opt_minY" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum y value of the quad, only needed if the quad has no parent (root quad)</p></prose>
                  </description>
                </param>
                <param name="opt_maxX" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum x value of the quad, only needed if the quad has no parent (root quad)</p></prose>
                  </description>
                </param>
                <param name="opt_maxY" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum y value of the quad, only needed if the quad has no parent (root quad)</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.util.QuadTree.Quad_#parent_" local-name="parent_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The reference to the parent quad or undefined if it has no no parent quad (root)</p></prose>
                </description>
                <types>
                  <type ref="H.util.QuadTree.Quad_"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Quad_" nullable="true"/>
                </ctype>
              </property>
              <property name="H.util.QuadTree.Quad_#subQuadAddr_" local-name="subQuadAddr_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The sub-quad address of the quad, one of TL, TR, BL, BR or undefined if it is a root quad (has no parent)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" nullable="true"/>
                </ctype>
              </property>
              <method name="H.util.QuadTree.Quad_#getSubQuad_" local-name="getSubQuad_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To fetch a specified sub quad. If the sub quad doesn't exists, a new Quad_ is created and registered.</p></prose>
                </description>
                <param name="subQuadAddr">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The address of the sub-quad, one of TL, TR, BL, BR</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.QuadTree.Quad_"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree.Quad_"/>
                  </ctype>
                  <description>
                    <prose><p>The requested sub quad</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.QuadTree.Quad_#addNewEntry_" local-name="addNewEntry_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To create a new entry and register it to the quad</p></prose>
                </description>
                <param name="minX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum x value of the entry</p></prose>
                  </description>
                </param>
                <param name="minY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum y value of the entry</p></prose>
                  </description>
                </param>
                <param name="maxX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum x value of the entry</p></prose>
                  </description>
                </param>
                <param name="maxY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum y value of the entry</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.QuadTree.Entry"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree.Entry"/>
                  </ctype>
                  <description>
                    <prose><p>The new created entry</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.QuadTree.Quad_#removeEntry_" local-name="removeEntry_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To remove a entry from a quad.</p></prose>
                </description>
                <param name="entry">
                  <types>
                    <type ref="H.util.QuadTree.Entry"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree.Entry"/>
                  </ctype>
                  <description>
                    <prose><p>The entry to remove</p></prose>
                  </description>
                </param>
                <param name="tree">
                  <types>
                    <type ref="H.util.QuadTree"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree"/>
                  </ctype>
                  <description>
                    <prose><p>The tree of the quad</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>whether the given entry could be found and removed or not</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.QuadTree.Quad_#cleanUp_" local-name="cleanUp_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To cleanup the tree recursively after an entry was removed from a quad.</p></prose>
                </description>
                <param name="tree">
                  <types>
                    <type ref="H.util.QuadTree"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree"/>
                  </ctype>
                  <description>
                    <prose><p>The tree to clean up</p></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.util.QuadTree.Entry" local-name="Entry" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A Quad tree entry is a pure data object, holding a unique ID and a reference to the according quad plus the data for
a certain region, specified by the minX, minY, maxX and maxY parameters</p></prose>
              </description>
              <constructor local-name="Entry" name="H.util.QuadTree.Entry">
                <param name="quad" nullable="true">
                  <types>
                    <type ref="H.util.QuadTree.Quad_"/>
                  </types>
                  <ctype>
                    <name name="H.util.QuadTree.Quad_" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The according quad.</p></prose>
                  </description>
                </param>
                <param name="minX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum x value (left).</p></prose>
                  </description>
                </param>
                <param name="minY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The minimum y value (top)</p></prose>
                  </description>
                </param>
                <param name="maxX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum x value (right)</p></prose>
                  </description>
                </param>
                <param name="maxY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The maximum y value (bottom)</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.util.QuadTree.Entry.lastID_" local-name="lastID_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The last used entry ID</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
            </class>
          </class>
          <class name="H.util.Event" local-name="Event" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Base Event class which is used for all events dispatched by any EventTarget
within the api.</p></prose>
            </description>
            <extends>
              <type ref="goog.events.Event"/>
            </extends>
            <constructor local-name="Event" name="H.util.Event"/>
            <property name="H.util.Event#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Object which triggered the event</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.util.Event#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Object which has listener attached</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.util.Event#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Name of the dispatched event</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.util.Event#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Indicates if preventDefault was called on the current event</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.util.Event#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
              </description>
            </method>
            <method name="H.util.Event#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Stops propagation for current event.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.util.ChangeEvent" local-name="ChangeEvent" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This event indicates a change. It contains the old and the new value.</p></prose>
            </description>
            <extends>
              <type ref="H.util.Event"/>
            </extends>
            <constructor local-name="ChangeEvent" name="H.util.ChangeEvent">
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The type of the event</p></prose>
                </description>
              </param>
              <param name="newValue">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The new value of the property</p></prose>
                </description>
              </param>
              <param name="oldValue">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The previous value of the property</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.util.ChangeEvent#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#target">
              <description>
                <prose><p>Object which triggered the event</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.util.ChangeEvent#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#currentTarget">
              <description>
                <prose><p>Object which has listener attached</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.util.ChangeEvent#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#type">
              <description>
                <prose><p>Name of the dispatched event</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.util.ChangeEvent#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#defaultPrevented">
              <description>
                <prose><p>Indicates if preventDefault was called on the current event</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.util.ChangeEvent#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#preventDefault">
              <description>
                <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
              </description>
            </method>
            <method name="H.util.ChangeEvent#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Event#stopPropagation">
              <description>
                <prose><p>Stops propagation for current event.</p></prose>
              </description>
            </method>
          </class>
          <class name="H.util.EventTarget" local-name="EventTarget" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>EventTarget enabled listening and dispatching events on all instances and
derived classes.</p></prose>
            </description>
            <extends>
              <type ref="goog.events.EventTarget"/>
            </extends>
            <constructor local-name="EventTarget" name="H.util.EventTarget"/>
            <method name="H.util.EventTarget#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.EventTarget#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.EventTarget#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.EventTarget#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.EventTarget#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.EventTarget#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.util.EventTarget#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <ns name="H.util.kinetics" local-name="kinetics" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This namespace holds functionality related to kinetic move calculation</p></prose>
            </description>
            <interface name="H.util.kinetics.IKinetics" local-name="IKinetics" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This interface defines kinetic move parameters used by map
for kinetic drag.</p></prose>
              </description>
              <property name="H.util.kinetics.IKinetics#power" local-name="power" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Power multiplier. Multiplier is used to increase the speed
of the kinetic move. By default map uses 1.</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.util.kinetics.IKinetics#ease" local-name="ease" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Easing function modifies animation progress. In example it can
modify the animation in a way it starts rapidaly and theb slowes down
at the end.</p></prose>
                </description>
                <param name="p">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>current progress</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>modified progress</p></prose>
                  </description>
                </returns>
              </method>
              <property name="H.util.kinetics.IKinetics#duration" local-name="duration" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Defines duration of the kinetic move.</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
            </interface>
            <class name="H.util.kinetics.KineticMove" local-name="KineticMove" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>KineticMove class defines basic physics regarding the decelerated move
(kinetics) which is used by the map for kinetic move after the drag is performed.
It contains all needed functionality to calculate deceleration, path current
speed in time for the deccelerated/accelerated move.</p></prose>
              </description>
              <constructor local-name="KineticMove" name="H.util.kinetics.KineticMove">
                <param name="acceleration">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_speed" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <method name="H.util.kinetics.KineticMove#setInitialSpeed" local-name="setInitialSpeed" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method sets initial speed for (dec/ac)celeration.</p></prose>
                </description>
                <param name="speed">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.kinetics.KineticMove"/>
                  </types>
                  <ctype>
                    <name name="H.util.kinetics.KineticMove"/>
                  </ctype>
                  <description>
                    <prose><p>the instance itself</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.kinetics.KineticMove#getDuration" local-name="getDuration" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method returns duration of the accelerated move for current initial speed.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.kinetics.KineticMove#getCurrentSpeed" local-name="getCurrentSpeed" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method returns current speed over time.</p></prose>
                </description>
                <param name="time">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.kinetics.KineticMove#getCurrentPath" local-name="getCurrentPath" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method returns current path in time.</p></prose>
                </description>
                <param name="time">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
            </class>
          </ns>
          <class name="H.util.BuildInfo" local-name="BuildInfo" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This class encapsulates build information of modules. It holds the name of the module, it build version and
the revision from which it was built.</p></prose>
            </description>
            <constructor local-name="BuildInfo" name="H.util.BuildInfo">
              <param name="name">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the name of the module</p></prose>
                </description>
              </param>
              <param name="version">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the version of the module</p></prose>
                </description>
              </param>
              <param name="revision">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the revision from which the module was built</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.util.BuildInfo.infos_" local-name="infos_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds build infos, which have been requested</p></prose>
              </description>
            </property>
            <method name="H.util.BuildInfo.get" local-name="get" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Lazily creates or returns a previously created build info</p></prose>
              </description>
              <param name="name">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the name of the module</p></prose>
                </description>
              </param>
              <param name="version">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the version of the module</p></prose>
                </description>
              </param>
              <param name="revision">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the revision from which the module was built</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.BuildInfo"/>
                </types>
                <ctype>
                  <name name="H.util.BuildInfo"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </class>
          <interface name="H.util.ICapturable" local-name="ICapturable" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>An interface for capturable elements</p></prose>
            </description>
            <method name="H.util.ICapturable#capture" local-name="capture" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method is used to capture the element view</p></prose>
              </description>
              <param name="canvas">
                <types>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <name name="HTMLCanvasElement"/>
                </ctype>
                <description>
                  <prose><p>HTML Canvas element to draw the view of the capturable element</p></prose>
                </description>
              </param>
              <param name="pixelRatio">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays,
                               default is <code>1</code></p></prose>
                </description>
              </param>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="HTMLCanvasElement" optional="true"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>Callback function to call once result of
                                               the capturing is ready</p></prose>
                </description>
              </param>
              <param name="opt_errback" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="string"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>Callback function to call if error occurerd during capturing</p></prose>
                </description>
              </param>
            </method>
          </interface>
          <class name="H.util.Disposable" local-name="Disposable" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Object which can be safely disposed.</p></prose>
            </description>
            <extends>
              <type ref="goog.Disposable"/>
            </extends>
            <constructor local-name="Disposable" name="H.util.Disposable"/>
            <method name="H.util.Disposable#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <method name="H.util.dispose" local-name="dispose" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Method disposes target object</p></prose>
            </description>
            <param name="disposableObject">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <ns name="H.util.events" local-name="events" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Namespace contains events related functions</p></prose>
            </description>
            <method name="H.util.events.listenOnce" local-name="listenOnce" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Alias for listenOnce static function</p></prose>
              </description>
              <param name="src">
                <types>
                  <type ref="goog.events.ListenableType"/>
                </types>
                <ctype>
                  <name name="goog.events.ListenableType"/>
                </ctype>
                <description>
                  <prose><p>The node to listen to
    events on.</p></prose>
                </description>
              </param>
              <param name="type">
                <types>
                  <type ref="string"/>
                  <type ref="Array.&lt;string&gt;"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                      </typed>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>Event type or array of event types.</p></prose>
                </description>
              </param>
              <param name="listener">
                <types>
                  <type ref="function"/>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="Function"/>
                    </type>
                    <type>
                      <name name="Object"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>Callback method.</p></prose>
                </description>
              </param>
              <param name="opt_capt" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Fire in capture phase?.</p></prose>
                </description>
              </param>
              <param name="opt_handler" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Element in whose scope to call the listener.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="goog.events.Key"/>
                </types>
                <ctype>
                  <name name="goog.events.Key"/>
                </ctype>
                <description>
                  <prose><p>Unique key for the listener.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.events.dispatchEvent" local-name="dispatchEvent" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Alias for dispatchEvent static function</p></prose>
              </description>
            </method>
            <method name="H.util.events.fireListeners" local-name="fireListeners" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Alias to fire listeners on target</p></prose>
              </description>
            </method>
            <method name="H.util.events.listen" local-name="listen" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Alias for listen static function</p></prose>
              </description>
            </method>
            <method name="H.util.events.unlisten" local-name="unlisten" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Alias for unlisten static function</p></prose>
              </description>
            </method>
            <method name="H.util.events.fireListenerOriginal_" local-name="fireListenerOriginal_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the original H.util.events.fireListener function (taken from goog.events)</p></prose>
              </description>
              <param name="listener">
                <types>
                  <type ref="goog.events.Listener"/>
                </types>
                <ctype>
                  <name name="goog.events.Listener"/>
                </ctype>
                <description>
                  <prose><p>The listener object to call.</p></prose>
                </description>
              </param>
              <param name="eventObject">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>The event object to pass to the listener.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Result of listener.</p></prose>
                </description>
              </returns>
            </method>
          </ns>
          <interface name="H.util.ICancelable" local-name="ICancelable" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>An interface to cancelable requests and actions.</p></prose>
            </description>
            <method name="H.util.ICancelable#cancel" local-name="cancel" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method is used to cancel current action</p></prose>
              </description>
            </method>
          </interface>
          <class name="H.util.AsyncQueue" local-name="AsyncQueue" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>The AsyncQueue represents a queue of task items that are processed
asynchronously. Items can be added and cancelled before they are
processed by the queue.</p>
<p>The AsyncQueue expects the implementation of processing a work item to be
passed as a function. This function MUST call task#done with no arguments
when it finishes a task. If an error occurs during the processing the
task's done function MUST be called with an error message.</p></prose>
              <example>//---------------------------------
//a simple example
//---------------------------------
var additionQueue = new H.util.AsyncQueue(3, function(task, data) {
  //process data
  var operandA = data.operandA,
      operandB = data.operandB,
      result = operandA + operandB;
  //call task.done
  task.done(result);
});

//push tasks with data to process
additionQueue.push({
   operandA: 1,
   operandB: 1
}, function(task, result, opt_error) { console.log(result); });

//---------------------------------
//an example with an error
//---------------------------------
var divisionQueue = new H.util.AsyncQueue(3, function(task, data) {
  //process data
  var operandA = data.operandA,
      operandB = data.operandB;
  if(operandB === 0) {
    //call task.done with an error message
    task.done(null, &apos;Division by zero!&apos;);
  }
  else {
    result = operandA / operandB;
    //call task.done
    task.done(result);
  }
});
//push tasks with data to process
divisionQueue.push({
   operandA: 1,
   operandB: 0
}, function(task, result, opt_error) {
  if(opt_error) console.log(&quot;Oh noes: &quot;, opt_error);
  else console.log(&quot;Yay: &quot;, result);
});</example>
            </description>
            <constructor local-name="AsyncQueue" name="H.util.AsyncQueue">
              <param name="mode">
                <types>
                  <type ref="H.util.AsyncQueue.Mode"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Mode"/>
                </ctype>
                <description>
                  <prose><p>the processing mode for this queue</p></prose>
                </description>
              </param>
              <param name="processFn">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the function implementing the actual processing of the
       task item (it receives the the task item and the task data).</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.util.AsyncQueue#push" local-name="push" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method pushes a task item to the queue for processing.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the task data to be passed to the process function once the taks is being processed.</p></prose>
                </description>
              </param>
              <param name="onDone">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>a function to be called once the task finishes
       processing (an optional error string is passed in case of an error or in case the task was cancelled).</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the new task object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.AsyncQueue#getMode" local-name="getMode" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns the mode object this AsyncQueue uses.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Mode"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Mode"/>
                </ctype>
                <description>
                  <prose><p>the mode used by this AsyncQueue</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.AsyncQueue#processSync" local-name="processSync" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Immediately triggers the queue to process items.</p></prose>
              </description>
            </method>
            <method name="H.util.AsyncQueue#processQueue_" local-name="processQueue_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method takes items from the queue and calls the process function if the task was not already cancelled.</p></prose>
              </description>
            </method>
            <method name="H.util.AsyncQueue#popTask_" local-name="popTask_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function tries to retrieve a previously used task instance from the task
pool. If no free tasks are available a new one is created.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>a free task instance</p></prose>
                </description>
              </returns>
            </method>
            <class name="H.util.AsyncQueue.Task" local-name="Task" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The task represents a cancelable work item managed by the AsyncQueue.</p></prose>
              </description>
              <extends>
                <type ref="H.util.ICancelable"/>
              </extends>
              <constructor local-name="Task" name="H.util.AsyncQueue.Task"/>
              <method name="H.util.AsyncQueue.Task#init_" local-name="init_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method populates a task with new data. As a side-effect the tasks 'isDone_' flag is reset.</p></prose>
                </description>
                <param name="data">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all/>
                  </ctype>
                  <description>
                    <prose><p>The data required by the process function</p></prose>
                  </description>
                </param>
                <param name="onDoneForQueue" nullable="true">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>A callback for the queue to be informed when the task has finished execution.</p></prose>
                  </description>
                </param>
                <param name="onDoneForTask" nullable="true">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func nullable="true">
                      <param>
                        <name name="H.util.AsyncQueue.Task"/>
                      </param>
                      <param>
                        <all/>
                      </param>
                      <param>
                        <unknown/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>A callback executed for each task
       individually when the task finished execution.</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task"/>
                  </ctype>
                  <description>
                    <prose><p>the task instance</p></prose>
                  </description>
                </returns>
              </method>
              <property name="H.util.AsyncQueue.Task#isDone_" local-name="isDone_" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
              <property name="H.util.AsyncQueue.Task#onDoneForQueue_" local-name="onDoneForQueue_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func nullable="true"/>
                </ctype>
              </property>
              <property name="H.util.AsyncQueue.Task#onDoneForTask_" local-name="onDoneForTask_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func nullable="true">
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                  </func>
                </ctype>
              </property>
              <property name="H.util.AsyncQueue.Task#cancel_" local-name="cancel_" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Reset the custom cancel function</p></prose>
                </description>
              </property>
              <method name="H.util.AsyncQueue.Task#done" local-name="done" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method signals that a task is done processing. It must be called from
the process function to inform the task queue that new tasks can be processed.</p></prose>
                </description>
                <param name="result">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all/>
                  </ctype>
                  <description>
                    <prose><p>the result of the process operation on this task</p></prose>
                  </description>
                </param>
                <param name="error">
                  <types>
                    <type ref="?"/>
                  </types>
                  <ctype>
                    <unknown/>
                  </ctype>
                  <description>
                    <prose><p>an optional error message in case the processing of the task encountered an error.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.util.AsyncQueue.Task#cancel" local-name="cancel" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>The default implementation of cancelling a task. It only has an effect if
the task is cancelled before processing. To implement task specific
cancelling use the setCancelFn method on this object once it is being
processed.</p></prose>
                </description>
              </method>
              <method name="H.util.AsyncQueue.Task#setCancelFn" local-name="setCancelFn" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method sets the implementation of a task specific cancel operations to
allow for ad-hoc cancelling during the processing of the task.</p></prose>
                </description>
                <param name="cancelFn">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func/>
                  </ctype>
                  <description>
                    <prose><p>the cancel function</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task"/>
                  </ctype>
                  <description>
                    <prose><p>the instance itself</p></prose>
                  </description>
                </returns>
              </method>
            </class>
            <interface name="H.util.AsyncQueue.Mode" local-name="Mode" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This interface defines a processing mode object which is used by an asynchronous queue to
determine how many items to process in one cycle.</p></prose>
              </description>
              <method name="H.util.AsyncQueue.Mode#next" local-name="next" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Requests the next item from the queued items for processing in the current cycle.</p></prose>
                </description>
                <param name="queuedItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the currently queued tasks</p></prose>
                  </description>
                </param>
                <param name="processingItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the tasks currently processing</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>either the next task for processing or null if no tasks are to be
        processed in this cycle.</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.AsyncQueue.Mode#cycle" local-name="cycle" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Informs the processing mode that a new processing cycle has started.</p></prose>
                </description>
              </method>
            </interface>
          </class>
          <class name="H.util.SequentialQueue" local-name="SequentialQueue" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This class represents a task queue which processes work items in sequential mode. Each
cycle the queue will process as many items as possible within the allotted time frame
(maxTime).</p>
<p>Note: The sequential queue expects each work item to fit into the provided time frame.
Since it runs at least one task each cycle the processing of the task should be small
enough to be completed (optimistically) within a cycle. The queue behaves optimistic
meaning that it will first run a task and check if it has exceeded the time frame.</p></prose>
            </description>
            <extends>
              <type ref="H.util.AsyncQueue"/>
            </extends>
            <constructor local-name="SequentialQueue" name="H.util.SequentialQueue">
              <param name="maxTime">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the maximum time tasks may consume per cycle in milliseconds</p></prose>
                </description>
              </param>
              <param name="processFn">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the function which implements the acutal processing of
 tasks</p></prose>
                </description>
              </param>
            </constructor>
            <class name="H.util.SequentialQueue.Mode" local-name="Mode" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <extends>
                <type ref="H.util.AsyncQueue.Mode"/>
              </extends>
              <constructor local-name="Mode" name="H.util.SequentialQueue.Mode">
                <param name="maxTime">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the maximum time tasks may consume per cycle in milliseconds</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.util.SequentialQueue.Mode#startTime_" local-name="startTime_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.util.SequentialQueue.Mode#setMaxTime" local-name="setMaxTime" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Sets the maximum processing time per cycle in milliseconds</p></prose>
                </description>
                <param name="maxTime">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the maximum time tasks may consume per cycle in milliseconds</p></prose>
                  </description>
                </param>
              </method>
              <property name="H.util.SequentialQueue.Mode#maxTime_" local-name="maxTime_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.util.SequentialQueue.Mode#next" local-name="next" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue.Mode#next">
                <description>
                  <prose><p>Requests the next item from the queued items for processing in the current cycle.</p></prose>
                </description>
                <param name="queuedItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the currently queued tasks</p></prose>
                  </description>
                </param>
                <param name="processingItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the tasks currently processing</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>either the next task for processing or null if no tasks are to be
        processed in this cycle.</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.SequentialQueue.Mode#cycle" local-name="cycle" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue.Mode#cycle">
                <description>
                  <prose><p>Informs the processing mode that a new processing cycle has started.</p></prose>
                </description>
              </method>
            </class>
            <method name="H.util.SequentialQueue#push" local-name="push" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.AsyncQueue#push">
              <description>
                <prose><p>This method pushes a task item to the queue for processing.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the task data to be passed to the process function once the taks is being processed.</p></prose>
                </description>
              </param>
              <param name="onDone">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>a function to be called once the task finishes
       processing (an optional error string is passed in case of an error or in case the task was cancelled).</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the new task object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.SequentialQueue#getMode" local-name="getMode" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#getMode">
              <description>
                <prose><p>Returns the mode object this AsyncQueue uses.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Mode"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Mode"/>
                </ctype>
                <description>
                  <prose><p>the mode used by this AsyncQueue</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.SequentialQueue#processSync" local-name="processSync" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#processSync">
              <description>
                <prose><p>Immediately triggers the queue to process items.</p></prose>
              </description>
            </method>
            <method name="H.util.SequentialQueue#processQueue_" local-name="processQueue_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#processQueue_">
              <description>
                <prose><p>This method takes items from the queue and calls the process function if the task was not already cancelled.</p></prose>
              </description>
            </method>
            <method name="H.util.SequentialQueue#popTask_" local-name="popTask_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#popTask_">
              <description>
                <prose><p>This function tries to retrieve a previously used task instance from the task
pool. If no free tasks are available a new one is created.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>a free task instance</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <class name="H.util.Cache" local-name="Cache" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>The cache represents a in-memory LRU-cache with a fixed size. It stores any
data that is added until the cache's content exceeds a maximum size. Once
the size of all content elements exceeds the maximum size the cache will
drop the least recently retrieved elements until the size of the cache is
within the bounds of its maximum size. Data elements are always associated
with an identifier that allow to retrieve them at a later stage and their
content size.</p></prose>
            </description>
            <constructor local-name="Cache" name="H.util.Cache">
              <param name="maxSize">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the maximum size of the cache</p></prose>
                </description>
              </param>
              <param name="opt_onDrop" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="string"/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>A callback to be invoked when
    a data element is dropped from the cache</p></prose>
                </description>
              </param>
              <param name="opt_filter" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <func>
                        <param>
                          <name name="string"/>
                        </param>
                        <param>
                          <unknown/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="boolean"/>
                        </return>
                      </func>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>A function to filter
    data elements that are not to be cached</p></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="Error"/>
                </types>
                <ctype>
                  <name name="Error"/>
                </ctype>
                <description>
                  <prose>The constructor throws an error if the 'maxSize' argument is not a positive number, the opt_onDrop
        argument was set but is not a function or if the opt_filter argument was set but is not a function.</prose>
                </description>
              </exception>
            </constructor>
            <method name="H.util.Cache#add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds a data element to the cache and marks it as most recently
used. The data element must have an identifier that allows for retrieving
the object at a later stage and a size which will count towards the cache's
maximum size.</p></prose>
              </description>
              <param name="id">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The identifier of this data element, the value is converted to a string.</p></prose>
                </description>
              </param>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the actual data to be stored</p></prose>
                </description>
              </param>
              <param name="size">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the size of the data element</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether the data was added</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="Error"/>
                </types>
                <ctype>
                  <name name="Error"/>
                </ctype>
                <description>
                  <prose>Throws an error if the 'size' argument is not a positive number.</prose>
                </description>
              </exception>
            </method>
            <method name="H.util.Cache#get" local-name="get" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method retrieves an element from the cache and marks it as 'most recently used'.</p></prose>
              </description>
              <param name="id">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the ID of the data element to be retrieved.</p></prose>
                </description>
              </param>
              <param name="opt_noUpdate" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>and optional flag to indicate that the
  retrieved object should not be marked as 'most recently used'.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>returns the data associated with the ID or undefined if the
 data element is not currently in the cache.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#drop" local-name="drop" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method drops an item from the cache explicitly.</p></prose>
              </description>
              <param name="id">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the id of the item to drop</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.Cache#forEach" local-name="forEach" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method will execute the provided callback function on each of the
cache's entries. If the optional match predicate is passed to this method
the callback will only be executed on those entries for which the predicated
returns true.</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="string"/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the callback to be invoked for
 each entry</p></prose>
                </description>
              </param>
              <param name="opt_ctx" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional context object to be used as this within
 the callback</p></prose>
                </description>
              </param>
              <param name="opt_matcher" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <func>
                        <param>
                          <name name="string"/>
                        </param>
                        <param>
                          <unknown/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="boolean"/>
                        </return>
                      </func>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>an optional match
 predicate to customize on which entries the callback will be called</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.Cache#removeAll" local-name="removeAll" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes all data elements from the cache. If the optional match predicate is
passed to this method only those data elements will be removed for which the
predicate return true.</p></prose>
              </description>
              <param name="opt_matcher" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <func>
                        <param>
                          <name name="string"/>
                        </param>
                        <param>
                          <unknown/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="boolean"/>
                        </return>
                      </func>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>an optional
 function that receives an entries id, data and size and may return true
 or false to either remove it or leave the entry in the cache respectively</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.Cache#setMaxSize" local-name="setMaxSize" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets this cache's maximum size to a new size. If the cache's contents
exceed the new size, least recently used data elements will be dropped.</p></prose>
              </description>
              <param name="maxSize">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the new maximum size of this cache.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.Cache"/>
                </types>
                <ctype>
                  <name name="H.util.Cache"/>
                </ctype>
                <description>
                  <prose><p>this cache</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#getMaxSize" local-name="getMaxSize" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the maximum size of this cache.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the maximum size of the cache</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#getCurrentSize" local-name="getCurrentSize" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the current size of this cache.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the current size of the cache</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#moveToLRU_" local-name="moveToLRU_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Marks an entry as 'most recently used'.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the entry to be marked</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the entry that was marked</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#adjustToMaxSize_" local-name="adjustToMaxSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method drops entries from this cache until the size is within the boundaries
of this cache's maximum size.</p></prose>
              </description>
            </method>
            <method name="H.util.Cache#insertBefore_" local-name="insertBefore_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Inserts an entry into the cache by prepending it to the specified next
entry.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the entry to be inserted</p></prose>
                </description>
              </param>
              <param name="next" nullable="true">
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the entry before which the new entry
  is to be inserted</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the inserted entry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.Cache#remove_" local-name="remove_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Removes an entry from the cache.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the entry to be removed</p></prose>
                </description>
              </param>
              <param name="opt_isCacheDrop" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether onDrop should be called</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
                <description>
                  <prose><p>the removed entry</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.util.Cache.Entry_" local-name="Entry_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This object definition represents a data element in the cache.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="id"/>
                    </key>
                    <value>
                      <name name="string"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="data"/>
                    </key>
                    <value>
                      <all/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="size"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="prev_"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.util.Cache.Entry_"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="next_"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.util.Cache.Entry_"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.util.Cache.Entry_#id" local-name="id" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the ID of this data element (note, the data type will be converted to a string)</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.util.Cache.Entry_#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the data contained within this element</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.util.Cache.Entry_#size" local-name="size" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the size of the data within this element</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.util.Cache.Entry_#prev_" local-name="prev_" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the elements predecessor in the linked list</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
              </property>
              <property name="H.util.Cache.Entry_#next_" local-name="next_" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the elements successor in the linked list</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache.Entry_"/>
                </types>
                <ctype>
                  <name name="H.util.Cache.Entry_"/>
                </ctype>
              </property>
            </typedef>
          </class>
          <class name="H.util.ParallelQueue" local-name="ParallelQueue" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This class represents a task queue which processes the alloted number (maxParallel) work items in parallel.
The parallel queue can process long running tasks and will defer processing of queued items until a slot
is freed by an item finishing.</p>
<p>Note: This class DOES NOT implement multi-threading. Rather it can be used for asynchronous tasks like
image loading which are done off-thread by the browser. For synchronous processing of work items consider
using the <link ref="H.util.SequentialQueue" /></p></prose>
            </description>
            <extends>
              <type ref="H.util.AsyncQueue"/>
            </extends>
            <constructor local-name="ParallelQueue" name="H.util.ParallelQueue">
              <param name="maxParallel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the maximum number of tasks to process in parallel</p></prose>
                </description>
              </param>
              <param name="processFn">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the function which implements the acutal processing of
 tasks</p></prose>
                </description>
              </param>
            </constructor>
            <class name="H.util.ParallelQueue.Mode" local-name="Mode" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <extends>
                <type ref="H.util.AsyncQueue.Mode"/>
              </extends>
              <constructor local-name="Mode" name="H.util.ParallelQueue.Mode">
                <param name="maxParallel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the maximum number of parallel tasks to process per cycle</p></prose>
                  </description>
                </param>
              </constructor>
              <method name="H.util.ParallelQueue.Mode#next" local-name="next" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue.Mode#next">
                <description>
                  <prose><p>Requests the next item from the queued items for processing in the current cycle.</p></prose>
                </description>
                <param name="queuedItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the currently queued tasks</p></prose>
                  </description>
                </param>
                <param name="processingItems">
                  <types>
                    <type ref="Array.&lt;H.util.AsyncQueue.Task&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.util.AsyncQueue.Task"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the tasks currently processing</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>either the next task for processing or null if no tasks are to be
        processed in this cycle.</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.ParallelQueue.Mode#cycle" local-name="cycle" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue.Mode#cycle">
                <description>
                  <prose><p>Informs the processing mode that a new processing cycle has started.</p></prose>
                </description>
              </method>
            </class>
            <method name="H.util.ParallelQueue#push" local-name="push" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.AsyncQueue#push">
              <description>
                <prose><p>This method pushes a task item to the queue for processing.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the task data to be passed to the process function once the taks is being processed.</p></prose>
                </description>
              </param>
              <param name="onDone">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.util.AsyncQueue.Task"/>
                    </param>
                    <param>
                      <all/>
                    </param>
                    <param>
                      <unknown/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>a function to be called once the task finishes
       processing (an optional error string is passed in case of an error or in case the task was cancelled).</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the new task object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.ParallelQueue#getMode" local-name="getMode" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#getMode">
              <description>
                <prose><p>Returns the mode object this AsyncQueue uses.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Mode"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Mode"/>
                </ctype>
                <description>
                  <prose><p>the mode used by this AsyncQueue</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.ParallelQueue#processSync" local-name="processSync" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#processSync">
              <description>
                <prose><p>Immediately triggers the queue to process items.</p></prose>
              </description>
            </method>
            <method name="H.util.ParallelQueue#processQueue_" local-name="processQueue_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#processQueue_">
              <description>
                <prose><p>This method takes items from the queue and calls the process function if the task was not already cancelled.</p></prose>
              </description>
            </method>
            <method name="H.util.ParallelQueue#popTask_" local-name="popTask_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.AsyncQueue#popTask_">
              <description>
                <prose><p>This function tries to retrieve a previously used task instance from the task
pool. If no free tasks are available a new one is created.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>a free task instance</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <ns name="H.util.animation" local-name="animation" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This namespace holds utility functionality for animations</p></prose>
            </description>
            <ns name="H.util.animation.ease" local-name="ease" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This mamespace contains easing functions used for Animation class.</p></prose>
              </description>
              <method name="H.util.animation.ease.LINEAR" local-name="LINEAR" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This function defines linear ease.</p></prose>
                </description>
                <param name="val">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>A value in range [0..1] to translate</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the translated value</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.animation.ease.EASE_IN_QUAD" local-name="EASE_IN_QUAD" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This function defines quadratic ease in.</p></prose>
                </description>
                <param name="val">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>A value in range [0..1] to translate</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the translated value</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.animation.ease.EASE_OUT_QUAD" local-name="EASE_OUT_QUAD" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This function defines quadratic ease out.</p></prose>
                </description>
                <param name="val">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>A value in range [0..1] to translate</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the translated value</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.animation.ease.EASE_IN_OUT_QUINT" local-name="EASE_IN_OUT_QUINT" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This function defines ease in and out with slope.</p></prose>
                </description>
                <param name="val">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>A value in range [0..1] to translate</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the translated value</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.util.animation.ease.EASE_OUT_CIRC" local-name="EASE_OUT_CIRC" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This function defines ease out with circ function</p></prose>
                </description>
                <param name="val">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>Parameter between 0..1
which is translated to output number between 0..1 regarding transforming function.</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>0..1</p></prose>
                  </description>
                </returns>
              </method>
            </ns>
            <class name="H.util.animation.Animation" local-name="Animation" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This class represents animation. It defines animation by the transform function
which is fired on every requested animation frame, duration, and the easing function
(optionally). Transform function on every animation frame receives as arguments:
- progress - value in range of 0..1 indicating the progress of the animation where 1 is finished
- tileElapsed - time in milisecond measured from the start of the animation
- frameTime - time in miliseconds elapsed from the last frame
- tiemStamp - current timestamp</p></prose>
              </description>
              <constructor local-name="Animation" name="H.util.animation.Animation">
                <param name="transform">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which makes transformation during single fram</p></prose>
                  </description>
                </param>
                <param name="duration">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>duration in miliseconds</p></prose>
                  </description>
                </param>
                <param name="opt_onAnimationStop" optional="true">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>function which is called when animation is ended</p></prose>
                  </description>
                </param>
                <param name="opt_ease" optional="true">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func optional="true">
                      <param>
                        <name name="number"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>easing function which modifies the progress value</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.util.animation.Animation#duration_" local-name="duration_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Stores duration in milisecond for the animation object</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.util.animation.Animation#onAnimationStop_" local-name="onAnimationStop_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Function which is called when animation finishes (unless it is suprpressed by the stop)</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <func nullable="true">
                        <param>
                          <name name="H.util.animation.Animation"/>
                        </param>
                      </func>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.util.animation.Animation#ease_" local-name="ease_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Function which is used to ease animation</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <func nullable="true">
                        <param>
                          <name name="number"/>
                        </param>
                      </func>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.util.animation.Animation#isRunning_" local-name="isRunning_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Flag which indicates if the animation is running</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
              <property name="H.util.animation.Animation#transform_" local-name="transform_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Stores transform function which is the function which is called every frame</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                  </func>
                </ctype>
              </property>
              <method name="H.util.animation.Animation#start" local-name="start" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method starts the animation.</p></prose>
                </description>
              </method>
              <method name="H.util.animation.Animation#stop" local-name="stop" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method stops animation. Method can also surpess the
animation end callback.</p></prose>
                </description>
                <param name="opt_suppressCallback" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true animation stop callback is not fired</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.util.animation.Animation#isRunning" local-name="isRunning" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method indicates if the animation is currently running.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
            </class>
          </ns>
          <class name="H.util.OList" local-name="OList" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents an list of ordered entries which dispatches events
when the list is modified.</p></prose>
            </description>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <constructor local-name="OList" name="H.util.OList"/>
            <event name="H.util.OList#event:add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when an entry was added to the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.util.OList#event:remove" local-name="remove" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when an entry was removed from the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.util.OList#event:set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when an entry was set in the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.util.OList#event:move" local-name="move" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when an entry was moved within the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <property name="H.util.OList#entries_" local-name="entries_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The internal list of all entries</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;*&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <all/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.util.OList#adjustIndex_" local-name="adjustIndex_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Helper method to adjust a given index</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The index to adjust</p></prose>
                </description>
              </param>
              <param name="setToLength">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>To signal that the index value should be the list length</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the adjusted index</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>OutOfRangeError if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.util.OList#add_" local-name="add_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Internal method to insert an entry at a given index.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry to add</p></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index where the entry should be inserted.
   The caller must validate that the idx is &gt;=0 and &lt;=length beforehand!</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>To signal that NO event should be dispatched</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method inserts an entry to the list. Optionally it can
place new entry at provided index.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry to insert</p></prose>
                </description>
              </param>
              <param name="opt_idx" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The index where the new entry should be inserted;
   if omitted or greater then the current size of the list,
   the entry is added at the end of the list;
   a negative index is treated as being relative from the end of the list</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#remove_" local-name="remove_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method removes an entry from the list at the given index
The caller must validate that the idx to be &gt;=0 and &lt;length beforehand!
index of the entry to remove.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry which should be removed</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>To signal that NO event should be dispatched</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>the removed entry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#removeAt" local-name="removeAt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes an entry by a given index from the list.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry which should be removed;
   a negative index is treated as being relative from the end of the list</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The removed entry</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>IllegalArgument if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.util.OList#remove" local-name="remove" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes the the first entry which is identical with the given entry.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry to remove</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>signals if the entry could be found in the list and is removed</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method replaces an entry at the given index with the given entry.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry which should be replaced;
   a negative index is treated as being relative from the end of the list</p></prose>
                </description>
              </param>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry which replaces the existing one</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The replaced entry</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>IllegalArgument if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.util.OList#indexOf" local-name="indexOf" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method retrieves the index of the first object in this list that is identical with the
object supplied by the caller.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry for which to return the index.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the first matching entry in this list
   or -1 if the entry provided by the caller is not found in the list</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#get" local-name="get" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the entry at the specified index.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry to get
   a negative index is treated as being relative from the end of the list</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The element at the given index</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>OutOfRangeError if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.util.OList#getLength" local-name="getLength" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the length of the list.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#asArray" local-name="asArray" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns all list's entries as an array.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;*&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <all/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The list as an array</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#flush" local-name="flush" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes all entries from the list.</p></prose>
              </description>
            </method>
            <enum name="H.util.OList#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Events fired by OList.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.util.OList#EventType.ADD" local-name="ADD">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.OList#EventType.REMOVE" local-name="REMOVE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.OList#EventType.SET" local-name="SET">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.util.OList#EventType.MOVE" local-name="MOVE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <class name="H.util.OList.Event" local-name="Event" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The event class for events that are dispatched by OList</p></prose>
              </description>
              <extends>
                <type ref="H.util.Event"/>
              </extends>
              <constructor local-name="Event" name="H.util.OList.Event">
                <param name="list">
                  <types>
                    <type ref="H.util.OList"/>
                  </types>
                  <ctype>
                    <name name="H.util.OList"/>
                  </ctype>
                  <description>
                    <prose><p>The OList instance which is emitting the event</p></prose>
                  </description>
                </param>
                <param name="type">
                  <types>
                    <type ref="H.util.OList.prototype.EventType"/>
                  </types>
                  <ctype>
                    <name name="H.util.OList.prototype.EventType"/>
                  </ctype>
                  <description>
                    <prose><p>The type of the event</p></prose>
                  </description>
                </param>
                <param name="idx">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The affected index within this list</p></prose>
                  </description>
                </param>
                <param name="added" nullable="true">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The value of the entry which was added or set</p></prose>
                  </description>
                </param>
                <param name="removed" nullable="true">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The value of the entry which was removed or replaced</p></prose>
                  </description>
                </param>
                <param name="moved" nullable="true">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>The value of the entry which was moved</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.util.OList.Event#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#target">
                <description>
                  <prose><p>Object which triggered the event</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.util.OList.Event#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#currentTarget">
                <description>
                  <prose><p>Object which has listener attached</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.util.OList.Event#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#type">
                <description>
                  <prose><p>Name of the dispatched event</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.util.OList.Event#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#defaultPrevented">
                <description>
                  <prose><p>Indicates if preventDefault was called on the current event</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
              <method name="H.util.OList.Event#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#preventDefault">
                <description>
                  <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
                </description>
              </method>
              <method name="H.util.OList.Event#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Event#stopPropagation">
                <description>
                  <prose><p>Stops propagation for current event.</p></prose>
                </description>
              </method>
            </class>
            <method name="H.util.OList#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.util.OList#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.util.OList#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.util.OList#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
        </ns>
        <ns name="H.math" local-name="math" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This namespace contains mathematical constants, aliased Math functions
and math helper functions.</p></prose>
          </description>
          <typedef name="H.math.BitMask" local-name="BitMask" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>A signed 32 bit integer (JS restriction) where bit operator can be applied to.
The range is [-2,147,483,648 ... 2,147,483,647] or [-2^31 ... 2^31 − 1]</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </typedef>
          <property name="H.math.MIN_IDX" local-name="MIN_IDX" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The minimal index to use for increasing indeces. In DEBUG case the value is 0 (because it's more readable),
otherwise -2^53, the minimal number which can be stored loss less in IEEE-754 (64 bit float)</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.math.modulo" local-name="modulo" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The % operator in JavaScript returns the remainder of dividend / divisor, but differs from
some other languages in that the result will have the same sign as the
dividend. For example, -1 % 8 == -1, whereas in some other languages
(such as Python) the result would be 7. This function emulates the more
correct modulo behavior, which is useful for certain applications such as
calculating an offset index in a circular list.</p></prose>
            </description>
            <param name="dividend">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The dividend.</p></prose>
              </description>
            </param>
            <param name="divisor">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The divisor.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.math.clamp" local-name="clamp" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Function returns the value narrowed to range</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="min">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="max">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.math.match" local-name="match" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Detects if a is equal be considering the given tolerance.</p></prose>
            </description>
            <param name="a">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The value to compare to b.</p></prose>
              </description>
            </param>
            <param name="b">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The value to compare to a.</p></prose>
              </description>
            </param>
            <param name="tolerance">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The value to compare to a.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>true, if a matches b considering the given tolerance.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.math.inRange" local-name="inRange" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Checks whether a value is in range.
It is checking both cases (extreme1 &lt; extreme2 and extreme1 &gt;= extreme2).
Moreover the range is enlarged by the given tolerance</p></prose>
            </description>
            <param name="value">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The value which will be compared to the other ones.</p></prose>
              </description>
            </param>
            <param name="extreme1">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The first extreme value of the range.</p></prose>
              </description>
            </param>
            <param name="extreme2">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The second extreme value of the range.</p></prose>
              </description>
            </param>
            <param name="tolerance">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The value by which the range will be enlarged.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>true, if a matches b considering the given tolerance.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.math.getVectorDistance" local-name="getVectorDistance" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns the distance between the given point and given line (vecor).
The algorithm is based on vector calculation, working plane, vector cross product and so on</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>X value of the point.</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>Y value of the point.</p></prose>
              </description>
            </param>
            <param name="ax">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>X value of the first vector point.</p></prose>
              </description>
            </param>
            <param name="ay">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>Y value of the first vector point.</p></prose>
              </description>
            </param>
            <param name="bx">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>X value of the second vector point.</p></prose>
              </description>
            </param>
            <param name="by">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>Y value of the second vector point.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>true, if a matches b considering the given tolerance.</p></prose>
              </description>
            </returns>
          </method>
          <enum name="H.math.CoverType" local-name="CoverType" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Enumeration is used by isCoveredBy and signifies which part of the shape covers point.</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
            <value name="H.math.CoverType.NONE" local-name="NONE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.math.CoverType.VERTEX" local-name="VERTEX">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.math.CoverType.EDGE" local-name="EDGE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.math.CoverType.SURFACE" local-name="SURFACE">
              <description>
                <prose></prose>
              </description>
            </value>
          </enum>
          <method name="H.math.sign" local-name="sign" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Returns sign of the number or 0 if 0</p></prose>
            </description>
            <param name="num">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>1, -1 or 0</p></prose>
              </description>
            </returns>
          </method>
          <interface name="H.math.IPoint" local-name="IPoint" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>An interface for a 2-dimensional point consisting a x and y coordinate.</p></prose>
            </description>
            <property name="H.math.IPoint#x" local-name="x" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The point's coordinate on X-axis.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.math.IPoint#y" local-name="y" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The point's coordinate on Y-axis.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
          </interface>
          <class name="H.math.Point" local-name="Point" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Class represents a 2-dimensional point, defined by x and y coordinates.</p></prose>
            </description>
            <extends>
              <type ref="H.math.IPoint"/>
            </extends>
            <constructor local-name="Point" name="H.math.Point">
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>coordinate on x-axis</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>coordinate on y-axis</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.math.Point#set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Sets the x and y coordinate of this point</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>coordinate on x-axis</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>coordinate on y-axis</p></prose>
                </description>
              </param>
            </method>
            <method name="H.math.Point#clone" local-name="clone" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates a copy of the current point.</p></prose>
              </description>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>An optional point to store the copied values</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>The clone of the point</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds given point coordinates to the current one.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The point to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after adding</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#sub" local-name="sub" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method substract given point coordinates from the current point.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The point to subtract</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after substracting</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#scale" local-name="scale" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method scales the current point coordinates by the given factor(s).</p></prose>
              </description>
              <param name="factor">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>multiplication factor</p></prose>
                </description>
              </param>
              <param name="opt_factorY" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>If omitted, the factor argument is used</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after scaling</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#round" local-name="round" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method rounds the x and y coordinates of the point.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after rounding</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#floor" local-name="floor" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Rounds the x and y coordinates to the next smaller integer values.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after flooring</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#ceil" local-name="ceil" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Rounds the x and y coordinates to the next greater integer values.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>the point itself after ceiling</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#equals" local-name="equals" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method compares current point coordinates with the supplied
point coordinates.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The point to compare to.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>True if the points are equal</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Point#distance" local-name="distance" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method calculates the distance to a point supplied by the caller.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.math.Point#x" local-name="x" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.math.IPoint#x">
              <description>
                <prose><p>The point's coordinate on X-axis.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.math.Point#y" local-name="y" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.math.IPoint#y">
              <description>
                <prose><p>The point's coordinate on Y-axis.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
          </class>
          <property name="H.math.clipping" local-name="clipping" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This namespace contains utility functions for clipping geometry.</p></prose>
            </description>
            <method name="H.math.clipping.clipStrips" local-name="clipStrips" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function clips all given strips to provided rectangle. Rectangle
is being specified by top, left, right, bottom values.</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The left boundary</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The top boundary</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The right boundary</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bottom boundary</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>in the format [Point[], Point[], ...]</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.clipLine_" local-name="clipLine_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Clips a line given by two points against a clip rectangle</p></prose>
              </description>
              <param name="point1">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>First point of the line.</p></prose>
                </description>
              </param>
              <param name="point2">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>Second point of the line.</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Top component of the clip rectangle.</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Left component of the clip rectangle.</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Right component of the clip rectangle.</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Bottom component of the clip rectangle.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The resulting line as a list of 2 points or undefined
     if the line has been clipped away completely.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.clipPolygon" local-name="clipPolygon" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function clips two polygons in the given clipping mode</p></prose>
              </description>
              <param name="clippingPolygon">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of points that
 defines the clipping polygon.</p></prose>
                </description>
              </param>
              <param name="polygonToClip">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>A list of points that
 defines the polygon to clip.</p></prose>
                </description>
              </param>
              <param name="opt_mode" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Clipping mode, default is intersection.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="Object"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>Start point of the clipped polygon, each point
 has references to the previous and following point. The point can also have
 a &quot;nextPoly&quot; reference to the first point of the next sub-polygon.</p>
<p> If there is no intersection between the given polygons it returns undefined.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.getClippingMode_" local-name="getClippingMode_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Function returns  internal representation for named mode.</p></prose>
              </description>
              <param name="opt_mode" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Named mode</p>
<ul>
<li>INTERSECTION=0,</li>
<li>UNION=1,</li>
<li>COMPONENT_SHAPE=2,</li>
<li>COMPONENT_WINDOW=3</li>
</ul></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>with two parameters pS and pC regarding mode number</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.create_" local-name="create_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Create new point with all attributes needed for cliping algo.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>X-coordinate</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Y-coordinate</p></prose>
                </description>
              </param>
              <param name="next">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Next point (descendant) in the shape</p></prose>
                </description>
              </param>
              <param name="prev">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Previous point (predecessor) int the shape</p></prose>
                </description>
              </param>
              <param name="nextPoly">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Reference to starting point of next polygon, used
 when we returning result of clipping</p></prose>
                </description>
              </param>
              <param name="neighbor">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Reference to neighbor same point in second shape
 (when shapes intersect we add to them points with same coords and they are
 linked with this attribute to each other)</p></prose>
                </description>
              </param>
              <param name="intersect">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Marks node if shapes intersect in this point.</p></prose>
                </description>
              </param>
              <param name="entry">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Marks node if the node is starting point of resulting
 shape</p></prose>
                </description>
              </param>
              <param name="visited">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Marks node if node was visited by clipping algo</p></prose>
                </description>
              </param>
              <param name="alpha">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Float number which signals percentage from next leg
 where will be next intersecting point</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>returns a clipping node</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.nextNode_" local-name="nextNode_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Return next node in shape.</p></prose>
              </description>
              <param name="p">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Node from which we traverse the shape.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Next node</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.lastNode_" local-name="lastNode_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Return last node in shape.</p></prose>
              </description>
              <param name="p">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Node of the shape</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Last node</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.firstNode_" local-name="firstNode_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Return first node in shape.</p></prose>
              </description>
              <param name="p">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Node of the shape</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First node</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.circle_" local-name="circle_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>For the given first node of shape find out last one and interconnect them. We get circular double linked list.</p></prose>
              </description>
              <param name="p">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First node of shape</p></prose>
                </description>
              </param>
            </method>
            <method name="H.math.clipping.dist_" local-name="dist_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compute distance between two pixel based coordinates.</p></prose>
              </description>
              <param name="x1">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>X component of first coordinate</p></prose>
                </description>
              </param>
              <param name="y1">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Y component of first coordinate</p></prose>
                </description>
              </param>
              <param name="x2">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>X component of second coordinate</p></prose>
                </description>
              </param>
              <param name="y2">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Y component of second coordinate</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Computed distance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.computeIntersect_" local-name="computeIntersect_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compute intersection point of two legs. the result is stored in the given params object.
which are percentage of original legs length (computed from first point).</p></prose>
              </description>
              <param name="p1">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Beginning point of leg in first shape</p></prose>
                </description>
              </param>
              <param name="p2">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Ending point of leg in first shape</p></prose>
                </description>
              </param>
              <param name="q1">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Beginning point of leg in second shape</p></prose>
                </description>
              </param>
              <param name="q2">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Ending point of leg in second shape</p></prose>
                </description>
              </param>
              <param name="params">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Parameters object which will be filled if legs are intersecting</p></prose>
                </description>
              </param>
              <param name="tp">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.math.clipping.randomDeviation_" local-name="randomDeviation_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Creates a random deviation in range +/- 0.00005</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.intersect_" local-name="intersect_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compute if two legs of two shapes are intersecting and if so it fill up params object with coordinate
and alpha values which are percentage of original legs length (computed from first point).</p></prose>
              </description>
              <param name="p1">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Beginning point of leg in first shape</p></prose>
                </description>
              </param>
              <param name="p2">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Ending point of leg in first shape</p></prose>
                </description>
              </param>
              <param name="q1">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Beginning point of leg in second shape</p></prose>
                </description>
              </param>
              <param name="q2">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Ending point of leg in second shape</p></prose>
                </description>
              </param>
              <param name="params">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Parameters object which will be filled if legs are intersecting</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>1 if legs are intersecting, 0 otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.test_" local-name="test_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compute how many times shape goes around the second one???</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First point of first shape</p></prose>
                </description>
              </param>
              <param name="p">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First point of second shape</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.clipping.insert_" local-name="insert_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Insert point between two given points.</p></prose>
              </description>
              <param name="ins">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Point which we want to insert</p></prose>
                </description>
              </param>
              <param name="first">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First point in between we would like to insert new one.</p></prose>
                </description>
              </param>
              <param name="last">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>Second point in between we would like to insert new one.</p></prose>
                </description>
              </param>
            </method>
            <method name="H.math.clipping.prepareList_" local-name="prepareList_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Prepare point list for clipping algo. It accepts array of Points and return first node of double linked list.</p></prose>
              </description>
              <param name="a_s">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of Points of the shape</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>First node of double linked list of nodes</p></prose>
                </description>
              </returns>
            </method>
          </property>
          <method name="H.math.simplifyDP" local-name="simplifyDP" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A Douglas-Peucker simplification algorithm for 2D points</p></prose>
            </description>
            <param name="points">
              <types>
                <type ref="Array.&lt;H.math.Point&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.math.Point"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>The list of points to simplify</p></prose>
              </description>
            </param>
            <param name="epsilon">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>The tolerance values</p></prose>
              </description>
            </param>
            <param name="opt_minIterations" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The minimum number of iterations for the simplification</p></prose>
              </description>
            </param>
            <param name="opt_begin" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The start index in the points list to start from</p></prose>
              </description>
            </param>
            <param name="opt_end" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The end index in the points list to end at</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Array.&lt;H.math.Point&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.math.Point"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>The simplified points</p></prose>
              </description>
            </returns>
          </method>
          <class name="H.math.Rect" local-name="Rect" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Class defines a rectangle in 2-dimensional geometric space. It is used to represent the area in projected space.</p></prose>
            </description>
            <constructor local-name="Rect" name="H.math.Rect">
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's left edge x value</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's top edge y value</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's right edge x value</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's bottom edge y value</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.math.Rect#set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set all values of the rectangle's edges</p></prose>
              </description>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's left edge x value</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's top edge y value</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's right edge x value</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rectangle's bottom edge y value</p></prose>
                </description>
              </param>
            </method>
            <property name="H.math.Rect#topLeft_" local-name="topLeft_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.math.Point"/>
              </types>
              <ctype>
                <name name="H.math.Point"/>
              </ctype>
            </property>
            <method name="H.math.Rect#getTopLeft" local-name="getTopLeft" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the rectangle's top-left vertex</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.math.Rect#bottomRight_" local-name="bottomRight_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.math.Point"/>
              </types>
              <ctype>
                <name name="H.math.Point"/>
              </ctype>
            </property>
            <method name="H.math.Rect#getBottomRight" local-name="getBottomRight" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the rectangle's bottom-right vertex</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Rect#containsXY" local-name="containsXY" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Method checks if provided coordinates lie within rectangle.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>x-coordinate to check</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>y-coordinate to check</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>returns true if coordinates lie within rectangle, if parameters are isNaN returns false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Rect.fromPoints" local-name="fromPoints" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To create a rectangle from a top-left and bottom-right point pair.</p></prose>
              </description>
              <param name="topLeft">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the top-left vertex of the rectanle</p></prose>
                </description>
              </param>
              <param name="bottomRight">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the bottom-right vertex of the rectanle</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Rect"/>
                </types>
                <ctype>
                  <name name="H.math.Rect"/>
                </ctype>
                <description>
                  <prose><p>returns the rectangular area defined by the top-left and bottom-right vertices</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Rect#clone" local-name="clone" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To clone a rectangle</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Rect"/>
                </types>
                <ctype>
                  <name name="H.math.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </class>
          <interface name="H.math.ISize" local-name="ISize" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>An interface for a 2-dimensional size consisting a with and a height.</p></prose>
            </description>
            <property name="H.math.ISize#w" local-name="w" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The size's width.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.math.ISize#h" local-name="h" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The size's height.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
          </interface>
          <class name="H.math.Size" local-name="Size" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Class for representing sizes consisting of a width and height.</p></prose>
            </description>
            <extends>
              <type ref="H.math.ISize"/>
            </extends>
            <constructor local-name="Size" name="H.math.Size">
              <param name="width">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Width.</p></prose>
                </description>
              </param>
              <param name="height">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>Height.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.math.Size#w" local-name="w" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The size's width value</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.math.Size#h" local-name="h" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The size's height value</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
          </class>
          <class name="H.math.Vector" local-name="Vector" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Class represents a vector in 2-dimensional space. Vector is
defined by two properties x and y.</p></prose>
            </description>
            <constructor local-name="Vector" name="H.math.Vector">
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>delta on x-axis</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>delta on y-axis</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.math.Vector#x" local-name="x" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.math.Vector#y" local-name="y" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.math.Vector#add" local-name="add" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method adds another vector to the current one.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#subtract" local-name="subtract" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method substracts another vector from current one.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#dot" local-name="dot" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method creates the 'dot' product of the given vector and the current one.
provided by the caller.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#multiply" local-name="multiply" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method creates a vector that represents the product of the given vector and
the one provided by the caller.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#rescale" local-name="rescale" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method multplies all vector values by given scale.</p></prose>
              </description>
              <param name="scale">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#magnitude" local-name="magnitude" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method returns the length of the vector (magnitude).</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.math.Vector#normalize" local-name="normalize" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This function returns normalized vector. Normalized vector is
a vector which has a magnitude equal to 1.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Vector"/>
                </types>
                <ctype>
                  <name name="H.math.Vector"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </class>
        </ns>
        <ns name="H.geo" local-name="geo" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This namespace contains functionality for geo-computation.</p></prose>
          </description>
          <typedef name="H.geo.Latitude" local-name="Latitude" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>A geographic coordinate that specifies the north-south position of a point on the Earth's surface in the range
from -90 to + 90 degrees, inclusive.</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </typedef>
          <typedef name="H.geo.Longitude" local-name="Longitude" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>A Geographic coordinate that specifies the east-west position of a point on the Earth's surface in the range
from -180 to 180 degrees, inclusive.</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </typedef>
          <typedef name="H.geo.Altitude" local-name="Altitude" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>A Geographic coordinate that specifies the height of a point in meters. A value of <code>undefined</code> is
treated as <code>0</code>.</p></prose>
            </description>
            <types>
              <type ref="number"/>
              <type ref="undefined"/>
            </types>
            <ctype>
              <union>
                <type>
                  <name name="number"/>
                </type>
                <type>
                  <undefined/>
                </type>
              </union>
            </ctype>
          </typedef>
          <property name="H.geo.WGS84_MEAN_RADIUS" local-name="WGS84_MEAN_RADIUS" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The geometric mean radius of WGS84 is 6,371,000.7900 meters
Additional info: It's the volume equivalent radius, combining the equatorial radius (6,378,137 m)
and the polar radius (6,356,752.3142 m)</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.geo.WGS84_MEAN_CIRCUMFERENCE" local-name="WGS84_MEAN_CIRCUMFERENCE" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>The circumference of the earth, based on the WGS84 mean radius</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <enum name="H.geo.AltitudeContext" local-name="AltitudeContext" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Contexts for altitudes to specify the contextual origin of an altitude's value</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <value name="H.geo.AltitudeContext.undefined" local-name="undefined">
              <description>
                <prose><p>Ground level</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.GL" local-name="GL">
              <description>
                <prose><p>Ground level</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.OL" local-name="OL">
              <description>
                <prose><p>Obstruction level</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.SL" local-name="SL">
              <description>
                <prose><p>Mean sea level</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.SB" local-name="SB">
              <description>
                <prose><p>Sea bed level</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.WE" local-name="WE">
              <description>
                <prose><p>WGS84 ellipsoid</p></prose>
              </description>
            </value>
            <value name="H.geo.AltitudeContext.WG" local-name="WG">
              <description>
                <prose><p>WGS84 geoid</p></prose>
              </description>
            </value>
          </enum>
          <property name="H.geo.MIN_LONGITUDE" local-name="MIN_LONGITUDE" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>Minimal allowed longitude value</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.geo.MAX_LONGITUDE" local-name="MAX_LONGITUDE" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>Maximal value for longitude</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.geo.MIN_LATITUDE" local-name="MIN_LATITUDE" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>Minimal value for latitude</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.geo.MAX_LATITUDE" local-name="MAX_LATITUDE" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>Maximal value for latitude</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.geo.MAX_LONGITUDE_LENGTH" local-name="MAX_LONGITUDE_LENGTH" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
            <description>
              <prose><p>Maximal length on the longitude axis</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <method name="H.geo.validateLat" local-name="validateLat" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Clamps the given latitude value into a range of <code>-90 ... +90</code></p></prose>
            </description>
            <param name="lat">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The latitude to validate</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown.</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.geo.Latitude"/>
              </types>
              <ctype>
                <name name="H.geo.Latitude"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.geo.validateLng" local-name="validateLng" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Modulo the given longitude value into a range of <code>-180 ... +180</code></p></prose>
            </description>
            <param name="lng">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The longitude to validate</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown.</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.geo.Longitude"/>
              </types>
              <ctype>
                <name name="H.geo.Longitude"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.geo.validateAlt" local-name="validateAlt" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Validates the the given altitude value</p></prose>
            </description>
            <param name="alt">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The altitude to validate</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown.</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.geo.Altitude"/>
              </types>
              <ctype>
                <name name="H.geo.Altitude"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.geo.validateCtx" local-name="validateCtx" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Checks that the given value is a one of the enumeration values of <link ref="H.geo.AltitudeContext" /></p></prose>
            </description>
            <param name="ctx">
              <types>
                <type ref="?"/>
              </types>
              <ctype>
                <unknown/>
              </ctype>
              <description>
                <prose><p>The altitude context to validate</p></prose>
              </description>
            </param>
            <param name="opt_caller" optional="true">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" optional="true"/>
              </ctype>
              <description>
                <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown.</p></prose>
              </description>
            </param>
            <param name="opt_argNr" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose><p>whether the value is valid</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.geo.isIPoint" local-name="isIPoint" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Method checks if argument passed belongs to H.geo.IPoint</p></prose>
            </description>
            <param name="point">
              <types>
                <type ref="H.geo.IPoint"/>
              </types>
              <ctype>
                <name name="H.geo.IPoint"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <interface name="H.geo.IPoint" local-name="IPoint" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>An interface to represent a geographic point. Every point in geo space
is represented by three coordinates latitude, longitude and optional altitude.</p></prose>
            </description>
            <property name="H.geo.IPoint#lat" local-name="lat" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The latitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Latitude"/>
              </types>
              <ctype>
                <name name="H.geo.Latitude"/>
              </ctype>
            </property>
            <property name="H.geo.IPoint#lng" local-name="lng" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The longitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Longitude"/>
              </types>
              <ctype>
                <name name="H.geo.Longitude"/>
              </ctype>
            </property>
            <property name="H.geo.IPoint#alt" local-name="alt" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The altitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Altitude"/>
              </types>
              <ctype>
                <name name="H.geo.Altitude"/>
              </ctype>
            </property>
            <property name="H.geo.IPoint#ctx" local-name="ctx" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The altitude context.</p></prose>
              </description>
              <types>
                <type ref="H.geo.AltitudeContext"/>
              </types>
              <ctype>
                <name name="H.geo.AltitudeContext"/>
              </ctype>
            </property>
          </interface>
          <class name="H.geo.Point" local-name="Point" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Class represents a geographical point, which is defined by the latitude, longitude and
optional altitude.</p></prose>
              <example>var geoPoint = new H.geo.Point(1, 51);</example>
            </description>
            <extends>
              <type ref="H.geo.IPoint"/>
            </extends>
            <constructor local-name="Point" name="H.geo.Point">
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The latitude coordinate</p></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The longitude coordinate</p></prose>
                </description>
              </param>
              <param name="opt_alt" optional="true">
                <types>
                  <type ref="H.geo.Altitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Altitude" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The altitude coordinate</p></prose>
                </description>
              </param>
              <param name="opt_ctx" optional="true">
                <types>
                  <type ref="H.geo.AltitudeContext"/>
                </types>
                <ctype>
                  <name name="H.geo.AltitudeContext" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The altitude context</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.geo.Point#equals" local-name="equals" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To compare this point with a supplied other point for equality. Two points are considered equal if they
have the same <code>lat</code> and <code>lng</code> as well as equivalent values for <code>alt</code> and <code>ctx</code>.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Whether the two points are equal.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Point#distance" local-name="distance" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To calculate the distance between this point and the supplied other point.
The method uses the Haversine formula. The altitude is not considered.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The distance between the given location and the location supplied by the caller
   in meters</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Point#walk" local-name="walk" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method calculates the geographic point of a destination point using the distance and bearing specified
by the caller. The altitude is ignored, instead the WGS84 Mean Radius is taken.</p></prose>
              </description>
              <param name="bearing">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bearing to use in the calculation in degrees</p></prose>
                </description>
              </param>
              <param name="distance">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The distance to the destination in meters</p></prose>
                </description>
              </param>
              <param name="opt_overGreatCircle" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>If true the computation uses the
        &quot;Great Circle&quot; otherwise &quot;Rhumb Line&quot;.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>The calculated point</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Point#walkGC_" local-name="walkGC_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method calculates the geo points of a destination point using the distance and bearing specified by the caller.
The algorithm based on Great Circle.</p></prose>
              </description>
              <param name="bearing">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The bearing to use in the calculation in degrees</p></prose>
                </description>
              </param>
              <param name="distance">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The distance to the destination in meters</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>The calculated target as a location object containing geo points</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Point.validate" local-name="validate" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method validates the given IPoint.
It checks, if  <code>lat</code>, <code>lng</code>, <code>alt</code> and <code>ctx</code> have valid types.
Additionally the value of the <code>lat</code> property is clamped into a range of <code>-90 ... +90</code> and
the value of the <code>lng</code> property is modulo into a range of <code>-180 ... +180</code> plus validates the values of
the <code>alt</code> and <code>ctx</code> properties</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The point to validate</p></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown</p></prose>
                </description>
              </param>
              <param name="opt_argNr" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>if the given point could validate</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Point.fromIPoint" local-name="fromIPoint" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates a Point instance from a given IPoint object.</p></prose>
              </description>
              <param name="iPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The IPoint object to use</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>the created Point instance</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.geo.Point#lat" local-name="lat" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.geo.IPoint#lat">
              <description>
                <prose><p>The latitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Latitude"/>
              </types>
              <ctype>
                <name name="H.geo.Latitude"/>
              </ctype>
            </property>
            <property name="H.geo.Point#lng" local-name="lng" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.geo.IPoint#lng">
              <description>
                <prose><p>The longitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Longitude"/>
              </types>
              <ctype>
                <name name="H.geo.Longitude"/>
              </ctype>
            </property>
            <property name="H.geo.Point#alt" local-name="alt" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.geo.IPoint#alt">
              <description>
                <prose><p>The altitude coordinate.</p></prose>
              </description>
              <types>
                <type ref="H.geo.Altitude"/>
              </types>
              <ctype>
                <name name="H.geo.Altitude"/>
              </ctype>
            </property>
            <property name="H.geo.Point#ctx" local-name="ctx" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.geo.IPoint#ctx">
              <description>
                <prose><p>The altitude context.</p></prose>
              </description>
              <types>
                <type ref="H.geo.AltitudeContext"/>
              </types>
              <ctype>
                <name name="H.geo.AltitudeContext"/>
              </ctype>
            </property>
          </class>
          <class name="H.geo.Rect" local-name="Rect" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a rectangular geographic area. The area is defined
by four geographical coordinates two (left, right) longitudes and two (top, bottom)
latitudes.</p></prose>
            </description>
            <constructor local-name="Rect" name="H.geo.Rect">
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the northern-most latitude</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the southern-most latitude</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most latitude</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.geo.Rect#equals" local-name="equals" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To compare this rectangle with a supplied other rectangle for equality.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Whether the two rectangles are equal.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#set_" local-name="set_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method modifies the values of a bounding box. It is only used
internally for memory and performance reasons.</p></prose>
              </description>
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the northern-most latitude</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the southern-most latitude</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most latitude</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>this rect</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getTopLeft" local-name="getTopLeft" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the top-left corner of the rectangular area.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>the top-left corner of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getBottomRight" local-name="getBottomRight" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the bottom-right corner of the rectangular area.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>the bottom-right corner of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getTop" local-name="getTop" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the north-most latitude of this rectangular area</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the north-most latitude of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getBottom" local-name="getBottom" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the south-most latitude of this rectangular area</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the south-most latitude of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getLeft" local-name="getLeft" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the left-most longitude of this rectangular area</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getRight" local-name="getRight" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the right-most longitude of this rectangular area</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most longitude of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getCenter" local-name="getCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the center point of this rectangular area</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>the center point of the area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getWidth" local-name="getWidth" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns this width of this rectangular area in decimal degrees.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the width of this area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#getHeight" local-name="getHeight" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns this height of this rectangular area in decimal degrees.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the height of this area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#isCDB" local-name="isCDB" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns a boolean value indicating whether this rectangular area spans
across the date border.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the area spans across the date border, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#isEmpty" local-name="isEmpty" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The method checks if the area enclosed by the given bounding box is 0.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the dimensions of the area a 0, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#containsLatLng" local-name="containsLatLng" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks if the latitude and longitude supplied by the caller
lie within the area of this rectangular area.</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the latitude</p></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the longitude</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the latitude and longitude are contained in this
 area, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#containsPoint" local-name="containsPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks if the point supplied by the caller lies within the area of this rectangular area.</p></prose>
              </description>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the point</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the point is contained in this
 area, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#containsRect" local-name="containsRect" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks if the rectangular area supplied by the caller
is completely contained within the area of this rectangular area.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the rectangular area</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the rectangular area is contained in this
 area, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#mergeLatLng" local-name="mergeLatLng" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the smallest bounding box that covers this rectangular
area and the latitude and longitude supplied by the caller.</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the latitude</p></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the longitude</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rectangular area to store
 the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>either the rectangular area passed as out
 parameter or a new rectangular area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#mergePoint" local-name="mergePoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the smallest bounding box that covers this rectangular
area and the point supplied by the caller.</p></prose>
              </description>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the point to merge</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rectangular area to store
 the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>either the rectangular area passed as out
 parameter or a new rectangular area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#mergeRect" local-name="mergeRect" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the smallest bounding box that covers this rectangular
area and the rectangular area supplied by the caller.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the point to merge</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rectangular area to store
 the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>either the rectangular area passed as out
 parameter or a new rectangular area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#mergeTopLeftBottomRight" local-name="mergeTopLeftBottomRight" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the smallest bounding box that covers this rectangular
area and the rectangular area supplied by the caller.</p></prose>
              </description>
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The top latitude of the rectangle to merge</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The left longitude of the rectangle to merge</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The bottom latitude of the rectangle to merge</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The right longitude of the rectangle to merge</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to check validity of the arguments</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rectangular area to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>either the rectangular area passed as out
 parameter or a new rectangular area</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#intersects" local-name="intersects" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks if the intersection of two bounding boxes is non-empty.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>a rectangular area to be tested for intersection with this rectangular area</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether the two areas intersect</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.getBoxWidth_" local-name="getBoxWidth_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns the span between two longitudes</p></prose>
              </description>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most longitude</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the distance between the two longitudes in decimal degrees</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.getBoxMidLng_" local-name="getBoxMidLng_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns longitude half-way between the left-most longitude
and the width.</p></prose>
              </description>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The left-most longitude</p></prose>
                </description>
              </param>
              <param name="width">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The width</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the longitude half-way along the width</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.merge" local-name="merge" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method merges two rects by their values. The result of the merge is
a bounding rect which covers all provided rect bounds.</p></prose>
              </description>
              <param name="topA">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the northern-most latitude</p></prose>
                </description>
              </param>
              <param name="leftA">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude of operand A</p></prose>
                </description>
              </param>
              <param name="bottomA">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the southern-most latitude of operand A</p></prose>
                </description>
              </param>
              <param name="rightA">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most latitude of operand A</p></prose>
                </description>
              </param>
              <param name="topB">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the northern-most latitude of operand B</p></prose>
                </description>
              </param>
              <param name="leftB">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the left-most longitude of operand B</p></prose>
                </description>
              </param>
              <param name="bottomB">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the southern-most latitude of operand B</p></prose>
                </description>
              </param>
              <param name="rightB">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the right-most latitude of operand B</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rect to store the results</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>either the opt_out rect or a new rect</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.fromPoints" local-name="fromPoints" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates a rectangular area from a top-left and bottom-right point
 pair.</p></prose>
              </description>
              <param name="topLeft">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the top-left corner of the area</p></prose>
                </description>
              </param>
              <param name="bottomRight">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>the bottom-right corner of the area</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>returns the rectangular area defined by the
 top-left and bottom-right corners</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.coverPoints" local-name="coverPoints" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates the minimum rectangular area covering all of the points
in the argument array.</p></prose>
              </description>
              <param name="pointArray">
                <types>
                  <type ref="Array.&lt;H.geo.IPoint&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.geo.IPoint"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the array of points to cover</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>returns the minimum rectangular area covering
 the points or <code>null</code> if no point is covered</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.coverLatLngAlts" local-name="coverLatLngAlts" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates the minimum rectangular area covering all of the
coordinates in the argument array.</p></prose>
              </description>
              <param name="latLngAltArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the array of coordinates to cover</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.geo.Rect"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>returns the minimum rectangular area covering
 the coordinates</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect.coverRects" local-name="coverRects" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method creates the minimum rectangular area covering all of the
rectangular areas in the argument array.</p></prose>
              </description>
              <param name="rectArray">
                <types>
                  <type ref="Array.&lt;H.geo.Rect&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.geo.Rect"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the array of points to cover</p></prose>
                </description>
              </param>
              <param name="opt_skipValidation" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>a boolean flag indicating whether to
 check validity of the arguments</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.geo.Rect"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>returns the minimum rectangular area covering
 the rectangular areas</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Rect#resizeToCenter" local-name="resizeToCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method clones the given bounding rect and resizes the clone if necessary
until the location supplied by the caller is at its center.</p></prose>
              </description>
              <param name="center">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>a point which is to be the center of the
 resized rectangular area</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional rectangular area to store
 the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the resized rectangular area</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <class name="H.geo.Strip" local-name="Strip" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A strip is a flat list of latitude, longitude, altitude tuples in a fixed order.</p></prose>
            </description>
            <constructor local-name="Strip" name="H.geo.Strip">
              <param name="opt_latLngAlts" optional="true">
                <types>
                  <type ref="Array.&lt;number&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>An optional array of latitude, longitude and altitude triples to initialize the strip with.</p></prose>
                </description>
              </param>
              <param name="opt_ctx" optional="true">
                <types>
                  <type ref="H.geo.AltitudeContext"/>
                </types>
                <ctype>
                  <name name="H.geo.AltitudeContext" optional="true"/>
                </ctype>
                <description>
                  <prose><p>An optional altitude context for all altitudes contained in this strip.</p></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid lat, lng, alt values</prose>
                </description>
              </exception>
            </constructor>
            <property name="H.geo.Strip#latLngAlts_" local-name="latLngAlts_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The list of lat, lng, alt values which define the strip</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="number"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.geo.Strip#ctx_" local-name="ctx_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The altitude context for all altitudes contained in this strip</p></prose>
              </description>
              <types>
                <type ref="H.geo.AltitudeContext"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.geo.AltitudeContext"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.geo.Strip#countDBCs_" local-name="countDBCs_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method counts the amount of legs crossing the date border within
the boundaries specified.</p></prose>
              </description>
              <param name="start">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the start index from which to check</p></prose>
                </description>
              </param>
              <param name="end">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the end index to which to check</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the number of legs that cross the date border</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#pushLatLngAlt" local-name="pushLatLngAlt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method pushes a lat, lng, alt to the end of this strip.</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="alt">
                <types>
                  <type ref="H.geo.Altitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Altitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid lat, lng, alt values</prose>
                </description>
              </exception>
            </method>
            <method name="H.geo.Strip#pushLatLngAlt_" local-name="pushLatLngAlt_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method pushes a lat, lng, alt to the end of this strip.
See <link ref="H.geo.validateLat" />, <link ref="H.geo.validateLng" />, <link ref="H.geo.validateAlt" /></p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="alt">
                <types>
                  <type ref="H.geo.Altitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Altitude"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="caller">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for InvalidArgumentError.</p></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid lat, lng, alt values</prose>
                </description>
              </exception>
            </method>
            <method name="H.geo.Strip#spliceLatLngAlts" local-name="spliceLatLngAlts" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method splices the strip at the provided index, removing the specified
number of items at that index and inserting the lat, lng, alt array.</p></prose>
              </description>
              <param name="index">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index at which to splice</p></prose>
                </description>
              </param>
              <param name="opt_nRemove" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The number of lat, lng, alt values to remove</p></prose>
                </description>
              </param>
              <param name="opt_latLngAlts" optional="true">
                <types>
                  <type ref="Array.&lt;number&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The lat, lng, alt values to add</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of removed elements</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid opt_latLngAlts argument</prose>
                </description>
              </exception>
            </method>
            <method name="H.geo.Strip#insertLatLngAlt" local-name="insertLatLngAlt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method inserts one set of lat, lng, alt values into the strip at the
specified index.</p></prose>
              </description>
              <param name="index">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index at which to add the element</p></prose>
                </description>
              </param>
              <param name="lat">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>the latitude to insert</p></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the longitude to insert</p></prose>
                </description>
              </param>
              <param name="alt">
                <types>
                  <type ref="H.geo.Altitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Altitude"/>
                </ctype>
                <description>
                  <prose><p>the altitude to insert</p></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.Strip#removeLatLngAlt" local-name="removeLatLngAlt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes one set of lat, lng, alt values from the strip at the
specified index.</p></prose>
              </description>
              <param name="index">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.Strip#pushPoint" local-name="pushPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method pushes the lat, lng, alt values of a <link ref="H.geo.Point" /> to the end
of this strip.</p></prose>
              </description>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid geoPoint argument</prose>
                </description>
              </exception>
            </method>
            <method name="H.geo.Strip#insertPoint" local-name="insertPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method inserts the lat, lng, alt values of a <link ref="H.geo.Point" /> into the list
at the specified index.</p></prose>
              </description>
              <param name="pointIndex">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.Strip#removePoint" local-name="removePoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes one set of lat, lng, alt values from this strip at the virtual point
index specified.</p></prose>
              </description>
              <param name="pointIndex">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the virtual point index</p></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.Strip#extractPoint" local-name="extractPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method extracts a <link ref="H.geo.Point" /> from this strip at the virtual point
index. If the extracted point has an alt value, the strip's altitude context
will be supplied to the point.</p></prose>
              </description>
              <param name="pointIndex">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the virtual point index in the strip</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point object to store the lat,
lng, alt values</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>returns either the 'opt_out' point object or a
 new point object.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#eachLatLngAlt" local-name="eachLatLngAlt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method is a utility method that iterates over the lat, lng, alt array
and calls the provided function for each 3 elements passing lat, lng and alt
and the virtual point index as arguments.</p></prose>
                <example>var eachFn = function(lat, lng, alt, idx) {
  console.log(&quot;point&quot;, idx + &quot;:&quot;, lat, lng, alt);
}
myStrip.eachPoint(eachFn); //iterates over each point and logs its latitude and longitude</example>
              </description>
              <param name="eachFn">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.geo.Latitude"/>
                    </param>
                    <param>
                      <name name="H.geo.Longitude"/>
                    </param>
                    <param>
                      <name name="H.geo.Altitude"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the function to be called for each 3 elements</p></prose>
                </description>
              </param>
              <param name="opt_start" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional start index to iterate from</p></prose>
                </description>
              </param>
              <param name="opt_end" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional end index to iterate to</p></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.Strip#getDBCs" local-name="getDBCs" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the number of times that legs in this strip cross the
date border.</p></prose>
              </description>
              <param name="opt_closed" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>indicates whether the strip is closed (i.e. whether the strip's last and first
 coordinates form the closing leg of a polygon)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the amount of times this strip crosses the date border.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#getPointCount" local-name="getPointCount" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method return the number of points stored in this strip.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the number of points in this strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#getLatLngAltArray" local-name="getLatLngAltArray" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the internal array keeping the lat, lng, alt values.
Modifying this array directly can destroy the integrity of this strip. Use it
only for read access.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>returns the raw lat, lng, alt values of this strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#getBounds" local-name="getBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the bounding box of this strip.</p>
<p>Note: The strip is treated as an open path. If the bounding rectangle for a
closed shape is required, the closing leg must be merged in an extra step.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>this strip's bounding rectangle</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#hasBounds" local-name="hasBounds" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method returns a boolean value indicating whether this strip has a
valid computed bounding rectangle.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the strip has a properly computed bounding
 rectangle, false otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip#computeBounds_" local-name="computeBounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method computes the bounding rectangle of this strip.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the bounding rectangle of this strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip.validateLatLngAlts_" local-name="validateLatLngAlts_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method checks whether the given array has has a valid length (integral multiple of 3) and all lat/lng/alt
entries have valid values. The values of the array are modified if necessary.
See <link ref="H.geo.validateLat" />, <link ref="H.geo.validateLng" />, <link ref="H.geo.validateAlt" /></p></prose>
              </description>
              <param name="latLngAlts">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The lat/lng/alt array to validate</p></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for InvalidArgumentError. If omitted no error is thrown.</p></prose>
                </description>
              </param>
              <param name="opt_argNr" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The argument number to use for InvalidArgumentError.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>to indicate whether the lat/lng/alt array is valid</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>in case of invalid values (only if opt_caller is defined)</prose>
                </description>
              </exception>
            </method>
            <method name="H.geo.Strip.isDBC" local-name="isDBC" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks whether two longitudes form a leg which crosses the date border.</p></prose>
              </description>
              <param name="lng1">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the start longitude of the leg</p></prose>
                </description>
              </param>
              <param name="lng2">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>the end longitude of the leg</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the leg crosses the date border, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.Strip.fromLatLngArray" local-name="fromLatLngArray" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method initializes a new strip with an array of lat, lng values. Arrays
are expected to have an even length with the format <code>[lat, lng, lat, lng, ...]</code>.</p></prose>
              </description>
              <param name="latLngs">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the array of lat, lng value.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip containing the lat, lng values</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>throws an error in case the latLngs array has an odd length</prose>
                </description>
              </exception>
            </method>
          </class>
          <class name="H.geo.QuadTree" local-name="QuadTree" access="public" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A quad tree data structure which do space partitioning, ray and square based intersecting lookup.
The space spanned by the tree is always square shaped by a given axis radius.</p></prose>
            </description>
            <constructor local-name="QuadTree" name="H.geo.QuadTree">
              <param name="opt_depth" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>To limit the depth levels of the tree. Default is <code>10</code> if the value is a falsy.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.geo.QuadTree#tree_" local-name="tree_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Holds the internally used quad tree.</p></prose>
              </description>
              <types>
                <type ref="H.util.QuadTree"/>
              </types>
              <ctype>
                <name name="H.util.QuadTree"/>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#cdbEntries_" local-name="cdbEntries_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A list of all entries which cross the date border (they are not stored in the internal quad tree).
The negative longitude will be stored as shifted by +360 degrees. latitudes are stored negated (* -1)</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.util.QuadTree.Entry"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#isCDB_" local-name="isCDB_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Indicates that at least one of the entries of the tree is crossing the date border.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#bounds_" local-name="bounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The boundary of all entries stored in the tree, if no entries stored the value is <code>null</code></p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#treeBounds_" local-name="treeBounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The boundary of all entries stored in the internal quad tree, if no entries stored the value is <code>null</code></p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#cdbBounds_" local-name="cdbBounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The boundary of all CDB entries stored in the tree, if no CDB entries stored the value is <code>null</code></p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.geo.QuadTree#entriesCount_" local-name="entriesCount_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The count of all entries in this tree.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.geo.QuadTree#getEntriesCount" local-name="getEntriesCount" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To get the count of all entries in this tree.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#cdbEntries" local-name="cdbEntries" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns a list of all entries which cross the date border.
The negative longitude will be stored as shifted by +360 degrees. latitudes are stored negated (* -1)
Be aware that the internal CDB entries list is returned by reference - therefore you should never ever modify it!
This method must not be exported! Only internal use (e.g. clipping algorithm) allowed.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#isCDB" local-name="isCDB" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method indicates if at least one of the entries of the tree is crossing the date border.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#getBounds" local-name="getBounds" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns boundary of all entries stored in the tree or <code>null</code> if no entries stored in the tree.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#getCdbBounds_" local-name="getCdbBounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method returns boundary of all CDB entries (entries which cross the date-border).</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#insert_" local-name="insert_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method inserts a given entry into the Tree</p></prose>
              </description>
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The top edge of the entry to insert.</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The left edge of the entry to insert.</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The bottom edge of the entry to insert.</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The right edge of the entry to insert.</p></prose>
                </description>
              </param>
              <param name="isCDB">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to signal, that the entry is crossing the date border</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The quad tree entry created for the given boundary.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#insertPoint" local-name="insertPoint" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method inserts a geographical point into the tree.</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>The point to insert</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The quad tree entry created for the point.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#insertBounds" local-name="insertBounds" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method inserts a geographical boundary into the tree.</p></prose>
              </description>
              <param name="bounds">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>The boundary to insert</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The quad tree entry created for the inserted boundary.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#insertLine" local-name="insertLine" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method inserts a line into the tree.
The line presents always the shortest connection between booth points on longitude axis.
For example insertLine(-1,-91, 1,91) would create a line from {lat:0, lng: 91} to {lat:0, lng:-91} which crosses the
date border at {lat:0, lng: 180}</p></prose>
              </description>
              <param name="lat1">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The latitude of the start point.</p></prose>
                </description>
              </param>
              <param name="lng1">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The longitude of the start point.</p></prose>
                </description>
              </param>
              <param name="lat2">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The latitude of the end point.</p></prose>
                </description>
              </param>
              <param name="lng2">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The longitude of the end point.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The quad tree entry created for the given points.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#remove" local-name="remove" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method removes an entry from the tree.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The entry to remove.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the given entry could be found and removed or not</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#intersectCdbEntries_" local-name="intersectCdbEntries_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To determine all date border crossing entries which are covered by, or intersecting with the given rectangle.</p></prose>
              </description>
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The top edge of the rectangle (negated latitude).</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The left edge of the rectangle.</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The bottom edge of the rectangle (negated latitude).</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The right edge of the rectangle.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The list of all matching CDB entries</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#intersectCdbEntry_" local-name="intersectCdbEntry_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To determine if the given CDB entry is covered by, or intersecting with the given rectangle.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose><p>The entry to test</p></prose>
                </description>
              </param>
              <param name="top">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The top edge of the rectangle (negated latitude).</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The left edge of the rectangle.</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="H.geo.Latitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Latitude"/>
                </ctype>
                <description>
                  <prose><p>The bottom edge of the rectangle (negated latitude).</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="H.geo.Longitude"/>
                </types>
                <ctype>
                  <name name="H.geo.Longitude"/>
                </ctype>
                <description>
                  <prose><p>The right edge of the rectangle.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>The intersection test result</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree.mergeEntries_" local-name="mergeEntries_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A static helper function to merge a set of entries into another (ignores doublets).</p></prose>
              </description>
              <param name="set1">
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Target result set to merge to.</p></prose>
                </description>
              </param>
              <param name="set2">
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Source result set to merge from.</p></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.QuadTree#intersectBounds" local-name="intersectBounds" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method method returns a list of entries intersected by or contained
within the given bounding rectangle.</p></prose>
              </description>
              <param name="bounds">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the bounding rectangle to intersect with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of entries intersected by or contained
   within the given bounding rectangle.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.QuadTree#intersectPoint" local-name="intersectPoint" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method intersects the tree using a geographical point, and returnes
all entries which are intersecting the given point.</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>The point to intersect with.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.util.QuadTree.Entry&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.util.QuadTree.Entry"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of entries intersected by the given point.</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <interface name="H.geo.IProjection" local-name="IProjection" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Interface which describes map projection. Functions transform geo coordinates to
EPSG3857 coordinate reference system, which is x,y values in range 0..1</p></prose>
            </description>
            <method name="H.geo.IProjection#latLngToPoint" local-name="latLngToPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method transforms geographical lat/lng coordinates to a projected point in range <code>0...1</code></p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>latitude</p></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>longitude</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.IProjection#xyToGeo" local-name="xyToGeo" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method transforms projected x/y coordinates in range <code>0...1</code> to a geographical point</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.IProjection#pointToGeo" local-name="pointToGeo" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method transforms a projected point in range <code>0...1</code> to a geographical point</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.IProjection#geoToPoint" local-name="geoToPoint" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method transforms a geographical point to a projected point in range <code>0...1</code></p></prose>
              </description>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </interface>
          <ns name="H.geo.mercator" local-name="mercator" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Spherical mercator projection. This projection treats earth as a sphere and
maps geo coordinates to a cooresponding 2 dimensional space.
Map uses this projection by default.</p></prose>
            </description>
            <method name="H.geo.mercator.latToY_" local-name="latToY_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function transforms geographical latitude coordinate to a projected y coordinate in range <code>0...1</code></p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.mercator.lngToX_" local-name="lngToX_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function transforms geographical longitude coordinate to a projected x coordinate in range <code>0...1</code></p></prose>
              </description>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.mercator.yToLat_" local-name="yToLat_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function transforms a projected y coordinate in range <code>0...1</code> to geographical latitude coordinate</p></prose>
              </description>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.mercator.xToLng_" local-name="xToLng_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function transforms a projected x coordinate in range <code>0...1</code> to geographical longitude coordinate</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
          </ns>
          <class name="H.geo.PixelProjection" local-name="PixelProjection" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>PixelProjection is used to transform pixel world coordinates at certain scale (zoom level)
to geographical coordinates and vice-versa. By default it uses mercator geo projection
to transform geo points into the 2d plane map point which are adjusted to current scale.</p></prose>
            </description>
            <constructor local-name="PixelProjection" name="H.geo.PixelProjection">
              <param name="opt_projection" optional="true">
                <types>
                  <type ref="H.geo.IProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.IProjection" optional="true"/>
                </ctype>
                <description>
                  <prose><p>default is spherical mercator <link ref="H.geo.mercator" /></p></prose>
                </description>
              </param>
              <param name="opt_sizeAtLevelZero" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>world size in pixels at zoom level 0, default is <code>256</code></p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.geo.PixelProjection#projection" local-name="projection" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Geographical projection that backs given PixelProjection.</p></prose>
              </description>
              <types>
                <type ref="H.geo.IProjection"/>
              </types>
              <ctype>
                <name name="H.geo.IProjection"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#exp" local-name="exp" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Default exponent. Value shows exponent that is used to fit the world in single tile
for the given tile size, on presumption that 2^0 covers the entire world over equator.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#x" local-name="x" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>X-offset in projection relative to top left corner.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#y" local-name="y" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Y-offset in projection relative to top left corner.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#w" local-name="w" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Width of the world in pixels</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#h" local-name="h" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Height of the world in pixels</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.geo.PixelProjection#zoom_" local-name="zoom_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>current zoom scale</p></prose>
              </description>
            </property>
            <property name="H.geo.PixelProjection#tileExponent_" local-name="tileExponent_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Tile exponent used world width/height calculation</p></prose>
              </description>
            </property>
            <property name="H.geo.PixelProjection.MAX_WORLD_SIZE" local-name="MAX_WORLD_SIZE" access="protected" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose><p>Maximum world size exponent (30 bits)</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.geo.PixelProjection#rescale" local-name="rescale" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method updates scale exponent for the pixel projection.</p></prose>
              </description>
              <param name="zoom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.geo.PixelProjection#updateSize_" local-name="updateSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method updates world width and height.</p></prose>
              </description>
            </method>
            <method name="H.geo.PixelProjection#getZoomScale" local-name="getZoomScale" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns current zoom scale factor previously set by
<link ref="H.geo.PixelProjection#rescale" /> function.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.PixelProjection#geoToPixel" local-name="geoToPixel" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method translates geo point to pixel coordinates at given zoom level.</p></prose>
              </description>
              <param name="geoPoint">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.PixelProjection#pixelToGeo" local-name="pixelToGeo" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method translates a pixel's point to the according geo point.</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.PixelProjection#xyToGeo" local-name="xyToGeo" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method translates pixel's x and y coordinates to the according geo point.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.PixelProjection#latLngToPixel" local-name="latLngToPixel" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method translates geographical coordinates (latitude, longitude)
supplied by the caller.
This method accepts longitudes outside of the normal longitude range.
into a point defined in terms of pixel coordinates.</p></prose>
              </description>
              <param name="latitude">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The latitude to translate</p></prose>
                </description>
              </param>
              <param name="longitude">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The longitude to translate</p></prose>
                </description>
              </param>
              <param name="opt_out" optional="true">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional point to store the result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>A point object containing x and y
   coordinates (in pixels)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.geo.PixelProjection#pointToPixel" local-name="pointToPixel" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Method translates provided map point to world pixel coordinates relative
to current projection offset.</p></prose>
              </description>
              <param name="point">
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose><p>pixel coordinate</p></prose>
                </description>
              </returns>
            </method>
          </class>
        </ns>
        <ns name="H.map" local-name="map" access="public" scope="static" virtual="false" published="true" exported="false">
          <description>
            <prose><p>This namespace contains interfaces and implementation classes of
map-related functionality of the Maps API.</p></prose>
          </description>
          <class name="H.map.ArrowStyle" local-name="ArrowStyle" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents style attributes for arrows to be rendered along a polyline.</p></prose>
            </description>
            <constructor local-name="ArrowStyle" name="H.map.ArrowStyle">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.ArrowStyle"/>
                  <type ref="H.map.ArrowStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.ArrowStyle"/>
                    </type>
                    <type>
                      <name name="H.map.ArrowStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.ArrowStyle#isFilling" local-name="isFilling" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Idicates wheter the style is effectively filling:
The fill-color is neither &quot;none&quot; nor it is non-transparent
DON'T publish, API internally use only by SpatialTile!</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.ArrowStyle#getClone" local-name="getClone" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Creates a copy of this arrow style object.
DON'T publish, API internally used only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.ArrowStyle"/>
                </types>
                <ctype>
                  <name name="H.map.ArrowStyle"/>
                </ctype>
                <description>
                  <prose><p>a clone of this arrow style</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ArrowStyle#equals" local-name="equals" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks value-equality with another arrow style.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.ArrowStyle"/>
                  <type ref="H.map.ArrowStyle.Options"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.map.ArrowStyle"/>
                    </type>
                    <type>
                      <name name="H.map.ArrowStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>the arrow style to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the arrow styles are value-equal, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.ArrowStyle.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>An object type to specify the style of arrows to render along a polyline</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="fillColor"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="width"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="length"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="frequency"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.ArrowStyle.Options#fillColor" local-name="fillColor" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The CSS color value used to fill the arrow shapes.
       If omitted or the value evaluates to <code>false</code> it defaults to <code>&quot;rgba(255, 255, 255, 0.75)&quot;</code></p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ArrowStyle.Options#width" local-name="width" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The width of the arrow shape. The value is taken as a factor of the width of the line, where the arrow
       description is applied. If omitted or the value is <code>&lt;= 0</code> it defaults to <code>1.2</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ArrowStyle.Options#length" local-name="length" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The length of the arrow shapes. The value is taken as a factor of the width of the line at the end of
        which the arrow is drawn. If omitted or the value is <code>&lt;= 0</code> it defaults to <code>1.6</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ArrowStyle.Options#frequency" local-name="frequency" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The frequency of arrow shapes. The value is taken as factor of the length of the arrow. A value of 1 results
        in gapless arrows. If omitted or the value is <code>false</code> it defaults to <code>5</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
            </typedef>
          </class>
          <class name="H.map.Object" local-name="Object" access="public" scope="static" virtual="true" published="true" exported="true">
            <description>
              <prose><p>This class represents the abstract base class for map objects such as
polylines, polygons, markers, groups etc.</p></prose>
            </description>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <constructor local-name="Object" name="H.map.Object">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Object.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Object.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The values to initialize this object</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.map.Object#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Object#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <enum name="H.map.Object.Type" local-name="Type" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The major types of map objects</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <value name="H.map.Object.Type.ANY" local-name="ANY">
                <description>
                  <prose><p>spatial object</p></prose>
                </description>
              </value>
              <value name="H.map.Object.Type.SPATIAL" local-name="SPATIAL">
                <description>
                  <prose><p>spatial object</p></prose>
                </description>
              </value>
              <value name="H.map.Object.Type.MARKER" local-name="MARKER">
                <description>
                  <prose><p>Marker object</p></prose>
                </description>
              </value>
              <value name="H.map.Object.Type.DOM_MARKER" local-name="DOM_MARKER">
                <description>
                  <prose><p>DomMarker object</p></prose>
                </description>
              </value>
              <value name="H.map.Object.Type.GROUP" local-name="GROUP">
                <description>
                  <prose><p>DomMarker object</p></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Object#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Object#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Object#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Object#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Object.nextObjectId_" local-name="nextObjectId_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A counter to create unique IDs for all map.Object instances</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Object#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Object#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Object#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Object#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Object#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Object#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Object#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <method name="H.map.Object.compareZInfo" local-name="compareZInfo" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compares two zInfos. It's used to sort objects by z-order.
Must NOT be published, it's used API interally only by Object.compareZOrder and during rendering!</p></prose>
              </description>
              <param name="first">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The first z-info to compare</p></prose>
                </description>
              </param>
              <param name="second">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The second z-info to compare</p></prose>
                </description>
              </param>
              <param name="onlyZIndex">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates to compare only z-indexes but not sibling-indexes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first z-info results to a lower z-order.
     If equal <code>0</code> booth z-infos result tothe same z-order.
     If greater then <code>0</code> the first z-info results to a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object.compareZOrder" local-name="compareZOrder" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Compares two objects regarding their z-order, useful to sort a list of objects via Array's sort() method</p></prose>
              </description>
              <param name="first">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The first object to compare</p></prose>
                </description>
              </param>
              <param name="second">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The second object to compare</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Object#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Object#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Object#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Object#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Object#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Object#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Object#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Object#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Object#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Object#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.Object.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a map object</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="data"/>
                    </key>
                    <value>
                      <all/>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Object.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Object.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Object.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the map object is visible at all, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Object.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Object.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of ObjectProvider
          wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Object.Options#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Optional arbitrary data to be stored with this map object. This data can be retrieved by calling
          <code>getData</code>.</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
            </typedef>
            <method name="H.map.Object#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Object#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Object#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Object#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Object#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Object#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Object#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.SpatialStyle" local-name="SpatialStyle" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>The SpatialStyle class represents a style with which spatial objects like polylines and polygons are drawn.
A SpatialStyle instance is always treated as immutable to avoid inconstiencies and must not modified.</p></prose>
            </description>
            <constructor local-name="SpatialStyle" name="H.map.SpatialStyle">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The optional style attributes</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.SpatialStyle#strokeColor" local-name="strokeColor" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The color of the stroke in CSS syntax, default is <code>'rgba(0, 85, 170, 0.6)'</code>.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#fillColor" local-name="fillColor" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The filling color in CSS syntax, default is <code>'rgba(0, 85, 170, 0.4)'</code>.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#lineWidth" local-name="lineWidth" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The width of the line in pixels, default is <code>2</code>.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#lineCap" local-name="lineCap" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The style of the end caps for a line, default is <code>'round'</code>.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle.LineCap"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle.LineCap"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#lineJoin" local-name="lineJoin" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The type of corner created, when two lines meet, default is <code>'miter'</code>.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle.LineJoin"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle.LineJoin"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#miterLimit" local-name="miterLimit" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The miter length is the distance between the inner corner and the outer corner where two lines meet.
The default is <code>10</code>.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#lineDash" local-name="lineDash" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The line dash pattern as an even numbered list of distances to alternately produce a line and a space.
The default is <code>[ ]</code>.</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="number"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#lineDashOffset" local-name="lineDashOffset" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The phase offset of the line dash pattern
The default is <code>0</code>.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.SpatialStyle#mergeOptions_" local-name="mergeOptions_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To merge style attributes into this spatial style instance</p></prose>
              </description>
              <param name="caller">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for InvalidArgumentError.</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The optional style attributes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.SpatialStyle#isFilling" local-name="isFilling" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Idicates wheter the style is effectively filling:
The fill-color is neither &quot;none&quot; nor it is non-transparent
DON'T publish, API internally use only by SpatialTile!</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle#isStroking" local-name="isStroking" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Idicates wheter the style is effectively stroking:
The lineWidth is greater than 0 and the stroke-color is neither &quot;none&quot; nor it is non-transparent
DON'T publish, API internally use only by SpatialTile!</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle.ATTRIBUTE_NAMES_" local-name="ATTRIBUTE_NAMES_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose><p>The list of all style's attribute names</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle.ATTRIBUTE_COUNT_" local-name="ATTRIBUTE_COUNT_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose><p>The count of all style properties</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.SpatialStyle#equals" local-name="equals" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method checks value-equality with another style.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>the style to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the styles are value-equal, otherwise false</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.SpatialStyle#getCopy" local-name="getCopy" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns a copy of spatial style object and replaces the passed style attributes into it.
Must NOT published, API internally used only!</p></prose>
              </description>
              <param name="opt_attributes" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The style attributes to set on the copied style instance</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.SpatialStyle.INVALID_" local-name="INVALID_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Special return value for validators_ to signalize an invalid value</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle.validators_" local-name="validators_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The validators for all style properties, indexes aligned with ATTRIBUTE<em>NAMES</em>.
A check against undefined should be done beforehand!
A validator returns .INVALID_ to signalize that the value is invalid.</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;function(?):(string|number|Object)&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <func>
                      <param>
                        <unknown/>
                      </param>
                      <return>
                        <union>
                          <type>
                            <name name="string"/>
                          </type>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <name name="Object"/>
                          </type>
                        </union>
                      </return>
                    </func>
                  </app>
                </typed>
              </ctype>
            </property>
            <typedef name="H.map.SpatialStyle.LineCap" local-name="LineCap" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The style of the end caps for a line, one of <code>'butt'</code>, <code>'round'</code> or <code>'square'</code>.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </typedef>
            <typedef name="H.map.SpatialStyle.LineJoin" local-name="LineJoin" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>The type of corner created, when two lines meet, one of <code>'round'</code>, <code>'bevel'</code> or <code>'miter'</code>.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </typedef>
            <typedef name="H.map.SpatialStyle.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a style.
If a property is not set, the default value from <link ref="H.map.SpatialStyle" /> is taken.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="strokeColor"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="fillColor"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="lineWidth"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="lineCap"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.SpatialStyle.LineCap"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="lineJoin"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.SpatialStyle.LineJoin"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="miterLimit"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="lineDash"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="number"/>
                            </app>
                          </typed>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="lineDashOffset"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.SpatialStyle.Options#strokeColor" local-name="strokeColor" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The color of the stroke in CSS syntax.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#fillColor" local-name="fillColor" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The color of the stroke in CSS syntax.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#lineWidth" local-name="lineWidth" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The width of the line in pixels, default is <code>2</code>. The maximum supported line width is <code>100</code>.</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#lineCap" local-name="lineCap" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The style of the end caps for a line.</p></prose>
                </description>
                <types>
                  <type ref="H.map.SpatialStyle.LineCap"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle.LineCap" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#lineJoin" local-name="lineJoin" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The type of corner created, when two lines meet.</p></prose>
                </description>
                <types>
                  <type ref="H.map.SpatialStyle.LineJoin"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle.LineJoin" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#miterLimit" local-name="miterLimit" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The miter limit in pixel, default is <code>10</code>. The maximum supported miter limit is <code>100</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#lineDash" local-name="lineDash" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The line dash pattern as an even numbered list of distances to alternately produce a line and a space.
          If the browser doesn't support this feature this style property is ignored.</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.map.SpatialStyle.Options#lineDashOffset" local-name="lineDashOffset" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The phase offset of the line dash pattern</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <property name="H.map.SpatialStyle.&apos;MAX_LINE_WIDTH&apos;" local-name="MAX_LINE_WIDTH" access="public" scope="static" virtual="false" published="true" exported="false" constant="true">
              <description>
                <prose><p>This constant represents the maximum line width which can be used for rendering.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.SpatialStyle.DEFAULT_STYLE" local-name="DEFAULT_STYLE" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This static member defines the default style for spatial objects on the map.
It's value is
<code>
{
  strokeColor: '#05A',
  fillColor: 'rgba(0, 85, 170, 0.4)'
  lineWidth: 1,
  lineCap: 'round',
  lineJoin: 'miter',
  miterLimit: 10,
  lineDash: [ ],
  lineDashOffset: 0
}
</code></p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
          </class>
          <class name="H.map.Spatial" local-name="Spatial" access="public" scope="static" virtual="true" published="true" exported="true">
            <description>
              <prose><p>This class represents a spatial map object which provides its projected geometry.</p></prose>
            </description>
            <extends>
              <type ref="H.map.Object"/>
            </extends>
            <constructor local-name="Spatial" name="H.map.Spatial">
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Spatial.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The options to apply</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.map.Spatial#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Spatial#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.Spatial.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options which are used to initialize spatial object object</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="style"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.SpatialStyle"/>
                        </type>
                        <type>
                          <name name="H.map.SpatialStyle.Options"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Spatial.Options#style" local-name="style" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the
          style to be used when tracing the spatial object</p></prose>
                </description>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Spatial.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>An optional boolean value indicating whether this
          map object is visible, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Spatial.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Spatial.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Spatial.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Spatial.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of
          ObjectProvider wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
            </typedef>
            <event name="H.map.Spatial#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Spatial#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Spatial#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Spatial#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Spatial#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Spatial#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Spatial#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Spatial#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Spatial#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Spatial#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Spatial#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Spatial#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Spatial#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Spatial#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Spatial#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Spatial#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Spatial#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Spatial#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Spatial#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Spatial#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Spatial#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Spatial#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.GeoShape" local-name="GeoShape" access="public" scope="static" virtual="true" published="true" exported="true">
            <description>
              <prose><p>This class represents a spatial shape in geographic space. It is defined by a path
containing the vertices of the shape (lat, lng, alt values).</p></prose>
            </description>
            <extends>
              <type ref="H.map.Spatial"/>
            </extends>
            <constructor local-name="GeoShape" name="H.map.GeoShape">
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this geographical shape is closed (a polygon)</p></prose>
                </description>
              </param>
              <param name="strip">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>The strip describing the shape of the spatial object</p></prose>
                </description>
              </param>
              <param name="options">
                <types>
                  <type ref="H.map.Spatial.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial.Options"/>
                </ctype>
                <description>
                  <prose><p>The options to apply</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.map.GeoShape#event:stripchange" local-name="stripchange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this spatial's strip changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.GeoShape#strip" local-name="strip" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The strip to describe the shape in geo-space</p></prose>
              </description>
              <types>
                <type ref="H.geo.Strip"/>
              </types>
              <ctype>
                <name name="H.geo.Strip" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getStrip" local-name="getStrip" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the strip which represents the shape of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setStrip" local-name="setStrip" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the geo-information for the spatial object</p></prose>
              </description>
              <param name="strip" nullable="true">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The strip which represents the shape of the spatial object.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.GeoShape"/>
                </types>
                <ctype>
                  <name name="H.map.GeoShape"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#getBounds" local-name="getBounds" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>This method returns the bounding rectangle for this object. The rectangle
is the smallest rectangle which encloses all points of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#projectGeoStrips" local-name="projectGeoStrips" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Projects geo-strips to x,y strips
DON'T publish, API-internal use only by SpatiaTile!</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geo-strips to project</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether the strip is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the projected strips</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#projectDenormalized_" local-name="projectDenormalized_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns an array of coordinates which are denormalized but they cover the shape. Denormalized means
that returned array of projected coordinates should contain points computed out of longitudes which are
bigger than 180 or smaller than -180 degrees.</p></prose>
              </description>
              <param name="coords">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of lat, lng...</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Flag if the shape is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <param name="opt_shift" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Optional value to determine of shifting to left or right world (+-360)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of 2D points</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#denormalizeLastLng_" local-name="denormalizeLastLng_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To keep the last longitude, needed by denormalize<em>()
Must be reset to 0 for each execution of projectDenormalized</em> before calling denormalize_</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#denormalize_" local-name="denormalize_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To create a Point with denormalized longitudes, necessary for sequential longitudes with a delta &gt; 180 degrees</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="shift">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.GeoShape#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Spatial#event:stylechange">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.GeoShape#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#style">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#getStyle">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#setStyle">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#PX_CLIP_MARGIN">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#FULLY_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#NOT_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#isClosed_">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#isClosed">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.Spatial#getGeometry">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.Spatial#getHybridIdx">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.GeoShape#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.GeoShape#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.GeoShape#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.GeoShape#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.GeoShape#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.GeoShape#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.GeoShape#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.GeoShape#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.GeoShape#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.GeoShape#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.GeoShape#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.GeoShape#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.GeoShape#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.GeoShape#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.GeoShape#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.GeoShape#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.GeoShape#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.GeoShape#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.GeoShape#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.GeoShape#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Polyline" local-name="Polyline" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a polyline in geo-space. It is defined by a path
containing the vertices of a polyline (lat, lng, alt values) and a pen
to use when tracing the path on the map.</p></prose>
            </description>
            <extends>
              <type ref="H.map.GeoShape"/>
            </extends>
            <constructor local-name="Polyline" name="H.map.Polyline">
              <param name="strip">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip describing this polygon's vertices</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Polyline.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Polyline.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional initialization parameters</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.Polyline#getArrows" local-name="getArrows" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the arrow style from this object or <code>undefined</code> if no arrow style is defined.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.ArrowStyle"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.map.ArrowStyle"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setArrows" local-name="setArrows" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the arrow style of this object.</p></prose>
              </description>
              <param name="opt_arrows" optional="true">
                <types>
                  <type ref="H.map.ArrowStyle"/>
                  <type ref="H.map.ArrowStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.ArrowStyle"/>
                    </type>
                    <type>
                      <name name="H.map.ArrowStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>the arrow style to be applied</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Polyline"/>
                </types>
                <ctype>
                  <name name="H.map.Polyline"/>
                </ctype>
                <description>
                  <prose><p>the Polyline instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#clip" local-name="clip" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method clips this polyline against a rectangular area and returns the intersecting sub-lines.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline.treeEntryIndexComparator_" local-name="treeEntryIndexComparator_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Compares two leg entries returned from a quad tree by their insertion index use for Array#sort()</p></prose>
              </description>
              <param name="entryA">
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="entryB">
                <types>
                  <type ref="H.util.QuadTree.Entry"/>
                </types>
                <ctype>
                  <name name="H.util.QuadTree.Entry"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getStripsForGeoRect_" local-name="getStripsForGeoRect_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Computes a collection of strips which intersects with the given geographical rectangle</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>The geographical rectangular area to query</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.Polyline.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options which are used to initialize a polyline</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="style"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.SpatialStyle"/>
                        </type>
                        <type>
                          <name name="H.map.SpatialStyle.Options"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="arrows"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.ArrowStyle"/>
                        </type>
                        <type>
                          <name name="H.map.ArrowStyle.Options"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Polyline.Options#style" local-name="style" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the
          style to be used when tracing the polyline</p></prose>
                </description>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#arrows" local-name="arrows" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The arrows style to be used when rendering the polyline.</p></prose>
                </description>
                <types>
                  <type ref="H.map.ArrowStyle"/>
                  <type ref="H.map.ArrowStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.ArrowStyle"/>
                    </type>
                    <type>
                      <name name="H.map.ArrowStyle.Options"/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>An optional boolean value indicating whether this
          map object is visible, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Polyline.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of
          ObjectProvider wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
            </typedef>
            <event name="H.map.Polyline#event:stripchange" local-name="stripchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.GeoShape#event:stripchange">
              <description>
                <prose><p>Fired when this spatial's strip changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polyline#strip" local-name="strip" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#strip">
              <description>
                <prose><p>The strip to describe the shape in geo-space</p></prose>
              </description>
              <types>
                <type ref="H.geo.Strip"/>
              </types>
              <ctype>
                <name name="H.geo.Strip" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getStrip" local-name="getStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#getStrip">
              <description>
                <prose><p>This method returns the strip which represents the shape of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setStrip" local-name="setStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#setStrip">
              <description>
                <prose><p>This method sets the geo-information for the spatial object</p></prose>
              </description>
              <param name="strip" nullable="true">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The strip which represents the shape of the spatial object.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.GeoShape"/>
                </types>
                <ctype>
                  <name name="H.map.GeoShape"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getBounds" local-name="getBounds" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.GeoShape#getBounds">
              <description>
                <prose><p>This method returns the bounding rectangle for this object. The rectangle
is the smallest rectangle which encloses all points of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#projectGeoStrips" local-name="projectGeoStrips" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectGeoStrips">
              <description>
                <prose><p>Projects geo-strips to x,y strips
DON'T publish, API-internal use only by SpatiaTile!</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geo-strips to project</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether the strip is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the projected strips</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#projectDenormalized_" local-name="projectDenormalized_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectDenormalized_">
              <description>
                <prose><p>Returns an array of coordinates which are denormalized but they cover the shape. Denormalized means
that returned array of projected coordinates should contain points computed out of longitudes which are
bigger than 180 or smaller than -180 degrees.</p></prose>
              </description>
              <param name="coords">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of lat, lng...</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Flag if the shape is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <param name="opt_shift" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Optional value to determine of shifting to left or right world (+-360)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of 2D points</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#denormalizeLastLng_" local-name="denormalizeLastLng_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalizeLastLng_">
              <description>
                <prose><p>To keep the last longitude, needed by denormalize<em>()
Must be reset to 0 for each execution of projectDenormalized</em> before calling denormalize_</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#denormalize_" local-name="denormalize_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalize_">
              <description>
                <prose><p>To create a Point with denormalized longitudes, necessary for sequential longitudes with a delta &gt; 180 degrees</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="shift">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Polyline#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Spatial#event:stylechange">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polyline#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#style">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#getStyle">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#setStyle">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#PX_CLIP_MARGIN">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#FULLY_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#NOT_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#isClosed_">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#isClosed">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.Spatial#getGeometry">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.Spatial#getHybridIdx">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Polyline#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Polyline#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polyline#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Polyline#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Polyline#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Polyline#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Polyline#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Polyline#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Polyline#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Polyline#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Polyline#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Polyline#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polyline#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polyline#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Polyline#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Polyline#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polyline#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polyline#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polyline#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polyline#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polyline#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Polyline#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Polygon" local-name="Polygon" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a polygon in geo-space. It is defined by a strip
containing the vertices of a geo shape object (lat, lng, alt values) and a pen
to use when rendering the polyline.
Polygon represents a closed plane defined by the list of verticies, projected
on the map display. List of vericies which define the polygon are is a list
of geo coordinates encapsulated by the strip object <link ref="H.geo.Strip" /></p></prose>
            </description>
            <extends>
              <type ref="H.map.GeoShape"/>
            </extends>
            <constructor local-name="Polygon" name="H.map.Polygon">
              <param name="strip">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip describing this polygon's vertices</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Spatial.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional initialization parameters</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.Polygon#closeOpenPolygon_" local-name="closeOpenPolygon_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method closes an &quot;open polygon&quot; by multiplying the strip across the x-axis and adding the closing legs north- or
southwards (depending on the &quot;northwards&quot; argument).</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The strip list</p></prose>
                </description>
              </param>
              <param name="northwards">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether to close the polygon north- or southwards</p></prose>
                </description>
              </param>
              <param name="pxProj">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified strip list</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#coversCoords_" local-name="coversCoords_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method tests if a given point is within a 2D polygon area.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The x-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The y-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="pixelStrip">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the strip describing the polygon</p></prose>
                </description>
              </param>
              <param name="rayCastFromSouthPole">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether to
 check by ray casting from south (true) or north (false)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the point is within the polygon, false otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getStripFromResult_" local-name="getStripFromResult_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method converts a clipping result back to an x,y array</p></prose>
              </description>
              <param name="result">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the clipping result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the x,y array</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#bounds" local-name="bounds" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The cached bounds of the polygon</p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#isCoveringNorthPole" local-name="isCoveringNorthPole" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" />
IMPORTANT:
If a sub-classes doesn't calculate the strip during construction time (still null), they must adjust this property
during the lazy strip calculation when getStrip() is called.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#setNorthPoleCovering" local-name="setNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the indicator whether this polygon covers the north pole.
It's needed for Polygons whose strip is defined as lines arround the world on longitude axis
(for example a circle whose center is one of the poles).
In this case a additional information is needed to know if the southern or northern part of the world should be
covered by the poygon.</p></prose>
              </description>
              <param name="flag">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A value of <code>true</code> means it covers the north pole, <code>false</code> means south pole</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Polygon"/>
                </types>
                <ctype>
                  <name name="H.map.Polygon"/>
                </ctype>
                <description>
                  <prose><p>the Polygon instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getNorthPoleCovering" local-name="getNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" /></p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#preparedStripForDateBorder_" local-name="preparedStripForDateBorder_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#clip" local-name="clip" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the rectangular area against which to clip</p></prose>
                </description>
              </param>
              <param name="projection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>a projection to use for bounding box padding</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#sanitizePolygonPoints_" local-name="sanitizePolygonPoints_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method sanitizes a polygon strip by adding additional points if the
shape touches the date border. It returns a new array with lat, lng values.</p></prose>
              </description>
              <param name="latLngAltArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the lat,lng,alt array from the poylgon's strip.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the santized lat,lng values from the strip.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#addDateBorderPoint_" local-name="addDateBorderPoint_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Algorithm adds two points laying on date border if polygon strip crosses it.
This operation is needed to rotate strip correctly (see also
<link ref="H.map.Polygon#_rotateStripCoords" />) if that polygon is &quot;open&quot;
(covering a pole).
This method is destructive, meaning that it modifies the data passed in
rather than copying the array.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of alternating lat,lng values</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified array</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#rotateStripCoords_" local-name="rotateStripCoords_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Rotate the array of coordinates to start with point which has longitude most
similar to given longitude. In general passed coordArray is spliced and
concatenated to start with that coordinate.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </param>
              <param name="longitude">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Polygon#event:stripchange" local-name="stripchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.GeoShape#event:stripchange">
              <description>
                <prose><p>Fired when this spatial's strip changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polygon#strip" local-name="strip" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#strip">
              <description>
                <prose><p>The strip to describe the shape in geo-space</p></prose>
              </description>
              <types>
                <type ref="H.geo.Strip"/>
              </types>
              <ctype>
                <name name="H.geo.Strip" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getStrip" local-name="getStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#getStrip">
              <description>
                <prose><p>This method returns the strip which represents the shape of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setStrip" local-name="setStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#setStrip">
              <description>
                <prose><p>This method sets the geo-information for the spatial object</p></prose>
              </description>
              <param name="strip" nullable="true">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The strip which represents the shape of the spatial object.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.GeoShape"/>
                </types>
                <ctype>
                  <name name="H.map.GeoShape"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getBounds" local-name="getBounds" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.GeoShape#getBounds">
              <description>
                <prose><p>This method returns the bounding rectangle for this object. The rectangle
is the smallest rectangle which encloses all points of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#projectGeoStrips" local-name="projectGeoStrips" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectGeoStrips">
              <description>
                <prose><p>Projects geo-strips to x,y strips
DON'T publish, API-internal use only by SpatiaTile!</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geo-strips to project</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether the strip is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the projected strips</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#projectDenormalized_" local-name="projectDenormalized_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectDenormalized_">
              <description>
                <prose><p>Returns an array of coordinates which are denormalized but they cover the shape. Denormalized means
that returned array of projected coordinates should contain points computed out of longitudes which are
bigger than 180 or smaller than -180 degrees.</p></prose>
              </description>
              <param name="coords">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of lat, lng...</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Flag if the shape is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <param name="opt_shift" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Optional value to determine of shifting to left or right world (+-360)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of 2D points</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#denormalizeLastLng_" local-name="denormalizeLastLng_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalizeLastLng_">
              <description>
                <prose><p>To keep the last longitude, needed by denormalize<em>()
Must be reset to 0 for each execution of projectDenormalized</em> before calling denormalize_</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#denormalize_" local-name="denormalize_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalize_">
              <description>
                <prose><p>To create a Point with denormalized longitudes, necessary for sequential longitudes with a delta &gt; 180 degrees</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="shift">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Polygon#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Spatial#event:stylechange">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polygon#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#style">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#getStyle">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#setStyle">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#PX_CLIP_MARGIN">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#FULLY_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#NOT_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#isClosed_">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#isClosed">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.Spatial#getGeometry">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.Spatial#getHybridIdx">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Polygon#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Polygon#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Polygon#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Polygon#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Polygon#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Polygon#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Polygon#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Polygon#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Polygon#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Polygon#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Polygon#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Polygon#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polygon#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Polygon#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Polygon#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Polygon#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polygon#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Polygon#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polygon#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polygon#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Polygon#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Polygon#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Rect" local-name="Rect" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A Polygon with a rectangular shape.</p></prose>
            </description>
            <extends>
              <type ref="H.map.Polygon"/>
            </extends>
            <constructor local-name="Rect" name="H.map.Rect">
              <param name="bounds">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>The geographical bounding box for this rectangle</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Spatial.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial.Options" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.Rect#setBounds" local-name="setBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the bounds of this rectangle.</p></prose>
              </description>
              <param name="bounds">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#getStrip_" local-name="getStrip_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To get the computed strip of the rectangle</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#closeOpenPolygon_" local-name="closeOpenPolygon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#closeOpenPolygon_">
              <description>
                <prose><p>This method closes an &quot;open polygon&quot; by multiplying the strip across the x-axis and adding the closing legs north- or
southwards (depending on the &quot;northwards&quot; argument).</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The strip list</p></prose>
                </description>
              </param>
              <param name="northwards">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether to close the polygon north- or southwards</p></prose>
                </description>
              </param>
              <param name="pxProj">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified strip list</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#coversCoords_" local-name="coversCoords_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#coversCoords_">
              <description>
                <prose><p>This method tests if a given point is within a 2D polygon area.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The x-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The y-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="pixelStrip">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the strip describing the polygon</p></prose>
                </description>
              </param>
              <param name="rayCastFromSouthPole">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether to
 check by ray casting from south (true) or north (false)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the point is within the polygon, false otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getStripFromResult_" local-name="getStripFromResult_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#getStripFromResult_">
              <description>
                <prose><p>This method converts a clipping result back to an x,y array</p></prose>
              </description>
              <param name="result">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the clipping result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the x,y array</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#bounds" local-name="bounds" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#bounds">
              <description>
                <prose><p>The cached bounds of the polygon</p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Rect#isCoveringNorthPole" local-name="isCoveringNorthPole" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#isCoveringNorthPole">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" />
IMPORTANT:
If a sub-classes doesn't calculate the strip during construction time (still null), they must adjust this property
during the lazy strip calculation when getStrip() is called.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Rect#setNorthPoleCovering" local-name="setNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#setNorthPoleCovering">
              <description>
                <prose><p>To set the indicator whether this polygon covers the north pole.
It's needed for Polygons whose strip is defined as lines arround the world on longitude axis
(for example a circle whose center is one of the poles).
In this case a additional information is needed to know if the southern or northern part of the world should be
covered by the poygon.</p></prose>
              </description>
              <param name="flag">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A value of <code>true</code> means it covers the north pole, <code>false</code> means south pole</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Polygon"/>
                </types>
                <ctype>
                  <name name="H.map.Polygon"/>
                </ctype>
                <description>
                  <prose><p>the Polygon instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getNorthPoleCovering" local-name="getNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#getNorthPoleCovering">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" /></p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#preparedStripForDateBorder_" local-name="preparedStripForDateBorder_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#preparedStripForDateBorder_">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#clip" local-name="clip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#clip">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the rectangular area against which to clip</p></prose>
                </description>
              </param>
              <param name="projection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>a projection to use for bounding box padding</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#sanitizePolygonPoints_" local-name="sanitizePolygonPoints_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#sanitizePolygonPoints_">
              <description>
                <prose><p>This method sanitizes a polygon strip by adding additional points if the
shape touches the date border. It returns a new array with lat, lng values.</p></prose>
              </description>
              <param name="latLngAltArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the lat,lng,alt array from the poylgon's strip.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the santized lat,lng values from the strip.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#addDateBorderPoint_" local-name="addDateBorderPoint_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#addDateBorderPoint_">
              <description>
                <prose><p>Algorithm adds two points laying on date border if polygon strip crosses it.
This operation is needed to rotate strip correctly (see also
<link ref="H.map.Polygon#_rotateStripCoords" />) if that polygon is &quot;open&quot;
(covering a pole).
This method is destructive, meaning that it modifies the data passed in
rather than copying the array.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of alternating lat,lng values</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified array</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#rotateStripCoords_" local-name="rotateStripCoords_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#rotateStripCoords_">
              <description>
                <prose><p>Rotate the array of coordinates to start with point which has longitude most
similar to given longitude. In general passed coordArray is spliced and
concatenated to start with that coordinate.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </param>
              <param name="longitude">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Rect#event:stripchange" local-name="stripchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.GeoShape#event:stripchange">
              <description>
                <prose><p>Fired when this spatial's strip changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Rect#strip" local-name="strip" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#strip">
              <description>
                <prose><p>The strip to describe the shape in geo-space</p></prose>
              </description>
              <types>
                <type ref="H.geo.Strip"/>
              </types>
              <ctype>
                <name name="H.geo.Strip" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getStrip" local-name="getStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#getStrip">
              <description>
                <prose><p>This method returns the strip which represents the shape of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setStrip" local-name="setStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#setStrip">
              <description>
                <prose><p>This method sets the geo-information for the spatial object</p></prose>
              </description>
              <param name="strip" nullable="true">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The strip which represents the shape of the spatial object.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.GeoShape"/>
                </types>
                <ctype>
                  <name name="H.map.GeoShape"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getBounds" local-name="getBounds" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.GeoShape#getBounds">
              <description>
                <prose><p>This method returns the bounding rectangle for this object. The rectangle
is the smallest rectangle which encloses all points of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#projectGeoStrips" local-name="projectGeoStrips" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectGeoStrips">
              <description>
                <prose><p>Projects geo-strips to x,y strips
DON'T publish, API-internal use only by SpatiaTile!</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geo-strips to project</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether the strip is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the projected strips</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#projectDenormalized_" local-name="projectDenormalized_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectDenormalized_">
              <description>
                <prose><p>Returns an array of coordinates which are denormalized but they cover the shape. Denormalized means
that returned array of projected coordinates should contain points computed out of longitudes which are
bigger than 180 or smaller than -180 degrees.</p></prose>
              </description>
              <param name="coords">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of lat, lng...</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Flag if the shape is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <param name="opt_shift" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Optional value to determine of shifting to left or right world (+-360)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of 2D points</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#denormalizeLastLng_" local-name="denormalizeLastLng_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalizeLastLng_">
              <description>
                <prose><p>To keep the last longitude, needed by denormalize<em>()
Must be reset to 0 for each execution of projectDenormalized</em> before calling denormalize_</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Rect#denormalize_" local-name="denormalize_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalize_">
              <description>
                <prose><p>To create a Point with denormalized longitudes, necessary for sequential longitudes with a delta &gt; 180 degrees</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="shift">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Rect#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Spatial#event:stylechange">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Rect#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#style">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#getStyle">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#setStyle">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#PX_CLIP_MARGIN">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Rect#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#FULLY_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Rect#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#NOT_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Rect#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#isClosed_">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Rect#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#isClosed">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.Spatial#getGeometry">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.Spatial#getHybridIdx">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Rect#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Rect#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Rect#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Rect#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Rect#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Rect#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Rect#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Rect#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Rect#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Rect#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Rect#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Rect#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Rect#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Rect#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Rect#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Rect#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Rect#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Rect#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Rect#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Rect#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Rect#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Rect#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Rect#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <ns name="H.map.render" local-name="render" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Contains functionality for the map rendering</p></prose>
            </description>
            <ns name="H.map.render.p2d" local-name="p2d" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Contains functionality specific for 2-D map rendering</p></prose>
              </description>
              <ns name="H.map.render.p2d.canvas" local-name="canvas" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Contains functionality for canvas based rendering</p></prose>
                </description>
                <class name="H.map.render.p2d.canvas.MarkerRenderer" local-name="MarkerRenderer" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This renderer fetches Marker objects from the associated layer and render them on a Canvas Surface.</p></prose>
                  </description>
                  <extends>
                    <type ref="H.map.render.p2d.MarkerRenderer"/>
                  </extends>
                  <constructor local-name="MarkerRenderer" name="H.map.render.p2d.canvas.MarkerRenderer">
                    <param name="layer">
                      <types>
                        <type ref="H.map.layer.IMarkerLayer"/>
                      </types>
                      <ctype>
                        <name name="H.map.layer.IMarkerLayer"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="surface">
                      <types>
                        <type ref="H.map.render.p2d.canvas.Surface"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.canvas.Surface"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="opt_options" optional="true">
                      <types>
                        <type ref="H.map.render.p2d.MarkerRenderer.Options"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.MarkerRenderer.Options" optional="true"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                  </constructor>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#markerDataList_" local-name="markerDataList_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>A list of MarkerData for all currently rendered markers in ascending z-order.
It's needed for hit testing and is reset at the begin of each render() call</p></prose>
                    </description>
                    <types>
                      <type ref="Array.&lt;H.map.render.p2d.MarkerRenderer.MarkerData&gt;"/>
                    </types>
                    <ctype>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.map.render.p2d.MarkerRenderer.MarkerData"/>
                        </app>
                      </typed>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#layer" local-name="layer" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#layer">
                    <description>
                      <prose><p>A reference to the associated layer, initialzed by constructor</p></prose>
                    </description>
                    <types>
                      <type ref="H.map.layer.IMarkerLayer"/>
                    </types>
                    <ctype>
                      <name name="H.map.layer.IMarkerLayer"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#surface" local-name="surface" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#surface">
                    <description>
                      <prose><p>A reference to the associated surface, initialzed by constructor</p></prose>
                    </description>
                    <types>
                      <type ref="H.map.render.p2d.Surface"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.Surface"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#enableSubpixelRendering" local-name="enableSubpixelRendering" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#enableSubpixelRendering">
                    <description>
                      <prose><p>Indicates whether subpixel rendering is enabled, initialzed by constructor</p></prose>
                    </description>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#ownerDocument" local-name="ownerDocument" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#ownerDocument">
                    <description>
                      <prose><p>A reference to the associated DOM document, initialzed by constructor</p></prose>
                    </description>
                    <types>
                      <type ref="Document"/>
                    </types>
                    <ctype>
                      <name name="Document"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#markerDataDict" local-name="markerDataDict" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#markerDataDict">
                    <description>
                      <prose><p>A dictionary (marker ID ==&gt; MarkerData) for all currently rendered markers.</p></prose>
                    </description>
                    <types>
                      <type ref="!Object.&lt;string, !H.map.render.p2d.MarkerRenderer.MarkerData&gt;"/>
                    </types>
                    <ctype>
                      <typed nullable="false">
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="H.map.render.p2d.MarkerRenderer.MarkerData" nullable="false"/>
                        </app>
                      </typed>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#prevMarkerDataDict" local-name="prevMarkerDataDict" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#prevMarkerDataDict">
                    <description>
                      <prose><p>A dictionary (marker ID ==&gt; MarkerData) for all previously rendered markers.</p></prose>
                    </description>
                    <types>
                      <type ref="!Object.&lt;string, H.map.render.p2d.MarkerRenderer.MarkerData&gt;"/>
                    </types>
                    <ctype>
                      <typed nullable="false">
                        <base>
                          <name name="Object"/>
                        </base>
                        <app>
                          <name name="string"/>
                        </app>
                        <app>
                          <name name="H.map.render.p2d.MarkerRenderer.MarkerData"/>
                        </app>
                      </typed>
                    </ctype>
                  </property>
                  <method name="H.map.render.p2d.canvas.MarkerRenderer#getSurface" local-name="getSurface" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#getSurface">
                    <description>
                      <prose><p>This method returns surface used by the renderer</p></prose>
                    </description>
                    <returns>
                      <types>
                        <type ref="H.map.render.p2d.Surface"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.Surface"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#fetchMarkers" local-name="fetchMarkers" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#fetchMarkers">
                    <description>
                      <prose><p>To fetch markers from the layer</p></prose>
                    </description>
                  </property>
                  <method name="H.map.render.p2d.canvas.MarkerRenderer#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#render">
                    <description>
                      <prose><p>It fetches all markers for the given bounding box and zoom level and render them on the surface</p></prose>
                    </description>
                    <param name="bBox">
                      <types>
                        <type ref="H.geo.Rect"/>
                      </types>
                      <ctype>
                        <name name="H.geo.Rect"/>
                      </ctype>
                      <description>
                        <prose><p>The bounding box for which the markers should be rendered</p></prose>
                      </description>
                    </param>
                    <param name="screenCenter">
                      <types>
                        <type ref="H.math.Point"/>
                      </types>
                      <ctype>
                        <name name="H.math.Point"/>
                      </ctype>
                      <description>
                        <prose><p>The screen center coordinates</p></prose>
                      </description>
                    </param>
                    <param name="projection">
                      <types>
                        <type ref="H.geo.PixelProjection"/>
                      </types>
                      <ctype>
                        <name name="H.geo.PixelProjection"/>
                      </ctype>
                      <description>
                        <prose><p>The render engine's pixel projection</p></prose>
                      </description>
                    </param>
                    <param name="zoomLevel">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The zoom level for which the markers should be rendered</p></prose>
                      </description>
                    </param>
                    <param name="cacheOnly">
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean"/>
                      </ctype>
                      <description>
                        <prose><p>Indicates whether only cached markers are to be considered</p></prose>
                      </description>
                    </param>
                    <param name="prioCenter">
                      <types>
                        <type ref="H.math.Point"/>
                      </types>
                      <ctype>
                        <name name="H.math.Point"/>
                      </ctype>
                      <description>
                        <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                      </description>
                    </param>
                    <returns>
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#renderMarker" local-name="renderMarker" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.MarkerRenderer#renderMarker">
                    <description>
                      <prose><p>To draw a single marker on this renderers surface</p></prose>
                    </description>
                  </property>
                  <method name="H.map.render.p2d.canvas.MarkerRenderer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Disposable#addOnDisposeCallback">
                    <description>
                      <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
                    </description>
                    <param name="callback">
                      <types>
                        <type ref="function"/>
                      </types>
                      <ctype>
                        <name name="Function" nullable="false"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="opt_scope" optional="true">
                      <types>
                        <type ref="Object"/>
                      </types>
                      <ctype>
                        <name name="Object" optional="true"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                  </method>
                  <property name="H.map.render.p2d.canvas.MarkerRenderer#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.IPickable#getObjectsAt">
                    <description>
                      <prose><p>To retrieve map objects at the given screen coordinates.</p></prose>
                    </description>
                  </property>
                </class>
                <class name="H.map.render.p2d.canvas.TileRenderer" local-name="TileRenderer" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Image renderer, places image tiles provided by the layer on the given surface.</p></prose>
                  </description>
                  <extends>
                    <type ref="H.map.render.p2d.IPickable"/>
                  </extends>
                  <constructor local-name="TileRenderer" name="H.map.render.p2d.canvas.TileRenderer">
                    <param name="layer">
                      <types>
                        <type ref="H.map.layer.TileLayer"/>
                      </types>
                      <ctype>
                        <name name="H.map.layer.TileLayer"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="surface">
                      <types>
                        <type ref="H.map.render.p2d.canvas.Surface"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.canvas.Surface"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="opt_options" optional="true">
                      <types>
                        <type ref="H.map.render.p2d.canvas.TileRenderer.Options"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.canvas.TileRenderer.Options" optional="true"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                  </constructor>
                  <typedef name="H.map.render.p2d.canvas.TileRenderer.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>Options which can be used to initialize the TileRenderer object.</p></prose>
                    </description>
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object"/>
                    </ctype>
                    <property name="H.map.render.p2d.canvas.TileRenderer.Options#enableSubpixelRendering" local-name="enableSubpixelRendering" access="public" scope="" virtual="false" published="false" exported="false">
                      <description>
                        <prose></prose>
                      </description>
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean"/>
                      </ctype>
                    </property>
                  </typedef>
                  <property name="H.map.render.p2d.canvas.TileRenderer#layer_" local-name="layer_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose></prose>
                    </description>
                  </property>
                  <property name="H.map.render.p2d.canvas.TileRenderer#surface_" local-name="surface_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose></prose>
                    </description>
                  </property>
                  <property name="H.map.render.p2d.canvas.TileRenderer#placedTiles_" local-name="placedTiles_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose></prose>
                    </description>
                  </property>
                  <method name="H.map.render.p2d.canvas.TileRenderer#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>This method requests all tiles for the given bounding box and zoom level and places them on the surface.</p></prose>
                    </description>
                    <param name="bbox">
                      <types>
                        <type ref="H.geo.Rect"/>
                      </types>
                      <ctype>
                        <name name="H.geo.Rect"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="screenCenter">
                      <types>
                        <type ref="H.math.Point"/>
                      </types>
                      <ctype>
                        <name name="H.math.Point"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="projection">
                      <types>
                        <type ref="H.geo.PixelProjection"/>
                      </types>
                      <ctype>
                        <name name="H.geo.PixelProjection"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="zoomLevel">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The zoom level for which the objects should be rendered</p></prose>
                      </description>
                    </param>
                    <param name="cacheOnly">
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean"/>
                      </ctype>
                      <description>
                        <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                      </description>
                    </param>
                    <param name="prioCenter">
                      <types>
                        <type ref="H.math.Point"/>
                      </types>
                      <ctype>
                        <name name="H.math.Point"/>
                      </ctype>
                      <description>
                        <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                      </description>
                    </param>
                    <returns>
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean"/>
                      </ctype>
                      <description>
                        <prose><p>returns true if rendering was completed (ex. all tiles were provided and placed)</p></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.TileRenderer#projection_" local-name="projection_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>Initial value is undefined, will be set in each render call</p></prose>
                    </description>
                    <types>
                      <type ref="H.geo.PixelProjection"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.geo.PixelProjection"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.TileRenderer#screenCenter_" local-name="screenCenter_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>Initial value is undefined, will be set in each render call</p></prose>
                    </description>
                    <types>
                      <type ref="H.math.Point"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.math.Point"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.TileRenderer#zoomLevel_" local-name="zoomLevel_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>Initial value is undefined, will be set in each render call</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                  </property>
                  <method name="H.map.render.p2d.canvas.TileRenderer#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>Returns visible objects under the given x/y coordinates. Array is sorted according to their drawing
order, topmost object has an index #0 in returned array.</p></prose>
                    </description>
                    <param name="x">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>x pixel coordinate</p></prose>
                      </description>
                    </param>
                    <param name="y">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>y pixel coordinate</p></prose>
                      </description>
                    </param>
                    <param name="opt_topMostOnly" optional="true">
                      <types>
                        <type ref="boolean"/>
                      </types>
                      <ctype>
                        <name name="boolean" optional="true"/>
                      </ctype>
                      <description>
                        <prose><p>optional flag, if set method returns array with single element that is located
on top</p></prose>
                      </description>
                    </param>
                    <returns>
                      <types>
                        <type ref="Array.&lt;H.map.Object&gt;"/>
                      </types>
                      <ctype>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.Object"/>
                          </app>
                        </typed>
                      </ctype>
                      <description>
                        <prose><p>array of map objects</p></prose>
                      </description>
                    </returns>
                  </method>
                </class>
                <class name="H.map.render.p2d.canvas.Surface" local-name="Surface" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Class represents a drawing surface based on canvas.</p></prose>
                  </description>
                  <extends>
                    <type ref="H.map.render.p2d.Surface"/>
                  </extends>
                  <constructor local-name="Surface" name="H.map.render.p2d.canvas.Surface">
                    <param name="container">
                      <types>
                        <type ref="Element"/>
                      </types>
                      <ctype>
                        <name name="Element"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="width">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The width of the surface in pixels (already multiplied by pixelRatio)</p></prose>
                      </description>
                    </param>
                    <param name="height">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The height of the surface in pixels (already multiplied by pixelRatio)</p></prose>
                      </description>
                    </param>
                    <param name="pixelRatio">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                  </constructor>
                  <property name="H.map.render.p2d.canvas.Surface#ctx_" local-name="ctx_" access="private" scope="instance" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>The drawing context of the canvas element</p></prose>
                    </description>
                    <types>
                      <type ref="CanvasRenderingContext2D"/>
                    </types>
                    <ctype>
                      <name name="CanvasRenderingContext2D"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#container" local-name="container" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#container">
                    <description>
                      <prose><p>Reference to this surface container element</p></prose>
                    </description>
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#pixelRatio" local-name="pixelRatio" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#pixelRatio">
                    <description>
                      <prose><p>The pixel ratio of this surface</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#element" local-name="element" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#element">
                    <description>
                      <prose><p>Reference to this surface's element</p></prose>
                    </description>
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#createElement" local-name="createElement" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.Surface#createElement">
                    <description>
                      <prose><p>To create the element of this surface</p></prose>
                    </description>
                  </property>
                  <method name="H.map.render.p2d.canvas.Surface#getContainer" local-name="getContainer" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#getContainer">
                    <description>
                      <prose><p>This method returns the surface's container element.</p></prose>
                    </description>
                    <returns>
                      <types>
                        <type ref="Element"/>
                      </types>
                      <ctype>
                        <name name="Element"/>
                      </ctype>
                      <description>
                        <prose><p>the container element</p></prose>
                      </description>
                    </returns>
                  </method>
                  <method name="H.map.render.p2d.canvas.Surface#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#getElement">
                    <description>
                      <prose><p>This method returns the surface element.</p></prose>
                    </description>
                    <returns>
                      <types>
                        <type ref="Element"/>
                      </types>
                      <ctype>
                        <name name="Element"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.Surface#width" local-name="width" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#width">
                    <description>
                      <prose><p>The width of this surface in CSS pixels</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#height" local-name="height" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#height">
                    <description>
                      <prose><p>The height of this surface in CSS pixels</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <method name="H.map.render.p2d.canvas.Surface#setSize" local-name="setSize" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#setSize">
                    <description>
                      <prose><p>To set the size of this surface</p></prose>
                    </description>
                    <param name="width">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The width of the surface in pixels, minimum is 1 pixel</p></prose>
                      </description>
                    </param>
                    <param name="height">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The height of the surface in pixels, minimum is 1 pixel</p></prose>
                      </description>
                    </param>
                  </method>
                  <method name="H.map.render.p2d.canvas.Surface#getSize" local-name="getSize" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#getSize">
                    <description>
                      <prose><p>To get the size and pixelRatio of this surface</p></prose>
                    </description>
                    <returns>
                      <types>
                        <type ref="H.map.render.p2d.Surface.Size"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.Surface.Size"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.Surface#setSizeInternal" local-name="setSizeInternal" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.Surface#setSizeInternal">
                    <description>
                      <prose><p>To adjust the size of this surface</p></prose>
                    </description>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#opacity" local-name="opacity" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#opacity">
                    <description>
                      <prose><p>The opacity of this surface, default is <code>1</code></p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <method name="H.map.render.p2d.canvas.Surface#setOpacity" local-name="setOpacity" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#setOpacity">
                    <description>
                      <prose><p>To set the opacity of this surface.</p></prose>
                    </description>
                    <param name="opacity">
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>The opacity value in range <code>[0...1]</code></p></prose>
                      </description>
                    </param>
                  </method>
                  <method name="H.map.render.p2d.canvas.Surface#getOpacity" local-name="getOpacity" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#getOpacity">
                    <description>
                      <prose><p>Returns the current opacity of this surface</p></prose>
                    </description>
                    <returns>
                      <types>
                        <type ref="number"/>
                      </types>
                      <ctype>
                        <name name="number"/>
                      </ctype>
                      <description>
                        <prose><p>opacity</p></prose>
                      </description>
                    </returns>
                  </method>
                  <property name="H.map.render.p2d.canvas.Surface#setOpacityInternal" local-name="setOpacityInternal" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.Surface#setOpacityInternal">
                    <description>
                      <prose><p>To set the opacity of this surface.</p></prose>
                    </description>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#draw" local-name="draw" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#draw">
                    <description>
                      <prose><p>To draw an element onto this surface</p></prose>
                    </description>
                  </property>
                  <property name="H.map.render.p2d.canvas.Surface#clear" local-name="clear" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#clear">
                    <description>
                      <prose><p>To clear the surface. If no opt_target argument is specified the whole surface is cleared.
Some Surfaces need a clear() before drawing new content (e.g. Canvas based) others needs a clear(target) afterwards
(e.g. DOM based)</p></prose>
                    </description>
                  </property>
                  <method name="H.map.render.p2d.canvas.Surface#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.p2d.Surface#disposeInternal">
                    <description>
                      <prose><p>Protected implementation of H.util.Disposable.disposeInternal</p></prose>
                    </description>
                  </method>
                  <method name="H.map.render.p2d.canvas.Surface#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Disposable#addOnDisposeCallback">
                    <description>
                      <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
                    </description>
                    <param name="callback">
                      <types>
                        <type ref="function"/>
                      </types>
                      <ctype>
                        <name name="Function" nullable="false"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                    <param name="opt_scope" optional="true">
                      <types>
                        <type ref="Object"/>
                      </types>
                      <ctype>
                        <name name="Object" optional="true"/>
                      </ctype>
                      <description>
                        <prose></prose>
                      </description>
                    </param>
                  </method>
                </class>
              </ns>
              <interface name="H.map.render.p2d.IPickable" local-name="IPickable" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Interface defines is used to define renderers that contain map objects and can be fetched by screen coordinate</p></prose>
                </description>
                <property name="H.map.render.p2d.IPickable#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To retrieve map objects at the given screen coordinates.</p></prose>
                  </description>
                </property>
              </interface>
              <class name="H.map.render.p2d.MarkerRenderer" local-name="MarkerRenderer" access="public" scope="static" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>MarkerRender is responsible for correctly placing and rendering image markers
on the map, fetched from the given layer.</p></prose>
                </description>
                <extends>
                  <type ref="H.util.Disposable"/>
                </extends>
                <extends>
                  <type ref="H.map.render.p2d.IPickable"/>
                </extends>
                <constructor local-name="MarkerRenderer" name="H.map.render.p2d.MarkerRenderer">
                  <param name="layer">
                    <types>
                      <type ref="H.map.layer.IMarkerLayer"/>
                    </types>
                    <ctype>
                      <name name="H.map.layer.IMarkerLayer"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="surface">
                    <types>
                      <type ref="H.map.render.p2d.Surface"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.Surface"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_options" optional="true">
                    <types>
                      <type ref="H.map.render.p2d.MarkerRenderer.Options"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.MarkerRenderer.Options" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </constructor>
                <property name="H.map.render.p2d.MarkerRenderer#layer" local-name="layer" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A reference to the associated layer, initialzed by constructor</p></prose>
                  </description>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.IMarkerLayer"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.MarkerRenderer#surface" local-name="surface" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A reference to the associated surface, initialzed by constructor</p></prose>
                  </description>
                  <types>
                    <type ref="H.map.render.p2d.Surface"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.p2d.Surface"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.MarkerRenderer#enableSubpixelRendering" local-name="enableSubpixelRendering" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Indicates whether subpixel rendering is enabled, initialzed by constructor</p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.MarkerRenderer#ownerDocument" local-name="ownerDocument" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A reference to the associated DOM document, initialzed by constructor</p></prose>
                  </description>
                  <types>
                    <type ref="Document"/>
                  </types>
                  <ctype>
                    <name name="Document"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.MarkerRenderer#markerDataDict" local-name="markerDataDict" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A dictionary (marker ID ==&gt; MarkerData) for all currently rendered markers.</p></prose>
                  </description>
                  <types>
                    <type ref="!Object.&lt;string, !H.map.render.p2d.MarkerRenderer.MarkerData&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="false">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="H.map.render.p2d.MarkerRenderer.MarkerData" nullable="false"/>
                      </app>
                    </typed>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.MarkerRenderer#prevMarkerDataDict" local-name="prevMarkerDataDict" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A dictionary (marker ID ==&gt; MarkerData) for all previously rendered markers.</p></prose>
                  </description>
                  <types>
                    <type ref="!Object.&lt;string, H.map.render.p2d.MarkerRenderer.MarkerData&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="false">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <name name="H.map.render.p2d.MarkerRenderer.MarkerData"/>
                      </app>
                    </typed>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.MarkerRenderer#getSurface" local-name="getSurface" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method returns surface used by the renderer</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.map.render.p2d.Surface"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.Surface"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.MarkerRenderer#fetchMarkers" local-name="fetchMarkers" access="protected" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To fetch markers from the layer</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.MarkerRenderer#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>It fetches all markers for the given bounding box and zoom level and render them on the surface</p></prose>
                  </description>
                  <param name="bBox">
                    <types>
                      <type ref="H.geo.Rect"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Rect"/>
                    </ctype>
                    <description>
                      <prose><p>The bounding box for which the markers should be rendered</p></prose>
                    </description>
                  </param>
                  <param name="screenCenter">
                    <types>
                      <type ref="H.math.Point"/>
                    </types>
                    <ctype>
                      <name name="H.math.Point"/>
                    </ctype>
                    <description>
                      <prose><p>The screen center coordinates</p></prose>
                    </description>
                  </param>
                  <param name="projection">
                    <types>
                      <type ref="H.geo.PixelProjection"/>
                    </types>
                    <ctype>
                      <name name="H.geo.PixelProjection"/>
                    </ctype>
                    <description>
                      <prose><p>The render engine's pixel projection</p></prose>
                    </description>
                  </param>
                  <param name="zoomLevel">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The zoom level for which the markers should be rendered</p></prose>
                    </description>
                  </param>
                  <param name="cacheOnly">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose><p>Indicates whether only cached markers are to be considered</p></prose>
                    </description>
                  </param>
                  <param name="prioCenter">
                    <types>
                      <type ref="H.math.Point"/>
                    </types>
                    <ctype>
                      <name name="H.math.Point"/>
                    </ctype>
                    <description>
                      <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.MarkerRenderer#renderMarker" local-name="renderMarker" access="protected" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To draw a single marker on this renderers surface</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.MarkerRenderer.zOrderComparator" local-name="zOrderComparator" access="protected" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A comparator function to use for z-order sorting of marker objects - see Array.prototype.sort().</p></prose>
                  </description>
                  <param name="first">
                    <types>
                      <type ref="H.map.AbstractMarker"/>
                    </types>
                    <ctype>
                      <name name="H.map.AbstractMarker"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="second">
                    <types>
                      <type ref="H.map.AbstractMarker"/>
                    </types>
                    <ctype>
                      <name name="H.map.AbstractMarker"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <typedef name="H.map.render.p2d.MarkerRenderer.MarkerData" local-name="MarkerData" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>A structure to stores information for rendered markers.</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="marker"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="H.map.AbstractMarker"/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="invalMark"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="H.map.provider.Invalidations.Mark"/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="detail"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <all/>
                            </type>
                          </union>
                        </value>
                      </field>
                    </record>
                  </ctype>
                  <property name="H.map.render.p2d.MarkerRenderer.MarkerData#marker" local-name="marker" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>A reference to the associated marker object</p></prose>
                    </description>
                    <types>
                      <type ref="H.map.AbstractMarker"/>
                    </types>
                    <ctype>
                      <name name="H.map.AbstractMarker"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.MarkerRenderer.MarkerData#invalMark" local-name="invalMark" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>The invalidation mark of the associated marker when it was rendered</p></prose>
                    </description>
                    <types>
                      <type ref="H.map.provider.Invalidations.Mark"/>
                    </types>
                    <ctype>
                      <name name="H.map.provider.Invalidations.Mark"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.MarkerRenderer.MarkerData#detail" local-name="detail" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>A property to store renderer class specific data</p></prose>
                    </description>
                    <types>
                      <type ref="*"/>
                    </types>
                    <ctype>
                      <all/>
                    </ctype>
                  </property>
                </typedef>
                <typedef name="H.map.render.p2d.MarkerRenderer.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Options which can be used to initialize a MarkerRenderer.</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="enableSubpixelRendering"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="boolean"/>
                            </type>
                          </union>
                        </value>
                      </field>
                    </record>
                  </ctype>
                  <property name="H.map.render.p2d.MarkerRenderer.Options#enableSubpixelRendering" local-name="enableSubpixelRendering" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose></prose>
                    </description>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                  </property>
                </typedef>
                <method name="H.map.render.p2d.MarkerRenderer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Disposable#addOnDisposeCallback">
                  <description>
                    <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
                  </description>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <property name="H.map.render.p2d.MarkerRenderer#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.p2d.IPickable#getObjectsAt">
                  <description>
                    <prose><p>To retrieve map objects at the given screen coordinates.</p></prose>
                  </description>
                </property>
              </class>
              <class name="H.map.render.p2d.InteractionUtils" local-name="InteractionUtils" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Interaction utilities record current interaction values. In addition
utilities provide functionality to calculate current speed and direction which
is used fot he kinetic animation. Utilities also resolve interaction tolerances
which means that you can adjust the minimal required move or minimal time
from last interaction to trigger kinetic move. Tolerance will adjust calculated
speed and direction.</p>
<p>Utilities also resolve bifocal interaction in terms of the direction and
move vectors</p></prose>
                </description>
                <constructor local-name="InteractionUtils" name="H.map.render.p2d.InteractionUtils">
                  <param name="opt_options" optional="true">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Options"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Options" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </constructor>
                <property name="H.map.render.p2d.InteractionUtils#current_" local-name="current_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.InteractionUtils#previous_" local-name="previous_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.InteractionUtils#getMoveVector_" local-name="getMoveVector_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns a vector calculated from the itneraction delta objects
it resolves bifocality</p></prose>
                  </description>
                  <param name="point" nullable="true">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="previousPoint" nullable="true">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.math.Vector"/>
                    </types>
                    <ctype>
                      <name name="H.math.Vector"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getRecordedMove_" local-name="getRecordedMove_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns a move from the recorded point list
by the given index. Takes indexed point and previous oneto calculate the move vector</p></prose>
                  </description>
                  <param name="index">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.math.Vector"/>
                    </types>
                    <ctype>
                      <name name="H.math.Vector"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getBifocalDistance_" local-name="getBifocalDistance_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns distance between bifocal points of itneraction</p></prose>
                  </description>
                  <param name="point" nullable="true">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getBifocalCenter_" local-name="getBifocalCenter_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns the center between bifocal interaction points</p></prose>
                  </description>
                  <param name="point" nullable="true">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Point" nullable="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.math.Point"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.math.Point"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getMathPoint_" local-name="getMathPoint_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function gets point object from the record with x,y or bifocal x,y if
opt_isBifocal is set to true</p></prose>
                  </description>
                  <param name="point">
                    <types>
                      <type ref="H.map.render.p2d.InteractionUtils.Point"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.InteractionUtils.Point"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_isBifocal" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.math.Point"/>
                      <type ref="null"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.math.Point"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#start" local-name="start" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Stores the initial value for interaction</p></prose>
                  </description>
                  <param name="modifiers">
                    <types>
                      <type ref="H.map.render.RenderEngine.InteractionModifiers"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.RenderEngine.InteractionModifiers"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="isRecording">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#store" local-name="store" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Stores current interact values and the interaction vectors</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_bx" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_by" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_timestamp" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#clear" local-name="clear" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Marks interaction as ended and clears all the records if present</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#has" local-name="has" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns true if the passed modifier is included
in current interaction</p></prose>
                  </description>
                  <param name="modifier">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#isRunning" local-name="isRunning" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function indicates if there is an interaction running</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getPoints" local-name="getPoints" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns the interaction points list</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="Array.&lt;H.map.render.p2d.InteractionUtils.Point&gt;"/>
                    </types>
                    <ctype>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.map.render.p2d.InteractionUtils.Point"/>
                        </app>
                      </typed>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getDirection" local-name="getDirection" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Returns the current direction of the interaction as normalized
vector</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.math.Vector"/>
                    </types>
                    <ctype>
                      <name name="H.math.Vector"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getSpeed" local-name="getSpeed" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Returns the current interaction speed based on recorded move vectors, or if
recording is not on from the current and previous point
We are not using time to measure the speed since we cannto rely on events
timestamp (it can give you i.e 5,5 vector in 1ms difference)</p></prose>
                  </description>
                  <param name="opt_timeStamp" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getMoveVector" local-name="getMoveVector" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function return last move vector</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.math.Vector"/>
                    </types>
                    <ctype>
                      <name name="H.math.Vector"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getBifocalDistance" local-name="getBifocalDistance" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns distance between points</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getBifocalCenter" local-name="getBifocalCenter" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns center between of the last interaction records or undefined
if there is no</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.math.Point"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.math.Point"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.InteractionUtils#getBifocalZoom" local-name="getBifocalZoom" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns new zoom level according to current one and change
of distance between interaction points (pinch zoom)</p></prose>
                  </description>
                  <param name="zoomLevel">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <typedef name="H.map.render.p2d.InteractionUtils.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Options which can be used to initialize the interaction utilities</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="minSpeed"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="maxSpeed"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="vetorTolerance"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                    </record>
                  </ctype>
                  <property name="H.map.render.p2d.InteractionUtils.Options#minSpeed" local-name="minSpeed" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>minimal speed to trigger move, values lower than this value will be 0</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Options#maxSpeed" local-name="maxSpeed" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>maximum speed values greater will be narrowde to this value</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Options#vectorTolerance" local-name="vectorTolerance" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>value which indicates how many vectors (if available) should
be taken into account then calculating final speed and direction</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                </typedef>
                <typedef name="H.map.render.p2d.InteractionUtils.Point" local-name="Point" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Represents interaction point, which might be a single or bi focal interaction.</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="x"/>
                        </key>
                        <value>
                          <name name="number"/>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="y"/>
                        </key>
                        <value>
                          <name name="number"/>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="bx"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="by"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="isBifocal"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="boolean"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="ts"/>
                        </key>
                        <value>
                          <name name="number"/>
                        </value>
                      </field>
                    </record>
                  </ctype>
                  <property name="H.map.render.p2d.InteractionUtils.Point#x" local-name="x" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>position on x-axis for the interaction</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Point#y" local-name="y" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>position on y-axis for the interation</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Point#bx" local-name="bx" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>position of the second point of interaction on x-axis</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Point#by" local-name="by" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>position of the second point of interaction on y-axis</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Point#isBifocal" local-name="isBifocal" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>flag indicating the this is bifocal point and has x,y and bx,by</p></prose>
                    </description>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.InteractionUtils.Point#ts" local-name="ts" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>timestamp for the interaction</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                </typedef>
              </class>
              <class name="H.map.render.p2d.ControlUtils" local-name="ControlUtils" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Utilities for running control on engine. Utilities
provides input analysis and fire event which notifies
the engine if the control parameters has changed.
In addition provides functionality to calculate speed and direction
vectors used by the kinetics animation.</p></prose>
                </description>
                <extends>
                  <type ref="H.util.EventTarget"/>
                </extends>
                <constructor local-name="ControlUtils" name="H.map.render.p2d.ControlUtils"/>
                <event name="H.map.render.p2d.ControlUtils#event:animationupdate" local-name="animationupdate" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Fired when the current control amends or a new control starts</p></prose>
                  </description>
                  <types>
                    <type ref="H.map.render.p2d.ControlUtils.Event"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.p2d.ControlUtils.Event"/>
                  </ctype>
                </event>
                <typedef name="H.map.render.p2d.ControlUtils.ControlOffset" local-name="ControlOffset" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Represents a change (offset) values which should be applied
to the current view in every animation frame</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <property name="H.map.render.p2d.ControlUtils.ControlOffset#x" local-name="x" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>x-axis change</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.ControlUtils.ControlOffset#y" local-name="y" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>y-axis change</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.ControlUtils.ControlOffset#z" local-name="z" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>zoom level change</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                </typedef>
                <method name="H.map.render.p2d.ControlUtils#start" local-name="start" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function marks control as started and sets the hook point if
x, y specified</p></prose>
                  </description>
                  <param name="opt_atX" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_atY" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <enum name="H.map.render.p2d.ControlUtils#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Events fired by ControlUtils</p></prose>
                  </description>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <value name="H.map.render.p2d.ControlUtils#EventType.ANIMATIONUPDATE" local-name="ANIMATIONUPDATE">
                    <description>
                      <prose></prose>
                    </description>
                  </value>
                </enum>
                <class name="H.map.render.p2d.ControlUtils.Event" local-name="Event" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>ControlUtils event which is fired to notify engine that it should
changed values for current control animation</p></prose>
                  </description>
                  <extends>
                    <type ref="H.util.Event"/>
                  </extends>
                  <constructor local-name="Event" name="H.map.render.p2d.ControlUtils.Event">
                    <param name="offset">
                      <types>
                        <type ref="H.map.render.p2d.ControlUtils.ControlOffset"/>
                      </types>
                      <ctype>
                        <name name="H.map.render.p2d.ControlUtils.ControlOffset"/>
                      </ctype>
                      <description>
                        <prose><p>offset values contains information
regarding the move vector changes along the axes</p></prose>
                      </description>
                    </param>
                  </constructor>
                  <property name="H.map.render.p2d.ControlUtils.Event#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#target">
                    <description>
                      <prose><p>Object which triggered the event</p></prose>
                    </description>
                    <types>
                      <type ref="*"/>
                    </types>
                    <ctype>
                      <all/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.ControlUtils.Event#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#currentTarget">
                    <description>
                      <prose><p>Object which has listener attached</p></prose>
                    </description>
                    <types>
                      <type ref="*"/>
                    </types>
                    <ctype>
                      <all/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.ControlUtils.Event#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#type">
                    <description>
                      <prose><p>Name of the dispatched event</p></prose>
                    </description>
                    <types>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <name name="string"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.ControlUtils.Event#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#defaultPrevented">
                    <description>
                      <prose><p>Indicates if preventDefault was called on the current event</p></prose>
                    </description>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                  </property>
                  <method name="H.map.render.p2d.ControlUtils.Event#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#preventDefault">
                    <description>
                      <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
                    </description>
                  </method>
                  <method name="H.map.render.p2d.ControlUtils.Event#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Event#stopPropagation">
                    <description>
                      <prose><p>Stops propagation for current event.</p></prose>
                    </description>
                  </method>
                </class>
                <method name="H.map.render.p2d.ControlUtils#isRunning" local-name="isRunning" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function indicates if the control is running</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.ControlUtils#set" local-name="set" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function sets the current control values and fires update animation event
if the move values has changed from the last time</p></prose>
                  </description>
                  <param name="moveX">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>move on x-axis in levels per millisecond</p></prose>
                    </description>
                  </param>
                  <param name="moveY">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>move on y-axis in levels per millisecond</p></prose>
                    </description>
                  </param>
                  <param name="moveZ">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>zoom change in levels per milisecond</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.ControlUtils#getOffsetValues" local-name="getOffsetValues" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function calculates move from levels to actual offset px change</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.map.render.p2d.ControlUtils.ControlOffset"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.ControlUtils.ControlOffset"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.ControlUtils#dispatchUpdate_" local-name="dispatchUpdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function dispatches animationupdate event. Listener should
update the move animation with new offset values</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.ControlUtils#reset" local-name="reset" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function resets the values for the control</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.ControlUtils#getSpeed" local-name="getSpeed" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function return current control speed</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.ControlUtils#getDirection" local-name="getDirection" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns normalized direction</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.ControlUtils#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function disposes control utils</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.ControlUtils#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                  <description>
                    <prose></prose>
                  </description>
                  <param name="parent">
                    <types>
                      <type ref="H.util.EventTarget"/>
                    </types>
                    <ctype>
                      <name name="H.util.EventTarget"/>
                    </ctype>
                    <description>
                      <prose><p>the new parent event target</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.ControlUtils#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                  <description>
                    <prose></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.util.EventTarget"/>
                    </types>
                    <ctype>
                      <name name="H.util.EventTarget" nullable="true"/>
                    </ctype>
                    <description>
                      <prose><p>the current parent event target</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.ControlUtils#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                  <description>
                    <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                  </description>
                  <param name="type">
                    <types>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <name name="string"/>
                    </ctype>
                    <description>
                      <prose><p>name of event</p></prose>
                    </description>
                  </param>
                  <param name="handler">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose><p>event handler function</p></prose>
                    </description>
                  </param>
                  <param name="opt_capture" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>scope for the handler function</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.ControlUtils#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                  <description>
                    <prose><p>This method will removed previously added listener from the event target</p></prose>
                  </description>
                  <param name="type">
                    <types>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <name name="string"/>
                    </ctype>
                    <description>
                      <prose><p>name of event</p></prose>
                    </description>
                  </param>
                  <param name="handler">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose><p>previously added event handler</p></prose>
                    </description>
                  </param>
                  <param name="opt_capture" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>scope for the handler function</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.ControlUtils#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                  <description>
                    <prose><p>This method will dispatch event on the event target object</p></prose>
                  </description>
                  <param name="evt">
                    <types>
                      <type ref="H.util.Event"/>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.util.Event"/>
                        </type>
                        <type>
                          <name name="string"/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose><p>event object or event name</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.ControlUtils#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                  <description>
                    <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.ControlUtils#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                  <description>
                    <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                  </description>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
              </class>
              <class name="H.map.render.p2d.Surface" local-name="Surface" access="public" scope="static" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Class represents a drawing surface for a renderer.</p></prose>
                </description>
                <extends>
                  <type ref="H.util.Disposable"/>
                </extends>
                <constructor local-name="Surface" name="H.map.render.p2d.Surface">
                  <param name="container">
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                    <description>
                      <prose><p>The container where the surface element must be appended</p></prose>
                    </description>
                  </param>
                  <param name="width">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The width of the surface in pixels</p></prose>
                    </description>
                  </param>
                  <param name="height">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The height of the surface in pixels</p></prose>
                    </description>
                  </param>
                  <param name="pixelRatio">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The pixel ratio of the surface</p></prose>
                    </description>
                  </param>
                </constructor>
                <typedef name="H.map.render.p2d.Surface.Size" local-name="Size" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Data represents size of the surface, and its pixel ratio</p></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="width"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="height"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="pixelRatio"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                          </union>
                        </value>
                      </field>
                    </record>
                  </ctype>
                </typedef>
                <property name="H.map.render.p2d.Surface#container" local-name="container" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Reference to this surface container element</p></prose>
                  </description>
                  <types>
                    <type ref="Element"/>
                  </types>
                  <ctype>
                    <name name="Element"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.Surface#pixelRatio" local-name="pixelRatio" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The pixel ratio of this surface</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.Surface#element" local-name="element" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Reference to this surface's element</p></prose>
                  </description>
                  <types>
                    <type ref="Element"/>
                  </types>
                  <ctype>
                    <name name="Element"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.Surface#createElement" local-name="createElement" access="protected" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To create the element of this surface</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.Surface#getContainer" local-name="getContainer" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method returns the surface's container element.</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                    <description>
                      <prose><p>the container element</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.Surface#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method returns the surface element.</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.Surface#width" local-name="width" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The width of this surface in CSS pixels</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.Surface#height" local-name="height" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The height of this surface in CSS pixels</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.Surface#setSize" local-name="setSize" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>To set the size of this surface</p></prose>
                  </description>
                  <param name="width">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The width of the surface in pixels, minimum is 1 pixel</p></prose>
                    </description>
                  </param>
                  <param name="height">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The height of the surface in pixels, minimum is 1 pixel</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.Surface#getSize" local-name="getSize" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>To get the size and pixelRatio of this surface</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.map.render.p2d.Surface.Size"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.Surface.Size"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.Surface#setSizeInternal" local-name="setSizeInternal" access="protected" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To adjust the size of this surface</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.Surface#opacity" local-name="opacity" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The opacity of this surface, default is <code>1</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.Surface#setOpacity" local-name="setOpacity" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>To set the opacity of this surface.</p></prose>
                  </description>
                  <param name="opacity">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The opacity value in range <code>[0...1]</code></p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.Surface#getOpacity" local-name="getOpacity" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Returns the current opacity of this surface</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>opacity</p></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.Surface#setOpacityInternal" local-name="setOpacityInternal" access="protected" scope="instance" virtual="true" published="false" exported="false">
                  <description>
                    <prose><p>To set the opacity of this surface.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.Surface#draw" local-name="draw" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>To draw an element onto this surface</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.Surface#clear" local-name="clear" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>To clear the surface. If no opt_target argument is specified the whole surface is cleared.
Some Surfaces need a clear() before drawing new content (e.g. Canvas based) others needs a clear(target) afterwards
(e.g. DOM based)</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.Surface#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Protected implementation of H.util.Disposable.disposeInternal</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.Surface#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Disposable#addOnDisposeCallback">
                  <description>
                    <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
                  </description>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
              </class>
              <property name="H.map.render.p2d.capabilities" local-name="capabilities" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Concrete object for H.map.render.p2d.RenderEngine.Capabilities</p></prose>
                </description>
              </property>
              <class name="H.map.render.p2d.RenderEngine" local-name="RenderEngine" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Canvas render engine implementation. This engine will present geo
position (camera data) provided by the view model on a 2D canvas element,
were all layers are rendered into the single canvas element in provided order.
This class contains some additional canvas rendering specific functionality,
which can be used by the application.</p></prose>
                </description>
                <extends>
                  <type ref="H.map.render.RenderEngine"/>
                </extends>
                <constructor local-name="RenderEngine" name="H.map.render.p2d.RenderEngine">
                  <param name="viewPort">
                    <types>
                      <type ref="H.map.ViewPort"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewPort"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="viewModel">
                    <types>
                      <type ref="H.map.ViewModel"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="dataModel">
                    <types>
                      <type ref="H.map.DataModel"/>
                    </types>
                    <ctype>
                      <name name="H.map.DataModel"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="options">
                    <types>
                      <type ref="H.map.render.p2d.RenderEngine.Options"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.RenderEngine.Options"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </constructor>
                <property name="H.map.render.p2d.RenderEngine#prioCenter_" local-name="prioCenter_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The priority center as an offset in pixel relative to the screen center, scaled by pixelRatio.
To modify its coordinates you MUST use Point#set(), because the layers will hold a reference to this point!</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#suspendTimeout_" local-name="suspendTimeout_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Timeframe after which engine goes to suspended state. Is used when no updates were triggered on the engine.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#zoom_" local-name="zoom_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Private zoom level reference for corresponding view's zoom</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#lastZoom_" local-name="lastZoom_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Holds zoom level that was rendered in previous frame. Is used to determine
if engine zooms in or sooms out.</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#lastGeoRendered_" local-name="lastGeoRendered_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Flag indicates if geo layers were rendered, used to prevent early removel of
scaled down base background</p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#zoomingOut_" local-name="zoomingOut_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Flag indicates if engine is zooming out</p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#mapCenter_" local-name="mapCenter_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Private center (map point) reference for corresponding view's map center</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#ratioZoomAdjustment_" local-name="ratioZoomAdjustment_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#interaction_" local-name="interaction_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#control_" local-name="control_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#pixelProjection_" local-name="pixelProjection_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#surface_" local-name="surface_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Drawing surface.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#state_" local-name="state_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="true">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.render.RenderEngine.EngineType"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.RenderEngine.EngineType"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine.BUSY" local-name="BUSY" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Busy state means that rendering loop is running.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine.SUSPENDED" local-name="SUSPENDED" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Suspended state means that rendering loop stopped and engine waits for events from viewModel/dataModel/viewPort</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine.SHUTDOWN" local-name="SHUTDOWN" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Shutdown state means that engine terminated rendering loop and detached all listeners, no further interaction
with the engine instance is possible</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#capabilities_" local-name="capabilities_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Shortcut to capabilities (to enable this.capabilities calls)</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.RenderEngine#getState" local-name="getState" access="public" scope="instance" virtual="false" published="false" exported="true">
                  <description>
                    <prose><p>Returns current state of the engine. Possible states are:</p>
<ul>
   <li><link ref="H.map.render.p2d.RenderEngine.BUSY" /></li>
   <li><link ref="H.map.render.p2d.RenderEngine.SUSPENDED" /></li>
   <li><link ref="H.map.render.p2d.RenderEngine.SHUTDOWN" /></li>
</ul></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>state</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getClosestX_" local-name="getClosestX_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method returns closest pixel point in modulorized world. If path between pixels
is more than half of the world it will return closest consecutive worl pixel. If path
is less function will return targetPixel</p></prose>
                  </description>
                  <param name="startX">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="destX">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onViewUpdate" local-name="onViewUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Callback to react on updates from view and data models.</p></prose>
                  </description>
                  <param name="ev">
                    <types>
                      <type ref="H.map.ViewModel.UpdateEvent"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.UpdateEvent"/>
                    </ctype>
                    <description>
                      <prose><p>event with changed data</p></prose>
                    </description>
                  </param>
                </method>
                <property name="H.map.render.p2d.RenderEngine#ANIMATION_DURATION_" local-name="ANIMATION_DURATION_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.RenderEngine#setAnimationDuration" local-name="setAnimationDuration" access="public" scope="instance" virtual="false" published="true" exported="true">
                  <description>
                    <prose><p>This method changes animation duration for all engine's animations</p></prose>
                  </description>
                  <param name="duration">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getAnimationDuration" local-name="getAnimationDuration" access="public" scope="instance" virtual="false" published="true" exported="true">
                  <description>
                    <prose><p>This method returns current animation duration setting for engine's animations</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.RenderEngine#ANIMATION_EASE_" local-name="ANIMATION_EASE_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="number"/>
                      </param>
                      <return>
                        <name name="number"/>
                      </return>
                    </func>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.RenderEngine#setAnimationEase" local-name="setAnimationEase" access="public" scope="instance" virtual="false" published="true" exported="true">
                  <description>
                    <prose><p>This method allows to set ease for all engine's animations.</p></prose>
                  </description>
                  <param name="easeFunction">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="number"/>
                        </return>
                      </func>
                    </ctype>
                    <description>
                      <prose><p>function which alters progress.
Function will receive progress as parameter which
is a values between 0..1 and should return altered values also in 0..1 range.</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getAnimationEase" local-name="getAnimationEase" access="public" scope="instance" virtual="false" published="true" exported="true">
                  <description>
                    <prose><p>This method return current setting for the animation ease.</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="number"/>
                        </return>
                      </func>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#resetAnimationDefaults" local-name="resetAnimationDefaults" access="public" scope="instance" virtual="false" published="true" exported="true">
                  <description>
                    <prose><p>This method resets animation settings on the engine to defaults. Duration 300ms
and ease to <link ref="H.util.animation.ease.EASE_OUT_QUAD" /></p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onDataUpdate_" local-name="onDataUpdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Update callback for dataModel</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onLayerAdd_" local-name="onLayerAdd_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Handles 'add' event on data model. Adds appropriate renderer.</p></prose>
                  </description>
                  <param name="ev">
                    <types>
                      <type ref="H.util.Event"/>
                    </types>
                    <ctype>
                      <name name="H.util.Event"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onLayerRemove_" local-name="onLayerRemove_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Handles 'remove' event on data model. Removes corresponding renderer.</p></prose>
                  </description>
                  <param name="ev">
                    <types>
                      <type ref="H.util.Event"/>
                    </types>
                    <ctype>
                      <name name="H.util.Event"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_suppressLaunch" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>launch of engine (used for 'set')</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onLayerSet_" local-name="onLayerSet_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Handles 'set' event on data model. replaces corresponding renderer</p></prose>
                  </description>
                  <param name="ev">
                    <types>
                      <type ref="H.util.Event"/>
                    </types>
                    <ctype>
                      <name name="H.util.Event"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#initializeRenderers_" local-name="initializeRenderers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Method takes existing layers from data model and instantiates appropriate renderers</p></prose>
                  </description>
                </method>
                <property name="H.map.render.p2d.RenderEngine#geoSpaceRenderers_" local-name="geoSpaceRenderers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Sparse array of renderers that belong to geo space.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#screenSpaceRenderers_" local-name="screenSpaceRenderers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Sparse array of renderers that belong to screen space.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#screenDomRenderers_" local-name="screenDomRenderers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Sparse array of renderers that belong to screen DOM space.</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#layers_" local-name="layers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>layers array for faster access at rendering time (instead of repetitive
this.dataModel.asArray())</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.RenderEngine#manageMinMaxListeners_" local-name="manageMinMaxListeners_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Manages the adding and removing of &quot;minchange&quot; and &quot;maxchange&quot; listeners to the passed layer</p></prose>
                  </description>
                  <param name="layer">
                    <types>
                      <type ref="H.map.layer.Layer"/>
                    </types>
                    <ctype>
                      <name name="H.map.layer.Layer"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="toAdd">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose><p>Indicates whether the listeners should be added - otherwise the listeners should be removed</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onMinMaxChabge_" local-name="onMinMaxChabge_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Callback is responsible for adjusting zoom constraints if min/max was changed on the layer in
slot 0 on data model.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#insertRenderer_" local-name="insertRenderer_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Instantiates renderers for layers and inserts them into arrays that are used by rendering loop.</p></prose>
                  </description>
                  <param name="idx">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="layer">
                    <types>
                      <type ref="H.map.layer.Layer"/>
                      <type ref="H.map.layer.IMarkerLayer"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.map.layer.Layer"/>
                        </type>
                        <type>
                          <name name="H.map.layer.IMarkerLayer"/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_howMany" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#adjustZoomConstraints_" local-name="adjustZoomConstraints_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Calls setZoomConstraints_ with min and max from layer at index 0.
Is bound to engine instance at construction time.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#setZoomConstraints_" local-name="setZoomConstraints_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Method sets additional constraints on min/max zoom level (ex. base map layer)</p></prose>
                  </description>
                  <param name="min">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="max">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <property name="H.map.render.p2d.RenderEngine#layerMinZoom_" local-name="layerMinZoom_" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>property holds minimum zoom level as defined by base map layer</p></prose>
                  </description>
                </property>
                <property name="H.map.render.p2d.RenderEngine#layerMaxZoom_" local-name="layerMaxZoom_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>property holds maximum zoom level as defined by base map layer</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.RenderEngine#canLaunch_" local-name="canLaunch_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Returns true if rendering loop can be launched</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#adjustValues_" local-name="adjustValues_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Method takes requested data from viewModel, adjusts it to capabilities and synchronizes it back to the viewModel.</p></prose>
                  </description>
                  <param name="ev">
                    <types>
                      <type ref="H.map.ViewModel.UpdateEvent"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.UpdateEvent"/>
                    </ctype>
                    <description>
                      <prose><p>with data to be adjusted {@see H.map.ViewModel}</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose><p>adjusted cameraData object</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#setMapCenter_" local-name="setMapCenter_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <param name="point">
                    <types>
                      <type ref="H.geo.Point"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Point"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#clampZoom_" local-name="clampZoom_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Method adjusts zoom level passed as an argument to engine's capabilities.</p></prose>
                  </description>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>zoom level to be adjusted</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>adjusted zoom level</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#correctCameraAngles_" local-name="correctCameraAngles_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Method sets correct yaw/pitch/roll on the object that's passed as an argument</p></prose>
                  </description>
                  <param name="obj">
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getObjectsAt_" local-name="getObjectsAt_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Private helper method for getObjectsAt to loop over renderers collections.</p></prose>
                  </description>
                  <param name="objects">
                    <types>
                      <type ref="Array"/>
                    </types>
                    <ctype>
                      <name name="Array"/>
                    </ctype>
                    <description>
                      <prose><p>objects array to concatanate with</p></prose>
                    </description>
                  </param>
                  <param name="renderers">
                    <types>
                      <type ref="Array"/>
                    </types>
                    <ctype>
                      <name name="Array"/>
                    </ctype>
                    <description>
                      <prose><p>renderers collection to loop over</p></prose>
                    </description>
                  </param>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>x coordinate in screen space to probe renderer</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>y coordinate in screen space to probe renderer</p></prose>
                    </description>
                  </param>
                  <param name="opt_topMostOnly" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>optional flag, if set method returns array with single element that is located
on top</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="Array"/>
                    </types>
                    <ctype>
                      <name name="Array"/>
                    </ctype>
                    <description>
                      <prose><p>array fo objects at given x/y coordinates for the provided renderers collection</p></prose>
                    </description>
                  </returns>
                </method>
                <property name="H.map.render.p2d.RenderEngine#syncedViewPort_" local-name="syncedViewPort_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Property hold new viewport size that must be zynchronized with viewport, after
synchronization it's set to null, meaning that everything is in sync.</p></prose>
                  </description>
                  <types>
                    <type ref="H.math.Size"/>
                  </types>
                  <ctype>
                    <name name="H.math.Size"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.RenderEngine#updateDomSurfacesSize_" local-name="updateDomSurfacesSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method updates size of currently used dom surfaces</p></prose>
                  </description>
                  <param name="width">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="height">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getVisibleViewportSize_" local-name="getVisibleViewportSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method returns visible viewport size</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.math.ISize"/>
                    </types>
                    <ctype>
                      <name name="H.math.ISize"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#updateTimestamp_" local-name="updateTimestamp_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Changes timeStamp that is used by render loop to determine if loop should be stopped bu timeout</p></prose>
                  </description>
                </method>
                <property name="H.map.render.p2d.RenderEngine#lastCallTime_" local-name="lastCallTime_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.RenderEngine#launch" local-name="launch" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Launches rendering loop.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#run_" local-name="run_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Rendering loop. recursively schedules frame rendering, and is called recursively from rendering logic itself.
Manages when to brake the loop.</p></prose>
                  </description>
                </method>
                <property name="H.map.render.p2d.RenderEngine#frameId_" local-name="frameId_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Property holds id of the requested frame. Used for cancelling.</p></prose>
                  </description>
                </property>
                <method name="H.map.render.p2d.RenderEngine#resetDispatchedFlags_" local-name="resetDispatchedFlags_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#render_" local-name="render_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Rendering logic</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#renderLayers_" local-name="renderLayers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Helper render method, iterates over renderers.</p></prose>
                  </description>
                  <param name="renderers">
                    <types>
                      <type ref="Array"/>
                    </types>
                    <ctype>
                      <name name="Array"/>
                    </ctype>
                    <description>
                      <prose><p>array of renderers to iterate over</p></prose>
                    </description>
                  </param>
                  <param name="dispatched">
                    <types>
                      <type ref="Array"/>
                    </types>
                    <ctype>
                      <name name="Array"/>
                    </ctype>
                    <description>
                      <prose><p>array that holds indexes of renderers for which &quot;render&quot; event was dispatched</p></prose>
                    </description>
                  </param>
                  <param name="bbox">
                    <types>
                      <type ref="H.geo.Rect"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Rect"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="screenCenter">
                    <types>
                      <type ref="H.math.Point"/>
                    </types>
                    <ctype>
                      <name name="H.math.Point"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="zoomLevel">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The zoom level for which the layers should be rendered</p></prose>
                    </description>
                  </param>
                  <param name="cacheOnly">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose><p>Indicates whether only cached resources are to be considered</p></prose>
                    </description>
                  </param>
                  <param name="prioCenter">
                    <types>
                      <type ref="H.math.Point"/>
                    </types>
                    <ctype>
                      <name name="H.math.Point"/>
                    </ctype>
                    <description>
                      <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose><p>true if all layers in stack were rendered</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#dispatchRenderEvent_" local-name="dispatchRenderEvent_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method creates and fires render event</p></prose>
                  </description>
                  <param name="opt_target" optional="true">
                    <types>
                      <type ref="H.map.layer.Layer"/>
                    </types>
                    <ctype>
                      <name name="H.map.layer.Layer" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Protected implementation of H.util.Disposable.disposeInternal</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#relaunch_" local-name="relaunch_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function relaunches engine if it can</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getCameraData_" local-name="getCameraData_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function returns current camera which is or will be rendered in the
next frame.</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose><p>current camera values</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#synchronize_" local-name="synchronize_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function synchronizes current engine values with the view model</p></prose>
                  </description>
                  <param name="opt_geopoint" optional="true">
                    <types>
                      <type ref="H.geo.Point"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Point" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#applyPxOffset" local-name="applyPxOffset" access="public" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function applies x,y to the map center and the projection</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>offset to move on the x axis</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>offset to move on the y axis</p></prose>
                    </description>
                  </param>
                  <param name="opt_preventSync" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>ifset to true prevents synchronization with view model</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#applyPxOffset_" local-name="applyPxOffset_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function applies offset to map projection and modifies the center. It
does not take pixelRatio into account. (all public functions should)</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#zoomAt" local-name="zoomAt" access="public" scope="instance" virtual="false" published="false" exported="true">
                  <description>
                    <prose><p>Function changes the zoom at provided screen coordinates. It
incorporates the zoom ratio adjustment</p></prose>
                  </description>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>desired zoom level</p></prose>
                    </description>
                  </param>
                  <param name="opt_atX" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>x coordinate to zoom to in screen space</p></prose>
                    </description>
                  </param>
                  <param name="opt_atY" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>y coordinate to zoom to in screen space</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#zoomAt_" local-name="zoomAt_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function changes the zoom at provided screen coordinates.</p></prose>
                  </description>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>desired zoom level</p></prose>
                    </description>
                  </param>
                  <param name="opt_atX" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>x coordinate to zoom to in screen space</p></prose>
                    </description>
                  </param>
                  <param name="opt_atY" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>y coordinate to zoom to in screen space</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#stopAnimationActions_" local-name="stopAnimationActions_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method stops current control, interation and animation if running</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#clampZoomWithRatio_" local-name="clampZoomWithRatio_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This is mad! get user zoom (by substracting ratio adjustment) clamp
and to clamped zoom (in user range) add ratio again
and clamp again to preserve layer range for pixel ratio.
Works for now.
TODO: figure better way to handle zoom levels in different ratios/ranges</p></prose>
                  </description>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#applyAdjustedView_" local-name="applyAdjustedView_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method moves map in decelerated move to target adjusted view</p></prose>
                  </description>
                  <param name="requestedData">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onAnimationControl_" local-name="onAnimationControl_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function listenes to control value changes and updates current animation</p></prose>
                  </description>
                  <param name="evt">
                    <types>
                      <type ref="H.util.Event"/>
                    </types>
                    <ctype>
                      <name name="H.util.Event"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#applyControl_" local-name="applyControl_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>This method applies the control offset</p></prose>
                  </description>
                  <param name="offset">
                    <types>
                      <type ref="H.map.render.p2d.ControlUtils.ControlOffset"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.p2d.ControlUtils.ControlOffset"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_frameTime" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#startAnimation_" local-name="startAnimation_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function starts internal animation</p></prose>
                  </description>
                  <param name="onFrame">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func>
                        <param>
                          <name name="number"/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                        <param>
                          <name name="number"/>
                        </param>
                      </func>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="duration">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_onFinish" optional="true">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_ease">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func>
                        <param>
                          <name name="number"/>
                        </param>
                        <return>
                          <name name="number" optional="true"/>
                        </return>
                      </func>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#stopAnimation_" local-name="stopAnimation_" access="private" scope="instance" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Function stops running animation</p></prose>
                  </description>
                  <param name="opt_suppressCallback" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <property name="H.map.render.p2d.RenderEngine.Capabilities" local-name="Capabilities" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>Capabilities object, describes values that can be rendered by RenderEngine ex.:
{
'zoom': {
  'min': -8,
  'max': 22
},
'camera': {
  'pitch' : {'min': 0, 'max': 0},
  'roll' : {'min': 0, 'max': 0},
  'yaw' : {'min': 0, 'max': 0},
  'fov' : {'min': 70, 'max': 70}
}
}</p></prose>
                  </description>
                </property>
                <typedef name="H.map.render.p2d.RenderEngine.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <record>
                      <field>
                        <key>
                          <name name="renderBaseBackground"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="Object"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="pixelRatio"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="number"/>
                            </type>
                          </union>
                        </value>
                      </field>
                      <field>
                        <key>
                          <name name="enableSubpixelRendering"/>
                        </key>
                        <value>
                          <union>
                            <type>
                              <name name="boolean"/>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </value>
                      </field>
                    </record>
                  </ctype>
                  <property name="H.map.render.p2d.RenderEngine.Options#renderBaseBackground" local-name="renderBaseBackground" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                    <description>
                      <prose><p>Object describes how many cached zoom levels should be used as a base map
   background while base map tiles are</p></prose>
                    </description>
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.RenderEngine.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false">
                    <description>
                      <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                    </description>
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                  </property>
                  <property name="H.map.render.p2d.RenderEngine.Options#enableSubpixelRendering" local-name="enableSubpixelRendering" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                    <description>
                      <prose></prose>
                    </description>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                  </property>
                </typedef>
                <event name="H.map.render.p2d.RenderEngine#event:render" local-name="render" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.render.RenderEngine#event:render">
                  <description>
                    <prose><p>Fired when one of the layers or the engine (all layers) has been rendered completely.
The event target references either the completed layer or the render engine itself</p></prose>
                  </description>
                  <types>
                    <type ref="H.util.Event"/>
                  </types>
                  <ctype>
                    <name name="H.util.Event"/>
                  </ctype>
                </event>
                <property name="H.map.render.p2d.RenderEngine#viewPortBounds" local-name="viewPortBounds" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#viewPortBounds">
                  <description>
                    <prose><p>A cache for view-port bounds</p></prose>
                  </description>
                  <types>
                    <type ref="Object.&lt;H.map.render.RenderEngine.ViewPortBoundsType, ?(H.math.Rect)&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="H.map.render.RenderEngine.ViewPortBoundsType"/>
                      </app>
                      <app>
                        <union nullable="true">
                          <type>
                            <name name="H.math.Rect"/>
                          </type>
                        </union>
                      </app>
                    </typed>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#viewPort" local-name="viewPort" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#viewPort">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.ViewPort"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewPort"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#viewModel" local-name="viewModel" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#viewModel">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.ViewModel"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewModel"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#dataModel" local-name="dataModel" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#dataModel">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="H.map.DataModel"/>
                  </types>
                  <ctype>
                    <name name="H.map.DataModel"/>
                  </ctype>
                </property>
                <property name="H.map.render.p2d.RenderEngine#pixelRatio" local-name="pixelRatio" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#pixelRatio">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <method name="H.map.render.p2d.RenderEngine#getBBox" local-name="getBBox" access="public" scope="instance" virtual="true" published="false" exported="true" inherited="H.map.render.RenderEngine#getBBox">
                  <description>
                    <prose><p>To request the bounding box according the specified view port bounds type</p></prose>
                  </description>
                  <param name="type">
                    <types>
                      <type ref="H.map.render.RenderEngine.ViewPortBoundsType"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.RenderEngine.ViewPortBoundsType"/>
                    </ctype>
                    <description>
                      <prose><p>The type of the requested view-bounds.</p></prose>
                    </description>
                  </param>
                  <param name="margin">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>A positive or negative margin in screen pixel to apply on each side of the bounds</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.geo.Rect"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Rect"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#updateViewPortBounds_" local-name="updateViewPortBounds_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#updateViewPortBounds_">
                  <description>
                    <prose><p>Updates the viewPortBounds_</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#onResize" local-name="onResize" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#onResize">
                  <description>
                    <prose><p>Callback to react on &quot;sizechange&quot;, &quot;paddingchange&quot; and &quot;marginchange&quot; events from the view port.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#isBifocalInteraction" local-name="isBifocalInteraction" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#isBifocalInteraction">
                  <description>
                    <prose><p>Helper function to check if the interaction is bifocal,
returns true if all provided screen coords are numbers</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="bx">
                    <types>
                      <type ref="number"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="by">
                    <types>
                      <type ref="number"/>
                      <type ref="undefined"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#startControl" local-name="startControl" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#startControl">
                  <description>
                    <prose><p>A method to signal the begin of a control operation. A currently ongoing
control operation stops without kinetic effect. A currently control
operation also stops if viewModel was updated or beginInteraction was
called.</p></prose>
                  </description>
                  <param name="opt_kinetics" optional="true">
                    <types>
                      <type ref="H.util.kinetics.IKinetics"/>
                    </types>
                    <ctype>
                      <name name="H.util.kinetics.IKinetics" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>A kinetics to use when
the control ends. If <code>null</code>, no kinetic effect is performed.</p></prose>
                    </description>
                  </param>
                  <param name="opt_atX" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>The X component of the screen coordinate where a
view control operation is applied. If <code>NaN</code> the screen center is
taken instead.</p></prose>
                    </description>
                  </param>
                  <param name="opt_atY" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>The Y component of the screen coordinate where a
view control operation is applied. If <code>NaN</code> the screen center is t
aken instead.</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#control" local-name="control" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#control">
                  <description>
                    <prose><p>A method to process control operation.
If no control operation is currently ongoing (<code>beginControl</code> was not
triggered before or <code>endControl</code> was triggered meanwhile) the
<code>control</code> call is ignored.</p></prose>
                  </description>
                  <param name="moveX">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The move of the camera in screen x axis as
levels per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="moveY">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The move of the camera in screen x axis as
levels per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="moveZ">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The move of the camera in screen z axis as levels
per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="angleX">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The rotation of the camera on screen x axis as
degrees per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="angleY">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The rotation of the camera on screen y axis as
degrees per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="angleZ">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The rotation of the camera on screen z axis as
degrees per millisecond.</p></prose>
                    </description>
                  </param>
                  <param name="zoom">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The zoom of the view as zoom levels per millisecond, ignored in <code>&quot;cam&quot;</code> mode.</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#endControl" local-name="endControl" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#endControl">
                  <description>
                    <prose><p>A method to signal the end of an control operation. If an <code>kinetics</code>
argument was passed to <code>beginControl</code> call, the kinetic effect is
performed.
If no control operation is currently ongoing (<code>beginControl</code> was not
triggered before or an <code>endControl</code> was triggered meanwhile) the
<code>endControl</code> call is ignored.</p></prose>
                  </description>
                  <param name="opt_preventKinetics" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>if set to true kinetics
will not be fired</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#startInteraction" local-name="startInteraction" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#startInteraction">
                  <description>
                    <prose><p>A method to signal the begin of an interaction. A currently ongoing
interaction is stopped without kinetic effect.
Current interaction stopps if view model was changed or beginControl was
called.</p></prose>
                  </description>
                  <param name="modifiers">
                    <types>
                      <type ref="H.map.render.RenderEngine.InteractionModifiers"/>
                    </types>
                    <ctype>
                      <name name="H.map.render.RenderEngine.InteractionModifiers"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_kinetics" optional="true">
                    <types>
                      <type ref="H.util.kinetics.IKinetics"/>
                    </types>
                    <ctype>
                      <name name="H.util.kinetics.IKinetics" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#interaction" local-name="interaction" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#interaction">
                  <description>
                    <prose><p>A method to process an interaction based on screen coordinates of the
view port. If <code>beginInteraction</code> was triggered with a <code>modifiers</code>
argument of <code>COORD</code> combined with any other modifier but
<code>interaction</code> is called without bifocal coordinate then the
<code>COORD</code> modifier is ignored.
If no interaction is currently ongoing (<code>beginInteraction</code> was not
triggered before or an <code>endInteraction</code> was triggered meanwhile) the
<code>interact</code> call is ignored.</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>viewport x coordinate</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>viewport y coordinate</p></prose>
                    </description>
                  </param>
                  <param name="opt_bx" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>x coordinate for second pointer/touch if present</p></prose>
                    </description>
                  </param>
                  <param name="opt_by" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>y coordinate for secong pointer/touch if present</p></prose>
                    </description>
                  </param>
                  <param name="opt_timestamp" optional="true">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>known timestamp which should be passed</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#endInteraction" local-name="endInteraction" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#endInteraction">
                  <description>
                    <prose><p>Method signals the end of an interaction. If an <code>kinetics</code> was passed
to the previous <code>beginInteraction</code> call, the kinetic effect is
performed. If no interaction is currently ongoing (<code>beginInteraction</code>
was not triggered before or an <code>endInteraction</code> was triggered
meanwhile) the <code>endInteraction</code> call is ignored.</p></prose>
                  </description>
                  <param name="opt_preventKinetics" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#screenToGeo" local-name="screenToGeo" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#screenToGeo">
                  <description>
                    <prose><p>Method converts pixel coordinates relative to the viewport's origin into a
geographic coordinates.</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The X-coordinate of the pixel position</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The Y-coordinate of the pixel position</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.geo.IPoint"/>
                    </types>
                    <ctype>
                      <name name="H.geo.IPoint"/>
                    </ctype>
                    <description>
                      <prose><p>The translated geographic position</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#geoToScreen" local-name="geoToScreen" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#geoToScreen">
                  <description>
                    <prose><p>Method converts a geographic coordinates into a pixel position relative
to the viewport's origin.</p></prose>
                  </description>
                  <param name="geoPoint">
                    <types>
                      <type ref="H.geo.IPoint"/>
                    </types>
                    <ctype>
                      <name name="H.geo.IPoint"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.math.IPoint"/>
                    </types>
                    <ctype>
                      <name name="H.math.IPoint" nullable="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getCamForBounds" local-name="getCamForBounds" access="public" scope="instance" virtual="true" published="false" exported="true" inherited="H.map.render.RenderEngine#getCamForBounds">
                  <description>
                    <prose><p>Calculates the best CameraModel to show the provided bounding rectangle</p></prose>
                  </description>
                  <param name="bounds">
                    <types>
                      <type ref="H.geo.Rect"/>
                    </types>
                    <ctype>
                      <name name="H.geo.Rect"/>
                    </ctype>
                    <description>
                      <prose><p>The geographical bounding rectangle to use</p></prose>
                    </description>
                  </param>
                  <param name="keepCenter">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean"/>
                    </ctype>
                    <description>
                      <prose><p>To indicate whether the center of the bounds should be the resulting center</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose><p>The result, represented by the
properties zoom (number) and position (geo.Point)</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#screenToCameraData" local-name="screenToCameraData" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#screenToCameraData">
                  <description>
                    <prose><p>Method converts screen pixel coordinates to correct camera data object</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>X screen coordinate</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>Y screen coordinate</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="H.map.ViewModel.CameraData"/>
                    </types>
                    <ctype>
                      <name name="H.map.ViewModel.CameraData"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#getObjectsAt">
                  <description>
                    <prose><p>Method returns visible objects under the given x/y screen coordinates. Array is sorted according to their drawing
order, topmost object has an index #0 in returned array.</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>x coordinate in screen space to probe renderer</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>y coordinate in screen space to probe renderer</p></prose>
                    </description>
                  </param>
                  <param name="opt_topMostOnly" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>optional flag, if set method returns array with single element that is located
on top</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="Array.&lt;H.map.Object&gt;"/>
                    </types>
                    <ctype>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.map.Object"/>
                        </app>
                      </typed>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getCapabilities" local-name="getCapabilities" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#getCapabilities">
                  <description>
                    <prose><p>Method returns object that contains data on engine's possible camera angles,
modes etc.</p></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#capture" local-name="capture" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#capture">
                  <description>
                    <prose><p>Captures rectangular area of the surface.
Accepts only valid input: captured rect coordinates, should be contained by the surface</p></prose>
                  </description>
                  <param name="x1">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The X coordinate of the top left edge of the rect</p></prose>
                    </description>
                  </param>
                  <param name="y1">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The Y coordinate of the top left edge of the rect</p></prose>
                    </description>
                  </param>
                  <param name="x2">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The X coordinate of the bottom right edge of the rect</p></prose>
                    </description>
                  </param>
                  <param name="y2">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The Y coordinate of the bottom right edge of the rect</p></prose>
                    </description>
                  </param>
                  <returns>
                    <types>
                      <type ref="HTMLCanvasElement"/>
                    </types>
                    <ctype>
                      <name name="HTMLCanvasElement"/>
                    </ctype>
                    <description>
                      <prose><p>Captured</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#setPointer" local-name="setPointer" access="public" scope="instance" virtual="true" published="false" exported="true" inherited="H.map.render.RenderEngine#setPointer">
                  <description>
                    <prose><p>Method informs render engine about the current pointer position relative to
the viewport. The position can be used by the render engine to provide
hover effects, tool tips etc. If the x argument is NaN the render engine
treats the given position outside the viewport.</p></prose>
                  </description>
                  <param name="x">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The X coordinate of the pointer.</p></prose>
                    </description>
                  </param>
                  <param name="y">
                    <types>
                      <type ref="number"/>
                    </types>
                    <ctype>
                      <name name="number"/>
                    </ctype>
                    <description>
                      <prose><p>The Y coordinate of the pointer.</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#enter" local-name="enter" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#enter">
                  <description>
                    <prose><p>Method performs enter animation if one is available for the engine.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#exit" local-name="exit" access="public" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.render.RenderEngine#exit">
                  <description>
                    <prose><p>Method performs exit animation if one is available for the engine. Method
must not shut down the engine.</p></prose>
                  </description>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#fadeout" local-name="fadeout" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#fadeout">
                  <description>
                    <prose><p>Protected method that facilitates engine's container fade out before exit</p></prose>
                  </description>
                  <param name="container">
                    <types>
                      <type ref="Element"/>
                    </types>
                    <ctype>
                      <name name="Element"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <func/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
                <enum name="H.map.render.p2d.RenderEngine#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.render.RenderEngine#EventType">
                  <description>
                    <prose><p>Events fired by RenderingEngine</p></prose>
                  </description>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <value name="H.map.render.p2d.RenderEngine#EventType.RENDER" local-name="RENDER">
                    <description>
                      <prose></prose>
                    </description>
                  </value>
                </enum>
                <method name="H.map.render.p2d.RenderEngine#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                  <description>
                    <prose></prose>
                  </description>
                  <param name="parent">
                    <types>
                      <type ref="H.util.EventTarget"/>
                    </types>
                    <ctype>
                      <name name="H.util.EventTarget"/>
                    </ctype>
                    <description>
                      <prose><p>the new parent event target</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                  <description>
                    <prose></prose>
                  </description>
                  <returns>
                    <types>
                      <type ref="H.util.EventTarget"/>
                    </types>
                    <ctype>
                      <name name="H.util.EventTarget" nullable="true"/>
                    </ctype>
                    <description>
                      <prose><p>the current parent event target</p></prose>
                    </description>
                  </returns>
                </method>
                <method name="H.map.render.p2d.RenderEngine#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                  <description>
                    <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                  </description>
                  <param name="type">
                    <types>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <name name="string"/>
                    </ctype>
                    <description>
                      <prose><p>name of event</p></prose>
                    </description>
                  </param>
                  <param name="handler">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose><p>event handler function</p></prose>
                    </description>
                  </param>
                  <param name="opt_capture" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>scope for the handler function</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                  <description>
                    <prose><p>This method will removed previously added listener from the event target</p></prose>
                  </description>
                  <param name="type">
                    <types>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <name name="string"/>
                    </ctype>
                    <description>
                      <prose><p>name of event</p></prose>
                    </description>
                  </param>
                  <param name="handler">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose><p>previously added event handler</p></prose>
                    </description>
                  </param>
                  <param name="opt_capture" optional="true">
                    <types>
                      <type ref="boolean"/>
                    </types>
                    <ctype>
                      <name name="boolean" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose><p>scope for the handler function</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                  <description>
                    <prose><p>This method will dispatch event on the event target object</p></prose>
                  </description>
                  <param name="evt">
                    <types>
                      <type ref="H.util.Event"/>
                      <type ref="string"/>
                    </types>
                    <ctype>
                      <union>
                        <type>
                          <name name="H.util.Event"/>
                        </type>
                        <type>
                          <name name="string"/>
                        </type>
                      </union>
                    </ctype>
                    <description>
                      <prose><p>event object or event name</p></prose>
                    </description>
                  </param>
                </method>
                <method name="H.map.render.p2d.RenderEngine#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                  <description>
                    <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                  </description>
                </method>
                <method name="H.map.render.p2d.RenderEngine#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                  <description>
                    <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                  </description>
                  <param name="callback">
                    <types>
                      <type ref="function"/>
                    </types>
                    <ctype>
                      <name name="Function" nullable="false"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                  <param name="opt_scope" optional="true">
                    <types>
                      <type ref="Object"/>
                    </types>
                    <ctype>
                      <name name="Object" optional="true"/>
                    </ctype>
                    <description>
                      <prose></prose>
                    </description>
                  </param>
                </method>
              </class>
            </ns>
            <class name="H.map.render.RenderEngine" local-name="RenderEngine" access="public" scope="static" virtual="true" published="true" exported="true">
              <description>
                <prose><p>Abstract RenderEngine class. Render engines are used to render geographical position
set on the view model to the actual screen (viewport element). The rendered result may be
different for different engines, since every engine uses its onw capabilities and specific
implementation to present the current view model data in best possible way. In example
for 2D engines user will se mostly 2 dimensional flat map presented by tiles, on the other
hand 3D engines like panorama will display the same coordinates as a 'street view'.
In other words RenderEngine is responsible for managing the rendering loop as well as
for synchronizing rendered data with the view model and the data model.
It manages what and how gets rendered inside the current viewport.</p></prose>
              </description>
              <extends>
                <type ref="H.util.EventTarget"/>
              </extends>
              <constructor local-name="RenderEngine" name="H.map.render.RenderEngine">
                <param name="viewPort">
                  <types>
                    <type ref="H.map.ViewPort"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewPort"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="viewModel">
                  <types>
                    <type ref="H.map.ViewModel"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewModel"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="dataModel">
                  <types>
                    <type ref="H.map.DataModel"/>
                  </types>
                  <ctype>
                    <name name="H.map.DataModel"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="options">
                  <types>
                    <type ref="H.map.render.RenderEngine.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.RenderEngine.Options"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <event name="H.map.render.RenderEngine#event:render" local-name="render" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Fired when one of the layers or the engine (all layers) has been rendered completely.
The event target references either the completed layer or the render engine itself</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <property name="H.map.render.RenderEngine#viewPortBounds" local-name="viewPortBounds" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A cache for view-port bounds</p></prose>
                </description>
                <types>
                  <type ref="Object.&lt;H.map.render.RenderEngine.ViewPortBoundsType, ?(H.math.Rect)&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="H.map.render.RenderEngine.ViewPortBoundsType"/>
                    </app>
                    <app>
                      <union nullable="true">
                        <type>
                          <name name="H.math.Rect"/>
                        </type>
                      </union>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.map.render.RenderEngine#viewPort" local-name="viewPort" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.ViewPort"/>
                </types>
                <ctype>
                  <name name="H.map.ViewPort"/>
                </ctype>
              </property>
              <property name="H.map.render.RenderEngine#viewModel" local-name="viewModel" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.ViewModel"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel"/>
                </ctype>
              </property>
              <property name="H.map.render.RenderEngine#dataModel" local-name="dataModel" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.DataModel"/>
                </types>
                <ctype>
                  <name name="H.map.DataModel"/>
                </ctype>
              </property>
              <property name="H.map.render.RenderEngine#pixelRatio" local-name="pixelRatio" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <enum name="H.map.render.RenderEngine.ViewPortBoundsType" local-name="ViewPortBoundsType" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The enumeration type of view-port bounds</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <value name="H.map.render.RenderEngine.ViewPortBoundsType.MARGINED" local-name="MARGINED">
                  <description>
                    <prose><p>The view-bounds according the margined ViewPort's size, respecting the possibly shifted padding center</p></prose>
                  </description>
                </value>
                <value name="H.map.render.RenderEngine.ViewPortBoundsType.VISIBLE" local-name="VISIBLE">
                  <description>
                    <prose><p>The view-bounds according the visible ViewPort's size, respecting the possibly shifted padding center</p></prose>
                  </description>
                </value>
                <value name="H.map.render.RenderEngine.ViewPortBoundsType.PADDED" local-name="PADDED">
                  <description>
                    <prose><p>The view-bounds according the padded ViewPort's size, respecting the possibly shifted padding center</p></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.render.RenderEngine#getBBox" local-name="getBBox" access="public" scope="instance" virtual="true" published="false" exported="true">
                <description>
                  <prose><p>To request the bounding box according the specified view port bounds type</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="H.map.render.RenderEngine.ViewPortBoundsType"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.RenderEngine.ViewPortBoundsType"/>
                  </ctype>
                  <description>
                    <prose><p>The type of the requested view-bounds.</p></prose>
                  </description>
                </param>
                <param name="margin">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>A positive or negative margin in screen pixel to apply on each side of the bounds</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#updateViewPortBounds_" local-name="updateViewPortBounds_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Updates the viewPortBounds_</p></prose>
                </description>
              </method>
              <method name="H.map.render.RenderEngine#onResize" local-name="onResize" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Callback to react on &quot;sizechange&quot;, &quot;paddingchange&quot; and &quot;marginchange&quot; events from the view port.</p></prose>
                </description>
              </method>
              <method name="H.map.render.RenderEngine#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
              </method>
              <method name="H.map.render.RenderEngine#isBifocalInteraction" local-name="isBifocalInteraction" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Helper function to check if the interaction is bifocal,
returns true if all provided screen coords are numbers</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="bx">
                  <types>
                    <type ref="number"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="by">
                  <types>
                    <type ref="number"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#startControl" local-name="startControl" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>A method to signal the begin of a control operation. A currently ongoing
control operation stops without kinetic effect. A currently control
operation also stops if viewModel was updated or beginInteraction was
called.</p></prose>
                </description>
                <param name="opt_kinetics" optional="true">
                  <types>
                    <type ref="H.util.kinetics.IKinetics"/>
                  </types>
                  <ctype>
                    <name name="H.util.kinetics.IKinetics" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>A kinetics to use when
the control ends. If <code>null</code>, no kinetic effect is performed.</p></prose>
                  </description>
                </param>
                <param name="opt_atX" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The X component of the screen coordinate where a
view control operation is applied. If <code>NaN</code> the screen center is
taken instead.</p></prose>
                  </description>
                </param>
                <param name="opt_atY" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The Y component of the screen coordinate where a
view control operation is applied. If <code>NaN</code> the screen center is t
aken instead.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#control" local-name="control" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>A method to process control operation.
If no control operation is currently ongoing (<code>beginControl</code> was not
triggered before or <code>endControl</code> was triggered meanwhile) the
<code>control</code> call is ignored.</p></prose>
                </description>
                <param name="moveX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The move of the camera in screen x axis as
levels per millisecond.</p></prose>
                  </description>
                </param>
                <param name="moveY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The move of the camera in screen x axis as
levels per millisecond.</p></prose>
                  </description>
                </param>
                <param name="moveZ">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The move of the camera in screen z axis as levels
per millisecond.</p></prose>
                  </description>
                </param>
                <param name="angleX">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The rotation of the camera on screen x axis as
degrees per millisecond.</p></prose>
                  </description>
                </param>
                <param name="angleY">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The rotation of the camera on screen y axis as
degrees per millisecond.</p></prose>
                  </description>
                </param>
                <param name="angleZ">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The rotation of the camera on screen z axis as
degrees per millisecond.</p></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom of the view as zoom levels per millisecond, ignored in <code>&quot;cam&quot;</code> mode.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#endControl" local-name="endControl" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>A method to signal the end of an control operation. If an <code>kinetics</code>
argument was passed to <code>beginControl</code> call, the kinetic effect is
performed.
If no control operation is currently ongoing (<code>beginControl</code> was not
triggered before or an <code>endControl</code> was triggered meanwhile) the
<code>endControl</code> call is ignored.</p></prose>
                </description>
                <param name="opt_preventKinetics" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true kinetics
will not be fired</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#startInteraction" local-name="startInteraction" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>A method to signal the begin of an interaction. A currently ongoing
interaction is stopped without kinetic effect.
Current interaction stopps if view model was changed or beginControl was
called.</p></prose>
                </description>
                <param name="modifiers">
                  <types>
                    <type ref="H.map.render.RenderEngine.InteractionModifiers"/>
                  </types>
                  <ctype>
                    <name name="H.map.render.RenderEngine.InteractionModifiers"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_kinetics" optional="true">
                  <types>
                    <type ref="H.util.kinetics.IKinetics"/>
                  </types>
                  <ctype>
                    <name name="H.util.kinetics.IKinetics" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#interaction" local-name="interaction" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>A method to process an interaction based on screen coordinates of the
view port. If <code>beginInteraction</code> was triggered with a <code>modifiers</code>
argument of <code>COORD</code> combined with any other modifier but
<code>interaction</code> is called without bifocal coordinate then the
<code>COORD</code> modifier is ignored.
If no interaction is currently ongoing (<code>beginInteraction</code> was not
triggered before or an <code>endInteraction</code> was triggered meanwhile) the
<code>interact</code> call is ignored.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>viewport x coordinate</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>viewport y coordinate</p></prose>
                  </description>
                </param>
                <param name="opt_bx" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>x coordinate for second pointer/touch if present</p></prose>
                  </description>
                </param>
                <param name="opt_by" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>y coordinate for secong pointer/touch if present</p></prose>
                  </description>
                </param>
                <param name="opt_timestamp" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>known timestamp which should be passed</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#endInteraction" local-name="endInteraction" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method signals the end of an interaction. If an <code>kinetics</code> was passed
to the previous <code>beginInteraction</code> call, the kinetic effect is
performed. If no interaction is currently ongoing (<code>beginInteraction</code>
was not triggered before or an <code>endInteraction</code> was triggered
meanwhile) the <code>endInteraction</code> call is ignored.</p></prose>
                </description>
                <param name="opt_preventKinetics" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#screenToGeo" local-name="screenToGeo" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method converts pixel coordinates relative to the viewport's origin into a
geographic coordinates.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The X-coordinate of the pixel position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The Y-coordinate of the pixel position</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.geo.IPoint"/>
                  </types>
                  <ctype>
                    <name name="H.geo.IPoint"/>
                  </ctype>
                  <description>
                    <prose><p>The translated geographic position</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#geoToScreen" local-name="geoToScreen" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method converts a geographic coordinates into a pixel position relative
to the viewport's origin.</p></prose>
                </description>
                <param name="geoPoint">
                  <types>
                    <type ref="H.geo.IPoint"/>
                  </types>
                  <ctype>
                    <name name="H.geo.IPoint"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.IPoint"/>
                  </types>
                  <ctype>
                    <name name="H.math.IPoint" nullable="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#getCamForBounds" local-name="getCamForBounds" access="public" scope="instance" virtual="true" published="false" exported="true">
                <description>
                  <prose><p>Calculates the best CameraModel to show the provided bounding rectangle</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The geographical bounding rectangle to use</p></prose>
                  </description>
                </param>
                <param name="keepCenter">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>To indicate whether the center of the bounds should be the resulting center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.ViewModel.CameraData"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewModel.CameraData"/>
                  </ctype>
                  <description>
                    <prose><p>The result, represented by the
properties zoom (number) and position (geo.Point)</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#screenToCameraData" local-name="screenToCameraData" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method converts screen pixel coordinates to correct camera data object</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>X screen coordinate</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>Y screen coordinate</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.ViewModel.CameraData"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewModel.CameraData"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method returns visible objects under the given x/y screen coordinates. Array is sorted according to their drawing
order, topmost object has an index #0 in returned array.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x coordinate in screen space to probe renderer</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y coordinate in screen space to probe renderer</p></prose>
                  </description>
                </param>
                <param name="opt_topMostOnly" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>optional flag, if set method returns array with single element that is located
on top</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Object&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Object"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#getCapabilities" local-name="getCapabilities" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method returns object that contains data on engine's possible camera angles,
modes etc.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#capture" local-name="capture" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Captures rectangular area of the surface.
Accepts only valid input: captured rect coordinates, should be contained by the surface</p></prose>
                </description>
                <param name="x1">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The X coordinate of the top left edge of the rect</p></prose>
                  </description>
                </param>
                <param name="y1">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The Y coordinate of the top left edge of the rect</p></prose>
                  </description>
                </param>
                <param name="x2">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The X coordinate of the bottom right edge of the rect</p></prose>
                  </description>
                </param>
                <param name="y2">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The Y coordinate of the bottom right edge of the rect</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <name name="HTMLCanvasElement"/>
                  </ctype>
                  <description>
                    <prose><p>Captured</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#setPointer" local-name="setPointer" access="public" scope="instance" virtual="true" published="false" exported="true">
                <description>
                  <prose><p>Method informs render engine about the current pointer position relative to
the viewport. The position can be used by the render engine to provide
hover effects, tool tips etc. If the x argument is NaN the render engine
treats the given position outside the viewport.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The X coordinate of the pointer.</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The Y coordinate of the pointer.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#enter" local-name="enter" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method performs enter animation if one is available for the engine.</p></prose>
                </description>
              </method>
              <method name="H.map.render.RenderEngine#exit" local-name="exit" access="public" scope="instance" virtual="true" published="false" exported="false">
                <description>
                  <prose><p>Method performs exit animation if one is available for the engine. Method
must not shut down the engine.</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#fadeout" local-name="fadeout" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Protected method that facilitates engine's container fade out before exit</p></prose>
                </description>
                <param name="container">
                  <types>
                    <type ref="Element"/>
                  </types>
                  <ctype>
                    <name name="Element"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <typedef name="H.map.render.RenderEngine.InteractionModifiers" local-name="InteractionModifiers" access="public" scope="static" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Interaction modifiers is a set of bitmask values that can be passed to
<link ref="H.map.render.RenderEngine#beginInteraction" /></p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <property name="H.map.render.RenderEngine.InteractionModifiers.ZOOM" local-name="ZOOM" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.RenderEngine.InteractionModifiers.HEADING" local-name="HEADING" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.RenderEngine.InteractionModifiers.TILT" local-name="TILT" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.RenderEngine.InteractionModifiers.INCLINE" local-name="INCLINE" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.render.RenderEngine.InteractionModifiers.COORD" local-name="COORD" access="public" scope="static" virtual="false" published="false" exported="false">
                  <description>
                    <prose></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
              </typedef>
              <enum name="H.map.render.RenderEngine#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Events fired by RenderingEngine</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.render.RenderEngine#EventType.RENDER" local-name="RENDER">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <enum name="H.map.render.RenderEngine.EngineType" local-name="EngineType" access="public" scope="static" virtual="false" published="false" exported="true">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <value name="H.map.render.RenderEngine.EngineType.P2D" local-name="P2D">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.render.RenderEngine.EngineType.PANORAMA" local-name="PANORAMA">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <typedef name="H.map.render.RenderEngine.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Options which may be used to initialize new RenderEngine instance</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="pixelRatio"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.render.RenderEngine.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
              </typedef>
              <method name="H.map.render.RenderEngine#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.render.RenderEngine#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.render.RenderEngine#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.render.RenderEngine#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
          </ns>
          <interface name="H.map.ICopyright" local-name="ICopyright" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>An interface to specify a copyright note</p></prose>
            </description>
            <property name="H.map.ICopyright#label" local-name="label" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>A short textual representation of the copyright note, e.g. &quot;DigitalGlobe 2009&quot;</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.ICopyright#alt" local-name="alt" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>A detailed textual representation of the copyright note, e.g. &quot;copyright 2009 DigitalGlobe, Inc.&quot;</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
          </interface>
          <class name="H.map.Imprint" local-name="Imprint" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class encapsulates the brand, copyright and terms of use elements on the map.</p></prose>
            </description>
            <extends>
              <type ref="H.util.Disposable"/>
            </extends>
            <extends>
              <type ref="H.util.ICapturable"/>
            </extends>
            <constructor local-name="Imprint" name="H.map.Imprint">
              <param name="map">
                <types>
                  <type ref="H.Map"/>
                </types>
                <ctype>
                  <name name="H.Map"/>
                </ctype>
                <description>
                  <prose><p>The map where the imprint is attached to</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Imprint.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Imprint.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The options to style the imprint</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.Imprint#map_" local-name="map_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#element_" local-name="element_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#brandElement_" local-name="brandElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#brandPathStyle_" local-name="brandPathStyle_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The style of the brand's SVG path</p></prose>
              </description>
              <types>
                <type ref="CSSStyleDeclaration"/>
              </types>
              <ctype>
                <name name="CSSStyleDeclaration"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#copyrightElement_" local-name="copyrightElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#termsOfUseElement_" local-name="termsOfUseElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Terms of use element</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#reportImageContainer_" local-name="reportImageContainer_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Container that hold report image link and separator</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#reportImageElement_" local-name="reportImageElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Report Image link for street level</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.Imprint#lastOptionValues_" local-name="lastOptionValues_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.map.Imprint.optionNames_" local-name="optionNames_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.map.Imprint.defaultURL_" local-name="defaultURL_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Default base url for terms of use and report image</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.Imprint.defaultOptionValues_" local-name="defaultOptionValues_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.map.Imprint#setOptions" local-name="setOptions" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the imprint options.
If no opt_options argument is defined then all values are reset to their defaults.</p></prose>
              </description>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Imprint.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Imprint.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The options to style the imprint</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Imprint.createEl_" local-name="createEl_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Helper to create an element</p></prose>
              </description>
              <param name="doc">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>The owner document of the element</p></prose>
                </description>
              </param>
              <param name="name">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The node name of the element</p></prose>
                </description>
              </param>
              <param name="opt_cssText" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose><p>The textContent to set for the &quot;cssText&quot; attribute</p></prose>
                </description>
              </param>
              <param name="opt_innerHTML" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose><p>The markup to set for the &quot;innerHTML&quot; property</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Imprint#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Methos returns imprint root element</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Imprint#getBrandImage" local-name="getBrandImage" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Methos returns imprint brand element
Do not publish! Internal API use only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Imprint#updateCopyright_" local-name="updateCopyright_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To update the copyrights</p></prose>
              </description>
            </method>
            <method name="H.map.Imprint#onLayerChange_" local-name="onLayerChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A callback to be invoked when the base layer changes</p></prose>
              </description>
            </method>
            <property name="H.map.Imprint.BRAND_SVG_" local-name="BRAND_SVG_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>API Internal use only, do not publish!</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.Imprint.CURRENT_YEAR_" local-name="CURRENT_YEAR_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Stores the current year for automatic update of copyright info.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Imprint.DEFAULT_COPYRIGHT_" local-name="DEFAULT_COPYRIGHT_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Stores the default copyright for the map (HERE).</p></prose>
              </description>
              <types>
                <type ref="H.map.ICopyright"/>
              </types>
              <ctype>
                <name name="H.map.ICopyright"/>
              </ctype>
            </property>
            <method name="H.map.Imprint#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method retrieves the copyright string for the current view of the map.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The copyright string for the current map view</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Imprint#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the CSS style declaration of the imprint DOM element</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="CSSStyleDeclaration"/>
                </types>
                <ctype>
                  <name name="CSSStyleDeclaration"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Imprint.imprintMargin_" local-name="imprintMargin_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Imprint margin in pixels relative to the bottom corner of the drawing canvas when capturing.
Note that it does not take into account pixel ratio!</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
            </property>
            <typedef name="H.map.Imprint.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options to style an imprint</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="invert"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="font"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="href"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Imprint.Options#invert" local-name="invert" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the logo is inverted.
          If omitted the current value remains, default is <code>false</code>.</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Imprint.Options#font" local-name="font" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The font of the text.
          If omitted the current value remains, default is <code>&quot;11px Arial,sans-serif&quot;</code>.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Imprint.Options#href" local-name="href" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The URL of the &quot;Terms of use&quot; link.
          If omitted the current value remains, default is &quot;<a href="http://here.com/terms">http://here.com/terms</a>&quot;.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <method name="H.map.Imprint#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Disposable#addOnDisposeCallback">
              <description>
                <prose><p>Method adds a callback which will be triggered when
the object is disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Imprint#capture" local-name="capture" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.ICapturable#capture">
              <description>
                <prose><p>This method is used to capture the element view</p></prose>
              </description>
              <param name="canvas">
                <types>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <name name="HTMLCanvasElement"/>
                </ctype>
                <description>
                  <prose><p>HTML Canvas element to draw the view of the capturable element</p></prose>
                </description>
              </param>
              <param name="pixelRatio">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays,
                               default is <code>1</code></p></prose>
                </description>
              </param>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="HTMLCanvasElement" optional="true"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>Callback function to call once result of
                                               the capturing is ready</p></prose>
                </description>
              </param>
              <param name="opt_errback" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="string"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>Callback function to call if error occurerd during capturing</p></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.ChangeEvent" local-name="ChangeEvent" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>An Event to signalize map related changes.</p></prose>
            </description>
            <extends>
              <type ref="H.util.ChangeEvent"/>
            </extends>
            <constructor local-name="ChangeEvent" name="H.map.ChangeEvent">
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The type of the event</p></prose>
                </description>
              </param>
              <param name="newValue">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>The view values that were set after the change</p></prose>
                </description>
              </param>
              <param name="oldValue">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>The view values that were set before the change</p></prose>
                </description>
              </param>
              <param name="modifiers">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>Indicates which values were changed.
       See properties FOV, PITCH, POSITION, ROLL, SIZE, YAW and ZOOM for the meaning of the bits.</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.ChangeEvent#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#target">
              <description>
                <prose><p>Object which triggered the event</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.map.ChangeEvent#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#currentTarget">
              <description>
                <prose><p>Object which has listener attached</p></prose>
              </description>
              <types>
                <type ref="*"/>
              </types>
              <ctype>
                <all/>
              </ctype>
            </property>
            <property name="H.map.ChangeEvent#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#type">
              <description>
                <prose><p>Name of the dispatched event</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <property name="H.map.ChangeEvent#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#defaultPrevented">
              <description>
                <prose><p>Indicates if preventDefault was called on the current event</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.ChangeEvent#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#preventDefault">
              <description>
                <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
              </description>
            </method>
            <method name="H.map.ChangeEvent#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Event#stopPropagation">
              <description>
                <prose><p>Stops propagation for current event.</p></prose>
              </description>
            </method>
          </class>
          <interface name="H.map.IControl" local-name="IControl" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Control interface defines method which are used for
direct view or camera manipulation</p></prose>
            </description>
            <method name="H.map.IControl#startControl" local-name="startControl" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method starts control action for camera. This action allows to control camera animation
and movement according to provided values in the <link ref="H.map.IControl#control" /> function</p></prose>
              </description>
              <param name="opt_kinetics" optional="true">
                <types>
                  <type ref="H.util.kinetics.IKinetics"/>
                </types>
                <ctype>
                  <name name="H.util.kinetics.IKinetics" optional="true"/>
                </ctype>
                <description>
                  <prose><p>kinetics settings</p></prose>
                </description>
              </param>
              <param name="opt_atX" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>control starts at x screen coordinate</p></prose>
                </description>
              </param>
              <param name="opt_atY" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>control starts at y screen coordinate</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.IControl#control" local-name="control" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method triggers single control action on engine. This will trigger an animation
which will start modification of the view's or camera's properties according to values begin set. Modification
will occur at every frame. The speed values are measure by 'levels per frame' were 1 level cooresponds to a distance
to next zoom level.</p></prose>
              </description>
              <param name="moveX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>moves the view/cam in right/left direction</p></prose>
                </description>
              </param>
              <param name="moveY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>moves the view/cam in bottom/top direction</p></prose>
                </description>
              </param>
              <param name="moveZ">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>moves the view/cam in depth direction (changes zoom level)</p></prose>
                </description>
              </param>
              <param name="angleX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>rotates cam over x-axis</p></prose>
                </description>
              </param>
              <param name="angleY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>rotates cam over y-axis</p></prose>
                </description>
              </param>
              <param name="angleZ">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>rotates cam over z-axis</p></prose>
                </description>
              </param>
              <param name="zoom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>changes current zoom level (for view works as moveZ)</p></prose>
                </description>
              </param>
              <param name="opt_timestamp" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.IControl#endControl" local-name="endControl" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method ends current control, which will stop ongoing animation triggered by the
startControl method. This method can prevent kinetics as well as it can adjust the
final view if the adjust function is being passed.</p></prose>
                <example>//prevent kinetcs
viewModel.endControl(true);

//prevent kinetics and set adjusted view
viewModel.endControl(true, function(requested) {
  requested.zoom = Math.round(requested.zoom);
});</example>
              </description>
              <param name="opt_preventKinetics" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will prevent kinetics animation</p></prose>
                </description>
              </param>
              <param name="opt_adjustView" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="H.map.ViewModel.CameraData"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>user defined function
which can adjust the final view this function takes last requestedData from the view model
and should return a modified <link ref="H.map.ViewModel.CameraData" /> which will be set as the final view</p></prose>
                </description>
              </param>
            </method>
          </interface>
          <class name="H.map.ViewModel" local-name="ViewModel" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a view of the map. It consists of a virtual camera
and a look-at point both of which have a position in geo-space and orientation
angles. The view model allows to change the values of these objects in order
to move or rotate the map or zoom in and out.</p>
<p>The view model can be manipulated by using two objects: a virtual camera or
the a look-at point. A virtual camera has a position and orientation (pitch,
yaw and roll) in geo-space. A look-at point allows to change the postion and
orientation of the virtual camera with respect to the point that is being
looked at. The look-at point has a position in geo-space and orientation
(heading, tilt and incline) and a distance (the distance of the camera with
respect to the look-at point). Setting look-at point values influences the
camera's position and orientation and vice-versa.</p>
<p>Modifying the view of a map is asynchronous as the view model will notify the
renderer of a change of its state and trigger the renderer.</p>
<p>A map renderer can choose to ignore or even correct certain values depending
on its capabilities. For example a 2D map renderer will ignore tilt values
and correct tilt values to be 0 on the view model in order to keep the
integrity of the view model.</p>
<p>In order to be notified of changes to the model that originate from the
renderer the view model dispatches an event &quot;sync&quot; whenever the
renderer synchronizes the requested changes to the view with it's own
internal state.</p></prose>
            </description>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <extends>
              <type ref="H.map.IControl"/>
            </extends>
            <constructor local-name="ViewModel" name="H.map.ViewModel"/>
            <event name="H.map.ViewModel#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this view-model's data changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.ViewModel#event:sync" local-name="sync" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when the rendered map is synchronized with this view-model's data</p></prose>
              </description>
              <types>
                <type ref="H.map.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.map.ChangeEvent"/>
              </ctype>
            </event>
            <typedef name="H.map.ViewModel.RequestedData" local-name="RequestedData" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Defines currently requested view data, which will be rendered by the map.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="camera"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.ViewModel.CameraData"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zoom"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="animate"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.ViewModel.RequestedData#camera" local-name="camera" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The requested camera properties</p></prose>
                </description>
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.RequestedData#zoom" local-name="zoom" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The requested zoom level</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.RequestedData#animate" local-name="animate" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>indicates if the requested transition should be animated</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <enum name="H.map.ViewModel#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Events fired by ViewModel</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.ViewModel#EventType.UPDATE" local-name="UPDATE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.ViewModel#EventType.SYNC" local-name="SYNC">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <method name="H.map.ViewModel#transferCameraData_" local-name="transferCameraData_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method copies camera data to target object</p></prose>
              </description>
              <param name="target">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the target object to which to transfer the data values</p></prose>
                </description>
              </param>
              <param name="source">
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>the values to be transferred to the target</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>object representing current camera (state) values</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.ViewModel#CAMERA_KEYS_" local-name="CAMERA_KEYS_" access="private" scope="instance" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose><p>A list of camera property keys</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;string&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.map.ViewModel.CamToSyncFlags_" local-name="CamToSyncFlags_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Mapping of camara property names to bit values according the bit values from H.map.ChangeEvent constants
which have the same names but upper case</p></prose>
              </description>
              <types>
                <type ref="Object.&lt;string,number&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Object"/>
                  </base>
                  <app>
                    <name name="string"/>
                  </app>
                  <app>
                    <name name="number"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.map.ViewModel#transferData_" local-name="transferData_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method copies camera data from a source to a target object</p></prose>
              </description>
              <param name="target">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>The target object to which to transfer the data values</p></prose>
                </description>
              </param>
              <param name="source">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>The values to be transferred to the target</p></prose>
                </description>
              </param>
              <param name="keys">
                <types>
                  <type ref="Array.&lt;string&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The keys of the properties to transfer</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the target object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.ViewModel#syncFlags_" local-name="syncFlags_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
            </property>
            <property name="H.map.ViewModel#oldCamData_" local-name="oldCamData_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.map.ViewModel.CameraData"/>
              </types>
              <ctype>
                <name name="H.map.ViewModel.CameraData"/>
              </ctype>
            </property>
            <property name="H.map.ViewModel#newCamData_" local-name="newCamData_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.map.ViewModel.CameraData"/>
              </types>
              <ctype>
                <name name="H.map.ViewModel.CameraData"/>
              </ctype>
            </property>
            <method name="H.map.ViewModel#getCameraData" local-name="getCameraData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the camera data, which is currently rendered.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>the current rendered camera data</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewModel#setCameraData" local-name="setCameraData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets new camera data to be processed by the renderer.</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>the values to be modified</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.ViewModel"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel"/>
                </ctype>
                <description>
                  <prose><p>this view model object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewModel#synchronize" local-name="synchronize" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A callback used by an engine to update current view values according to real rendered values.</p></prose>
              </description>
              <param name="renderedCameraData">
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>the updated
  cameraData from the renderer</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#setZoom" local-name="setZoom" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets a new zoom level to be processed by the renderer</p></prose>
              </description>
              <param name="zoom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the new zoom level</p></prose>
                </description>
              </param>
              <param name="animate">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#getZoom" local-name="getZoom" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the zoom level that is currently rendered.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>current zoom level (scale)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewModel#getRequestedCameraData" local-name="getRequestedCameraData" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns the currently requested data.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.ViewModel.CameraData"/>
                </types>
                <ctype>
                  <name name="H.map.ViewModel.CameraData"/>
                </ctype>
                <description>
                  <prose><p>last requested cam/view data</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewModel#startControl" local-name="startControl" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>A method to signal the begin of a control operation.</p></prose>
              </description>
              <param name="opt_kinetics" optional="true">
                <types>
                  <type ref="H.util.kinetics.IKinetics"/>
                </types>
                <ctype>
                  <name name="H.util.kinetics.IKinetics" optional="true"/>
                </ctype>
                <description>
                  <prose><p>kinetics settings</p></prose>
                </description>
              </param>
              <param name="opt_atX" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>x screen coordinate at which control has started</p></prose>
                </description>
              </param>
              <param name="opt_atY" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>y screen coordinate at which control has started</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#control" local-name="control" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>A method to set the values for a continuously modification of the ViewModel on different axes.
If the current render engine doesn't support certain modifications then they are ignored.</p></prose>
              </description>
              <param name="moveX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The movement on x-axis as levels per millisecond
       where a level correlates to the distance between camera and look-at point.</p></prose>
                </description>
              </param>
              <param name="moveY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The movement on y-axis as levels per millisecond
       where a level correlates to the distance between camera and look-at point</p></prose>
                </description>
              </param>
              <param name="moveZ">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The movement on z-axis as levels per millisecond.</p></prose>
                </description>
              </param>
              <param name="angleX">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rotation of on screen's x axis as degrees per millisecond.</p></prose>
                </description>
              </param>
              <param name="angleY">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rotation of on screen's y axis as degrees per millisecond.</p></prose>
                </description>
              </param>
              <param name="angleZ">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The rotation of on screen's z axis as degrees per millisecond.</p></prose>
                </description>
              </param>
              <param name="opt_zoom" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The modification of the zoom level as levels per millisecond</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#endControl" local-name="endControl" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>A method to signal the end of a control operation.</p></prose>
              </description>
              <param name="opt_preventKinetics" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether a kinetic effect is performed</p></prose>
                </description>
              </param>
              <param name="opt_adjustView" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="H.map.ViewModel.CameraData"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>An callback to adjust the final ViewModel by
       modifying the passed camera data.</p></prose>
                </description>
              </param>
            </method>
            <typedef name="H.map.ViewModel.CameraData" local-name="CameraData" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Defines camera's properties.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="zoom"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="position"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.geo.IPoint"/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="pitch"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="yaw"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="roll"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.ViewModel.CameraData#zoom" local-name="zoom" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>zoom level to be used by rendering engine</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.CameraData#position" local-name="position" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the position of the virtual camera in geo-space</p></prose>
                </description>
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.CameraData#pitch" local-name="pitch" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the rotation of the virtual camera along its local x-axis</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.CameraData#yaw" local-name="yaw" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the rotation of the virtual camera along its local y-axis</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.CameraData#roll" local-name="roll" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the rotation of the virtual camera along its local z-axis</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.CameraData#fov" local-name="fov" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <class name="H.map.ViewModel.UpdateEvent" local-name="UpdateEvent" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Update event is fired whenever view model data is changed. It contains property which hold currently requested data</p></prose>
              </description>
              <extends>
                <type ref="H.util.Event"/>
              </extends>
              <constructor local-name="UpdateEvent" name="H.map.ViewModel.UpdateEvent">
                <param name="requested">
                  <types>
                    <type ref="H.map.ViewModel.RequestedData"/>
                  </types>
                  <ctype>
                    <name name="H.map.ViewModel.RequestedData"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.ViewModel.UpdateEvent#target" local-name="target" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#target">
                <description>
                  <prose><p>Object which triggered the event</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.UpdateEvent#currentTarget" local-name="currentTarget" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#currentTarget">
                <description>
                  <prose><p>Object which has listener attached</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.UpdateEvent#type" local-name="type" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#type">
                <description>
                  <prose><p>Name of the dispatched event</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.map.ViewModel.UpdateEvent#defaultPrevented" local-name="defaultPrevented" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#defaultPrevented">
                <description>
                  <prose><p>Indicates if preventDefault was called on the current event</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
              <method name="H.map.ViewModel.UpdateEvent#preventDefault" local-name="preventDefault" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.Event#preventDefault">
                <description>
                  <prose><p>Sets defaultPrevented to true. Which can be used to prevent
some default behavior.</p></prose>
                </description>
              </method>
              <method name="H.map.ViewModel.UpdateEvent#stopPropagation" local-name="stopPropagation" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.Event#stopPropagation">
                <description>
                  <prose><p>Stops propagation for current event.</p></prose>
                </description>
              </method>
            </class>
            <method name="H.map.ViewModel#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewModel#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewModel#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.ViewModel#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Group" local-name="Group" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents a map object which can contain other map objects.
It's visibility, zIndex and object-order influences the contained map objects</p></prose>
            </description>
            <extends>
              <type ref="H.map.Object"/>
            </extends>
            <constructor local-name="Group" name="H.map.Group">
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Group.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Group.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional object containing initialization values</p></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if the option's "objects" property is specified but not an Array
     of <link ref="H.map.Object" /> instances</prose>
                </description>
              </exception>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose>if the option's "provider" and "objects" properties are specified
     but one of the objects' provider and the group's provider are different and
     neither <code>null</code> nor an instance of <link ref="H.map.provider.LocalObjectProvider" /></prose>
                </description>
              </exception>
            </constructor>
            <method name="H.map.Group.forEach_setProvider_" local-name="forEach_setProvider_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A forEach callback to recursivly align the descendents' providers with this group's provider.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="group">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group.forEach_resetZInfo_" local-name="forEach_resetZInfo_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A forEach callback to recursivly set the provider for all descendents.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="group">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Group#flags_" local-name="flags_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The invalidation flags to set for all children, needed in Group#forEach<em>invalidate</em>()</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group.forEach_invalidate_" local-name="forEach_invalidate_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A forEach callback to invalidate recursivly</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="group">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#forEach" local-name="forEach" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To invokes a provided callback once per object in add order.
The function is invoked with the following arguments:<ul>
   <li>the currently traversed object</li>
   <li>the index of the object</li>
   <li>the group itself</li>
   </ul></p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="H.map.Object" nullable="false"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="H.map.Group" nullable="false"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_recursive" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether sub groups should be traversed recursively</p></prose>
                </description>
              </param>
              <param name="opt_context" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose><p>The context to use as &quot;this&quot; within the callback</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#getObjects" local-name="getObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get a list of all objects of this group.
On groups with many chilren this method can cause a higher memory and CPU consumption.
Alternatively you case use <link ref="H.map.Group.prototype.forEach" /></p></prose>
              </description>
              <param name="opt_recursive" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether objects in sub-groups are also collected .</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="!Array.&lt;!H.map.Object&gt;"/>
                </types>
                <ctype>
                  <typed nullable="false">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Object" nullable="false"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#getBounds" local-name="getBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Method returns the bounding rectangle for the group. The rectangle
is the smallest rectangle that covers all objects. If group doesn't contains
objects method returns <code>null</code>.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>geo ractangle that covers all objects in the group</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group.forEach_collectObjects_" local-name="forEach_collectObjects_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A forEach callback to collect objects.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="group">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Group#childCount_" local-name="childCount_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The number of child objects in this group, will be adjusted in addObject() and removeObject()</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group#getChildCount" local-name="getChildCount" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>Returns the number of child objects of this group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.Group.Sibling" local-name="Sibling" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A sibling which keeps references to its previous and next sibling
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="previousSibling"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <union nullable="false">
                            <type>
                              <name name="H.map.Object"/>
                            </type>
                            <type>
                              <name name="H.map.Group.Sibling"/>
                            </type>
                          </union>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="nextSibling"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <union nullable="false">
                            <type>
                              <name name="H.map.Object"/>
                            </type>
                            <type>
                              <name name="H.map.Group.Sibling"/>
                            </type>
                          </union>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Group.Sibling#previousSibling" local-name="previousSibling" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.Object"/>
                  <type ref="H.map.Group.Sibling"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Object"/>
                    </type>
                    <type>
                      <name name="H.map.Group.Sibling"/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Group.Sibling#nextSibling" local-name="nextSibling" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.Object"/>
                  <type ref="H.map.Group.Sibling"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Object"/>
                    </type>
                    <type>
                      <name name="H.map.Group.Sibling"/>
                    </type>
                  </union>
                </ctype>
              </property>
            </typedef>
            <property name="H.map.Group#headAndTail" local-name="headAndTail" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A pseudo sibling which references the first (nextSibling) and the last (previousSibling) object in this group.
If the group is empty, booth properties references the pseudo sibling itself.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group.Sibling"/>
              </types>
              <ctype>
                <name name="H.map.Group.Sibling" nullable="false"/>
              </ctype>
            </property>
            <method name="H.map.Group#linkSiblings_" local-name="linkSiblings_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To interlink two siblings
The caller has to assure for each of the siblings that it is either a Object contained by this group or the
headAndTail of this group or <code>null</code>.</p></prose>
              </description>
              <param name="previousSibling">
                <types>
                  <type ref="H.map.Object"/>
                  <type ref="H.map.Group.Sibling"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Object"/>
                    </type>
                    <type>
                      <name name="H.map.Group.Sibling"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="nextSibling">
                <types>
                  <type ref="H.map.Object"/>
                  <type ref="H.map.Group.Sibling"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Object"/>
                    </type>
                    <type>
                      <name name="H.map.Group.Sibling"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Group#nextSiblingIndex_" local-name="nextSiblingIndex_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The sibling index to use for the next new appended object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group#addObject" local-name="addObject" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To append an object to this group.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>a reference to the appended object</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if the argument is not an instance of <link ref="H.map.Object" /></prose>
                </description>
              </exception>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose>if the object's provider or this group's provider are different and
     neither <code>null</code> nor an instance of <link ref="H.map.provider.LocalObjectProvider" /></prose>
                </description>
              </exception>
            </method>
            <method name="H.map.Group#addObjects" local-name="addObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Appends a list of objects to this group</p></prose>
              </description>
              <param name="objects">
                <types>
                  <type ref="Array.&lt;!H.map.Object&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Object" nullable="false"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if the argument is not an Array of <link ref="H.map.Object" /> instances</prose>
                </description>
              </exception>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose>if one of the object's provider and the group's provider are different
     and neither <code>null</code> nor an instance of <link ref="H.map.provider.LocalObjectProvider" /></prose>
                </description>
              </exception>
            </method>
            <method name="H.map.Group#removeObject" local-name="removeObject" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Removes an object from this group.</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>The object to remove</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>a reference to the removed object</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if the given object is not a object of this group</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.Group#removeObjects" local-name="removeObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Removes objects from this group.</p></prose>
              </description>
              <param name="objects">
                <types>
                  <type ref="!Array.&lt;!H.map.Object&gt;"/>
                </types>
                <ctype>
                  <typed nullable="false">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Object" nullable="false"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The list of objects to remove</p></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if the list is not an Array or it contains others than a group's object</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.Group#removeAll" local-name="removeAll" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Method removes all objects from the group.</p></prose>
              </description>
            </method>
            <typedef name="H.map.Group.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a group</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="data"/>
                    </key>
                    <value>
                      <all/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="objects"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <union>
                            <type>
                              <typed>
                                <base>
                                  <name name="Array"/>
                                </base>
                                <app>
                                  <name name="H.map.Object"/>
                                </app>
                              </typed>
                            </type>
                            <type>
                              <undefined/>
                            </type>
                          </union>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Group.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Group.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Group.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the map object is visible, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Group.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Group.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of ObjectProvider
          wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Group.Options#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Optional arbitrary data to be stored with this map object. This data can be retrieved by calling
          <code>getData</code>.</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.map.Group.Options#objects" local-name="objects" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A list of map objects to add initially to this group.</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.Object&gt;="/>
                </types>
                <ctype>
                  <typed optional="true">
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.Object"/>
                    </app>
                  </typed>
                </ctype>
              </property>
            </typedef>
            <event name="H.map.Group#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Group#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Group#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Group#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Group#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Group#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Group#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Group#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Group#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Group#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Group#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Group#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Group#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Group#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Group#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Group#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Group#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Group#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Group#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Group#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Group#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Group#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Group#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Group#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <interface name="H.map.IInteraction" local-name="IInteraction" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Interface describes interaction with the view port. Interaction will reflect view change
depending on the interaction coordinates passed and the modifiers which specify the type
of interaction.</p></prose>
            </description>
            <method name="H.map.IInteraction.startInteraction" local-name="startInteraction" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method starts the interaction with the view port. Should be called every time when new
interaction is started i.e mouse grab, or touch start.</p></prose>
              </description>
              <param name="modifiers">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>a bitmask which specifies what operations should performed during every interaction</p></prose>
                </description>
              </param>
              <param name="opt_kinetics" optional="true">
                <types>
                  <type ref="H.util.kinetics.IKinetics"/>
                </types>
                <ctype>
                  <name name="H.util.kinetics.IKinetics" optional="true"/>
                </ctype>
                <description>
                  <prose><p>specifies kinetic move at the end of interaction</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.IInteraction.interaction" local-name="interaction" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method resolves direct screen (view port) interaction. This function will modify the current
view according to values passed in.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>viewport x coordinate</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>viewport y coordinate</p></prose>
                </description>
              </param>
              <param name="opt_bx" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>x coordinate for second pointer/touch if present</p></prose>
                </description>
              </param>
              <param name="opt_by" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>y coordinate for secong pointer/touch if present</p></prose>
                </description>
              </param>
              <param name="opt_timestamp" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>known timestamp which should be passed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.IInteraction.endInteraction" local-name="endInteraction" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This method ends interaction and applies kinetic movement if defined by
using startInteraction method</p></prose>
              </description>
              <param name="opt_preventKinetics" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will prevent kinetics behaviour at the end of interaction</p></prose>
                </description>
              </param>
            </method>
          </interface>
          <class name="H.map.ViewPort" local-name="ViewPort" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>ViewPort object holds information about the HTML element where the map is rendered. It contains information
regarding the element (view port) size and triggers events when the element size is changed.</p></prose>
            </description>
            <extends>
              <type ref="H.map.IInteraction"/>
            </extends>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <constructor local-name="ViewPort" name="H.map.ViewPort">
              <param name="element">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element"/>
                </ctype>
                <description>
                  <prose><p>html element were map will be rendered</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.ViewPort.Options"/>
                </types>
                <ctype>
                  <name name="H.map.ViewPort.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional configuration parameters</p></prose>
                </description>
              </param>
            </constructor>
            <event name="H.map.ViewPort#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when this view-port's properties padding, margin or size changes</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <event name="H.map.ViewPort#event:sync" local-name="sync" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when the rendered map is synchronized with this viewport's properties</p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <property name="H.map.ViewPort#element_" local-name="element_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Viewport container</p></prose>
              </description>
            </property>
            <enum name="H.map.ViewPort#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Events fired by ViewPort</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.ViewPort#EventType.UPDATE" local-name="UPDATE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.ViewPort#EventType.SYNC" local-name="SYNC">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.ViewPort#fixedCenter" local-name="fixedCenter" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>See <link ref="H.map.ViewPort.Options#fixedCenter" /> – default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#element" local-name="element" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds the HTML element, which defines the viewport.</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#width" local-name="width" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds this viewport's current width</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#height" local-name="height" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds this viewport's current height</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#margin" local-name="margin" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds this viewport's current margin value</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#padding" local-name="padding" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds this viewport's current padding</p></prose>
              </description>
              <types>
                <type ref="H.map.ViewPort.Padding"/>
              </types>
              <ctype>
                <name name="H.map.ViewPort.Padding"/>
              </ctype>
            </property>
            <property name="H.map.ViewPort#center" local-name="center" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This property holds this viewport's current center point</p></prose>
              </description>
              <types>
                <type ref="H.math.Point"/>
              </types>
              <ctype>
                <name name="H.math.Point"/>
              </ctype>
            </property>
            <method name="H.map.ViewPort#setMargin" local-name="setMargin" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the margin on the viewPort</p></prose>
              </description>
              <param name="margin">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>margin which is used to fetch map data</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#setPadding" local-name="setPadding" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the padding on the viewport. Padding will result in shifted
map center which will be the visual center of the padded area.</p></prose>
              </description>
              <param name="top">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>padding from the top</p></prose>
                </description>
              </param>
              <param name="right">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>padding from the right</p></prose>
                </description>
              </param>
              <param name="bottom">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>padding from the bottom</p></prose>
                </description>
              </param>
              <param name="left">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>padding from the left</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#update_" local-name="update_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Updates the element size and the center property (by taking the size and the padding into account)</p></prose>
              </description>
            </method>
            <property name="H.map.ViewPort#oldSize_" local-name="oldSize_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.math.ISize"/>
              </types>
              <ctype>
                <name name="H.math.ISize"/>
              </ctype>
            </property>
            <method name="H.map.ViewPort#resize" local-name="resize" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method updates size of the viewport according to container size. It must be called whenever the HTML element
changed size in order to update the map's viewport values.</p></prose>
              </description>
            </method>
            <method name="H.map.ViewPort#synchronize" local-name="synchronize" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A callback used by an engine to notify the view port that the engine is in sync after an &quot;update&quot; event was fired</p></prose>
              </description>
              <param name="size">
                <types>
                  <type ref="H.math.ISize"/>
                </types>
                <ctype>
                  <name name="H.math.ISize"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Disposes the object.</p></prose>
              </description>
            </method>
            <method name="H.map.ViewPort#startInteraction" local-name="startInteraction" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>This method starts the interaction with the view port. Should be called every time when new
interaction is started i.e mouse grab, or touch start.</p></prose>
              </description>
              <param name="modifiers">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>a bitmask which specifies what operations should performed during every interaction</p></prose>
                </description>
              </param>
              <param name="opt_kinetics" optional="true">
                <types>
                  <type ref="H.util.kinetics.IKinetics"/>
                </types>
                <ctype>
                  <name name="H.util.kinetics.IKinetics" optional="true"/>
                </ctype>
                <description>
                  <prose><p>specifies kinetic move at the end of interaction</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#interaction" local-name="interaction" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>This method resolves direct screen (view port) interaction. This function will modify the current
view according to values passed in.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>viewport x coordinate</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>viewport y coordinate</p></prose>
                </description>
              </param>
              <param name="opt_bx" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>x coordinate for second pointer/touch if present</p></prose>
                </description>
              </param>
              <param name="opt_by" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>y coordinate for secong pointer/touch if present</p></prose>
                </description>
              </param>
              <param name="opt_timestamp" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>known timestamp which should be passed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#endInteraction" local-name="endInteraction" access="public" scope="instance" virtual="true" published="true" exported="true">
              <description>
                <prose><p>This method ends interaction and applies kinetic movement if defined by
using startInteraction method</p></prose>
              </description>
              <param name="opt_preventKinetics" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will prevent kinetics behaviour at the end of interaction</p></prose>
                </description>
              </param>
            </method>
            <typedef name="H.map.ViewPort.Padding" local-name="Padding" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Represents viewport padding definition.</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="top"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="right"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="bottom"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="left"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.ViewPort.Padding#top" local-name="top" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the padding on the top edge (in pixels)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.ViewPort.Padding#right" local-name="right" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the padding on the right edge (in pixels)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.ViewPort.Padding#bottom" local-name="bottom" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the padding on the bottom edge (in pixels)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.ViewPort.Padding#left" local-name="left" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>the padding on the left edge (in pixels)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
            </typedef>
            <typedef name="H.map.ViewPort.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options which may be used to initialize new ViewPort instance</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="margin"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="padding"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.ViewPort.Padding"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="fixedCenter"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.ViewPort.Options#margin" local-name="margin" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The size in pixel of the supplemental area to render for each side of the map</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewPort.Options#padding" local-name="padding" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The padding in pixels for each side of the map</p></prose>
                </description>
                <types>
                  <type ref="H.map.ViewPort.Padding"/>
                </types>
                <ctype>
                  <name name="H.map.ViewPort.Padding" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.ViewPort.Options#fixedCenter" local-name="fixedCenter" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the center of the map should remain unchanged if the viewport's
          size or or padding has been changed, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <method name="H.map.ViewPort#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.ViewPort#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.ViewPort#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.ViewPort#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Icon" local-name="Icon" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A visual representation of the <link ref="H.map.Marker" />.</p></prose>
            </description>
            <extends>
              <type ref="H.util.EventTarget"/>
            </extends>
            <constructor local-name="Icon" name="H.map.Icon">
              <param name="bitmap">
                <types>
                  <type ref="string"/>
                  <type ref="HTMLImageElement"/>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <name name="HTMLImageElement"/>
                    </type>
                    <type>
                      <name name="HTMLCanvasElement"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>Either an image URL, a SVG markup, an image or a canvas.</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Icon.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Icon.Options" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose>if size, anchor or hitArea is specified with invalid type or values
     or the bitmap is a HTMLImageElement which is not succesfully loaded</prose>
                </description>
              </exception>
            </constructor>
            <event name="H.map.Icon#event:statechange" local-name="statechange" access="public" scope="instance" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Fired when the icon's bitmap loading state changes, see <link ref="H.map.Icon.prototype.getState" /></p></prose>
              </description>
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
            </event>
            <enum name="H.map.Icon#State" local-name="State" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The state types of an Icon</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <value name="H.map.Icon#State.ERROR" local-name="ERROR">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Icon#State.LOADING" local-name="LOADING">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Icon#State.READY" local-name="READY">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Icon.ERROR" local-name="ERROR" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.map.Icon.prototype.State"/>
              </types>
              <ctype>
                <name name="H.map.Icon.prototype.State"/>
              </ctype>
            </property>
            <property name="H.map.Icon.LOADING" local-name="LOADING" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.map.Icon.prototype.State"/>
              </types>
              <ctype>
                <name name="H.map.Icon.prototype.State"/>
              </ctype>
            </property>
            <property name="H.map.Icon.READY" local-name="READY" access="public" scope="static" virtual="false" published="false" exported="false" constant="true">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.map.Icon.prototype.State"/>
              </types>
              <ctype>
                <name name="H.map.Icon.prototype.State"/>
              </ctype>
            </property>
            <property name="H.map.Icon#state_" local-name="state_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The state of this Icon</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon.prototype.State"/>
              </types>
              <ctype>
                <name name="H.map.Icon.prototype.State"/>
              </ctype>
            </property>
            <method name="H.map.Icon#getState" local-name="getState" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the icon's bitmap loading state</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon.prototype.State"/>
                </types>
                <ctype>
                  <name name="H.map.Icon.prototype.State"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <enum name="H.map.Icon#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Events fired by Icon</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Icon#EventType.STATECHANGE" local-name="STATECHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <method name="H.map.Icon#setState_" local-name="setState_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Sets the state of this icon and dispatch a &quot;statechange&quot; event</p></prose>
              </description>
              <param name="state">
                <types>
                  <type ref="H.map.Icon.prototype.State"/>
                </types>
                <ctype>
                  <name name="H.map.Icon.prototype.State"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Icon#asCanvas_" local-name="asCanvas_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Indicates whether the bitmap should be converted into a canvas, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Icon#imgToCanvas_" local-name="imgToCanvas_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Converts an HTMLImageElement into a HTMLCanvasElement. It expects that the icon's size_ property is already set!</p></prose>
              </description>
              <param name="img">
                <types>
                  <type ref="HTMLImageElement"/>
                </types>
                <ctype>
                  <name name="HTMLImageElement"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <name name="HTMLCanvasElement"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Icon#processBitmap_" local-name="processBitmap_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Processes the constructor's bitmap argument</p></prose>
              </description>
              <param name="bitmap">
                <types>
                  <type ref="string"/>
                  <type ref="HTMLImageElement"/>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="string"/>
                    </type>
                    <type>
                      <name name="HTMLImageElement"/>
                    </type>
                    <type>
                      <name name="HTMLCanvasElement"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>Either an image URL, a SVG markup, an image or a canvas.</p></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Icon#bitmap_" local-name="bitmap_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The bitmap of this icon</p></prose>
              </description>
              <types>
                <type ref="HTMLImageElement"/>
                <type ref="HTMLCanvasElement"/>
              </types>
              <ctype>
                <union nullable="true">
                  <type>
                    <name name="HTMLImageElement"/>
                  </type>
                  <type>
                    <name name="HTMLCanvasElement"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Icon#getBitmap" local-name="getBitmap" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the bitmap of this icon or <code>null</code> if the bitmap is not ready yet
(see <link ref="H.map.Icon.prototype.getState" />)</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="HTMLImageElement"/>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <union nullable="true">
                    <type>
                      <name name="HTMLImageElement"/>
                    </type>
                    <type>
                      <name name="HTMLCanvasElement"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <enum name="H.map.Icon.BmpType_" local-name="BmpType_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The type of the bitmap</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <value name="H.map.Icon.BmpType_.String" local-name="String">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Icon.BmpType_.HTMLImageElement" local-name="HTMLImageElement">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Icon.BmpType_.HTMLCanvasElement" local-name="HTMLCanvasElement">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Icon#size_" local-name="size_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The size of this icon</p></prose>
              </description>
              <types>
                <type ref="H.math.Size"/>
              </types>
              <ctype>
                <name name="H.math.Size" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Icon#getSize" local-name="getSize" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the size of this icon or <code>null</code> if a size wasn't specified in the constructor's options and the state
of this icon is not <link ref="H.map.Icon.READY" /></p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Size"/>
                </types>
                <ctype>
                  <name name="H.math.Size" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Icon#anchor_" local-name="anchor_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The anchor of this icon or <code>null</code> if an anchor wasn't specified in the
constructor's options and the state of this
icon is not <link ref="H.map.Icon.READY" /></p></prose>
              </description>
              <types>
                <type ref="H.math.Point"/>
              </types>
              <ctype>
                <name name="H.math.Point" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Icon#getAnchor" local-name="getAnchor" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the anchor point of this icon or <code>null</code> if an anchor wasn't specified in the constructor's options
and the state of this icon is not <link ref="H.map.Icon.READY" />.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Icon#adjustSizeAndAnchor_" local-name="adjustSizeAndAnchor_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Adjusts the size<em> and anchor</em> properties if not already defined</p></prose>
              </description>
              <param name="bitmap">
                <types>
                  <type ref="HTMLImageElement"/>
                  <type ref="HTMLCanvasElement"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="HTMLImageElement"/>
                    </type>
                    <type>
                      <name name="HTMLCanvasElement"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="isImage">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether the bitmap is an HTMLImageElement</p></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Icon#hitArea_" local-name="hitArea_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The hit area of this icon or <code>null</code> if a hit area wasn't specified in the
constructor's options</p></prose>
              </description>
              <types>
                <type ref="H.map.HitArea"/>
              </types>
              <ctype>
                <name name="H.map.HitArea"/>
              </ctype>
            </property>
            <method name="H.map.Icon#getHitArea" local-name="getHitArea" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns the hit area of the icon.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.HitArea"/>
                </types>
                <ctype>
                  <name name="H.map.HitArea" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>icon's anchor point</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Icon#imageLoaderTask_" local-name="imageLoaderTask_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Keeps the task for the ImageLoader (if the bitmap was specified as URL)</p></prose>
              </description>
              <types>
                <type ref="H.util.AsyncQueue.Task"/>
              </types>
              <ctype>
                <name name="H.util.AsyncQueue.Task"/>
              </ctype>
            </property>
            <method name="H.map.Icon#onImageOK_" local-name="onImageOK_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A callback to use for the ImageLoader in the case where an image could be loaded.</p></prose>
              </description>
              <param name="img">
                <types>
                  <type ref="HTMLImageElement"/>
                </types>
                <ctype>
                  <name name="HTMLImageElement" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Icon#onImageError_" local-name="onImageError_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A callback to use for the ImageLoader in the case where an image could be NOT loaded.</p></prose>
              </description>
              <param name="reason">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <typedef name="H.map.Icon.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a Icon</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="size"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.math.ISize"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="anchor"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.math.IPoint"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="hitArea"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.HitArea"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Icon.Options#size" local-name="size" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The icon's size in pixel, default is the bitmap's natural size</p></prose>
                </description>
                <types>
                  <type ref="H.math.ISize"/>
                </types>
                <ctype>
                  <name name="H.math.ISize" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Icon.Options#anchor" local-name="anchor" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The anchorage point in pixel, default is <code>bottom-center</code></p></prose>
                </description>
                <types>
                  <type ref="H.math.IPoint"/>
                </types>
                <ctype>
                  <name name="H.math.IPoint" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Icon.Options#hitArea" local-name="hitArea" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The area to use for hit detection, default is the whole rectangular area</p></prose>
                </description>
                <types>
                  <type ref="H.map.HitArea"/>
                </types>
                <ctype>
                  <name name="H.map.HitArea" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Icon.Options#asCanvas" local-name="asCanvas" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether a non canvas bitmap is converted into a canvas, default is <code>true</code>.
          The conversion improves the rendering performance but it could also cause a higher memory consumption.</p></prose>
                </description>
                <types>
                  <type ref="H.map.HitArea"/>
                </types>
                <ctype>
                  <name name="H.map.HitArea" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <method name="H.map.Icon#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Icon#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Icon#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Icon#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Icon#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Icon#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Icon#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.DataModel" local-name="DataModel" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>The class represents data model of the map. It holds list of layers that are rendered
by map's RenderEngine. The class listens to 'update' events from layers and dispatches
them to the RenderEngine.</p></prose>
            </description>
            <extends>
              <type ref="H.util.OList"/>
            </extends>
            <constructor local-name="DataModel" name="H.map.DataModel">
              <param name="opt_layers" optional="true">
                <types>
                  <type ref="Array"/>
                </types>
                <ctype>
                  <name name="Array" optional="true"/>
                </ctype>
                <description>
                  <prose><p>array of layers to be added to the data model</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.DataModel#registerLayer_" local-name="registerLayer_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To register an &quot;update&quot; event listener</p></prose>
              </description>
              <param name="layer">
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose><p>The layer to register</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#deregisterLayer_" local-name="deregisterLayer_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To deregister an &quot;update&quot; listeners</p></prose>
              </description>
              <param name="layer">
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose><p>The layer to register</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method adds layer to the data model, which will result in displaying the layer
on the map respecting the order in which they were added.</p></prose>
              </description>
              <param name="layer">
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose><p>The Layer to add</p></prose>
                </description>
              </param>
              <param name="opt_idx" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>index where the new element should be inserted</p></prose>
                </description>
              </param>
              <exception>
                <description>
                  <prose>InvalidArgument if the given layer doesn't inherit H.map.layer.Layer</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.DataModel#set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="layer">
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>InvalidArgument if the given layer doesn't inherit H.map.layer.Layer</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.DataModel#removeAt" local-name="removeAt" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes layer with the given index. This will effectively remove
the layer from the map.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>index of the layer to be removed</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>IllegalArgument if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.DataModel#remove" local-name="remove" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes a given layer. This will effectively remove the layer from the map.</p></prose>
              </description>
              <param name="layer">
                <types>
                  <type ref="H.map.layer.Layer"/>
                </types>
                <ctype>
                  <name name="H.map.layer.Layer"/>
                </ctype>
                <description>
                  <prose><p>The layer to be removed</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>signals if the layer could be found in the list and is removed</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DataModel#flush" local-name="flush" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method removes all layers from data model.</p></prose>
              </description>
            </method>
            <event name="H.map.DataModel#event:add" local-name="add" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.OList#event:add">
              <description>
                <prose><p>Fired when an entry was added to the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.map.DataModel#event:remove" local-name="remove" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.OList#event:remove">
              <description>
                <prose><p>Fired when an entry was removed from the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.map.DataModel#event:set" local-name="set" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.OList#event:set">
              <description>
                <prose><p>Fired when an entry was set in the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <event name="H.map.DataModel#event:move" local-name="move" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.util.OList#event:move">
              <description>
                <prose><p>Fired when an entry was moved within the list.</p></prose>
              </description>
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
            </event>
            <property name="H.map.DataModel#entries_" local-name="entries_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.OList#entries_">
              <description>
                <prose><p>The internal list of all entries</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;*&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <all/>
                  </app>
                </typed>
              </ctype>
            </property>
            <method name="H.map.DataModel#adjustIndex_" local-name="adjustIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.OList#adjustIndex_">
              <description>
                <prose><p>Helper method to adjust a given index</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The index to adjust</p></prose>
                </description>
              </param>
              <param name="setToLength">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>To signal that the index value should be the list length</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the adjusted index</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>OutOfRangeError if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.DataModel#add_" local-name="add_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.OList#add_">
              <description>
                <prose><p>Internal method to insert an entry at a given index.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry to add</p></prose>
                </description>
              </param>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index where the entry should be inserted.
   The caller must validate that the idx is &gt;=0 and &lt;=length beforehand!</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>To signal that NO event should be dispatched</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#remove_" local-name="remove_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.OList#remove_">
              <description>
                <prose><p>This method removes an entry from the list at the given index
The caller must validate that the idx to be &gt;=0 and &lt;length beforehand!
index of the entry to remove.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry which should be removed</p></prose>
                </description>
              </param>
              <param name="opt_suppressEvent" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>To signal that NO event should be dispatched</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>the removed entry</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DataModel#indexOf" local-name="indexOf" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.OList#indexOf">
              <description>
                <prose><p>This method retrieves the index of the first object in this list that is identical with the
object supplied by the caller.</p></prose>
              </description>
              <param name="entry">
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The entry for which to return the index.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the first matching entry in this list
   or -1 if the entry provided by the caller is not found in the list</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DataModel#get" local-name="get" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.OList#get">
              <description>
                <prose><p>To get the entry at the specified index.</p></prose>
              </description>
              <param name="idx">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The index of the entry to get
   a negative index is treated as being relative from the end of the list</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="?"/>
                </types>
                <ctype>
                  <unknown/>
                </ctype>
                <description>
                  <prose><p>The element at the given index</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>OutOfRangeError if the given index is out of bounds</prose>
                </description>
              </exception>
            </method>
            <method name="H.map.DataModel#getLength" local-name="getLength" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.OList#getLength">
              <description>
                <prose><p>This method returns the length of the list.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DataModel#asArray" local-name="asArray" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.OList#asArray">
              <description>
                <prose><p>This method returns all list's entries as an array.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;*&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <all/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The list as an array</p></prose>
                </description>
              </returns>
            </method>
            <enum name="H.map.DataModel#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.util.OList#EventType">
              <description>
                <prose><p>Events fired by OList.</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.DataModel#EventType.ADD" local-name="ADD">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.DataModel#EventType.REMOVE" local-name="REMOVE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.DataModel#EventType.SET" local-name="SET">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.DataModel#EventType.MOVE" local-name="MOVE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <method name="H.map.DataModel#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DataModel#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DataModel#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.DataModel#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <ns name="H.map.layer" local-name="layer" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This namespace contains interfaces and implementation classes of
map layer related functionality of the Maps API.</p></prose>
            </description>
            <class name="H.map.layer.Layer" local-name="Layer" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>The Layer class represents an object that is evaluated by the renderer in the
order in which it is added to the layers collection. It provides the basic
infrastructure for dispatching update events to the renderer in case new data
is available.</p>
<p>A layer is defined by a minimum and maximum zoom level for which it can
provide data to the renderer and a projection which it uses to transform
geo-coordinates into 2D projected world coordinates.</p></prose>
              </description>
              <extends>
                <type ref="H.util.EventTarget"/>
              </extends>
              <constructor local-name="Layer" name="H.map.layer.Layer">
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.layer.Layer.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>optional configuration object</p></prose>
                  </description>
                </param>
              </constructor>
              <event name="H.map.layer.Layer#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Fired when this layer's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <event name="H.map.layer.Layer#event:minchange" local-name="minchange" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Fired when this layer's minimum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <event name="H.map.layer.Layer#event:maxchange" local-name="maxchange" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Fired when this layer's maximum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <property name="H.map.layer.Layer#dark" local-name="dark" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
Must NOT published, API internally used only!</p></prose>
                </description>
              </property>
              <enum name="H.map.layer.Layer#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Event types fired by Layer.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.layer.Layer#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.Layer#EventType.MINCHANGE" local-name="MINCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.Layer#EventType.MAXCHANGE" local-name="MAXCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.layer.Layer#isValid" local-name="isValid" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method checks if a zoom level can be served by this layer.</p></prose>
                </description>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level to check</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if this layer can provide data for the zoom level,
 otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.Layer#setMin" local-name="setMin" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method sets the minimum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="min">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new minimum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>min</code> parameter is not a number or if it is larger that the current
 maximum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.Layer#setMax" local-name="setMax" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method sets the maximum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="max">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new maximum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>max</code> parameter is not a number or if it is smaller that the current
 minimum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.Layer#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method dispatches an update event to all registered listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.Layer#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns the copyright current data provider.</p>
<p>Note: This function must be overridden by any class inheriting layer.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding area for which to retrieve the
 copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level for which to retrieve the copyright
 information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information
 objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.layer.Layer.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which can be used when creating new layer object.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="dark"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="boolean"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="projection"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="H.geo.IProjection"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="minWorldSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.Layer.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimum zoom level for which the layer can provide data, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.Layer.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The maximum zoom level for which the layer can provide data, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.Layer.Options#dark" local-name="dark" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
          See also <link ref="H.Map.Options#autoColor" /></p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.Layer.Options#projection" local-name="projection" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The projection to be used for this layer, default is <link ref="H.geo.mercator" /></p></prose>
                  </description>
                  <types>
                    <type ref="H.geo.IProjection"/>
                  </types>
                  <ctype>
                    <name name="H.geo.IProjection" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.Layer.Options#minWorldSize" local-name="minWorldSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal world size at zoom level 0, default is <code>256</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <method name="H.map.layer.Layer#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.Layer#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.Layer#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.Layer#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.Layer#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.Layer#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.Layer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.layer.BaseTileLayer" local-name="BaseTileLayer" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>BaseTileLayer encapsulates funcitonailty that is common to all layers that deliver tiles, such
as <link ref="H.map.layer.TileLayer" />. The functionality includes geo bounding box to grid
calculation, tile request management.</p></prose>
              </description>
              <extends>
                <type ref="H.map.layer.Layer"/>
              </extends>
              <constructor local-name="BaseTileLayer" name="H.map.layer.BaseTileLayer">
                <param name="provider">
                  <types>
                    <type ref="H.map.provider.TileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider"/>
                  </ctype>
                  <description>
                    <prose><p>data source for the TileLayer</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.layer.ITileLayer.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>additional options</p></prose>
                  </description>
                </param>
                <exception>
                  <description>
                    <prose>IllegalArgument if the provider argument is not a TileProvider</prose>
                  </description>
                </exception>
              </constructor>
              <property name="H.map.layer.BaseTileLayer#provider" local-name="provider" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Instance of image tile provider</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.TileProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.TileProvider"/>
                </ctype>
              </property>
              <property name="H.map.layer.BaseTileLayer#tileRequested_" local-name="tileRequested_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Map of previously requested tile (used to filter out ongoing and current requests)</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.layer.BaseTileLayer#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns the provider which feeds this layer with data.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.TileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider"/>
                  </ctype>
                  <description>
                    <prose><p>this layer's provider</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#geoRectToRect" local-name="geoRectToRect" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method transforms a geo-rectangle to geometrical projected rectangle at
the current projection zoom level or at provided zoom level</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>geo bounds to be projected</p></prose>
                  </description>
                </param>
                <param name="opt_zoom" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>overrides current projection zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected 2d space rect cooresponding to provided geo bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#getTileBounds" local-name="getTileBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns tile grid for a bounding rectangle</p></prose>
                </description>
                <param name="rectBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected rect bounds which coorespond to geo bounding box</p></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>current zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>rectangle which represents the tile grid bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#cancelPreviouslyRequested_" local-name="cancelPreviouslyRequested_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method cancels previously requested tiles
which are out of current request range.</p></prose>
                </description>
                <param name="currentlyRequested">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose><p>map of currently requested tiles</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#getProviderTiles" local-name="getProviderTiles" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method requests tiles from the data source (provider). It can return a set of
tiles which are currently loaded. All tiles which are not yet loaded will
be included in response as soon as they will be available during subsequent calls.</p></prose>
                </description>
                <param name="tileBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>bounds in tile grid</p></prose>
                  </description>
                </param>
                <param name="isCDB">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>returns an array if tile which are already loaded</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer.sortByPriority_" local-name="sortByPriority_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A comparator to sort a list of RequestInfo_ by priority in descending order</p></prose>
                </description>
                <param name="first">
                  <types>
                    <type ref="H.map.layer.BaseTileLayer.RequestInfo_"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.BaseTileLayer.RequestInfo_"/>
                  </ctype>
                  <description>
                    <prose><p>The first request info</p></prose>
                  </description>
                </param>
                <param name="second">
                  <types>
                    <type ref="H.map.layer.BaseTileLayer.RequestInfo_"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.BaseTileLayer.RequestInfo_"/>
                  </ctype>
                  <description>
                    <prose><p>The second request info</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.layer.BaseTileLayer.RequestInfo_" local-name="RequestInfo_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>An array to store request information for a tile, where the entries are:
  0: {number} The tile's number on x-axis
  1: {number} The tile's number on y-axis
  2: {number} The tile's zoom level
  3: {boolean} The cacheOnly flag
  4: {number} The priority value</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;number|boolean&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <name name="boolean"/>
                        </type>
                      </union>
                    </app>
                  </typed>
                </ctype>
              </typedef>
              <event name="H.map.layer.BaseTileLayer#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:update">
                <description>
                  <prose><p>Fired when this layer's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <event name="H.map.layer.BaseTileLayer#event:minchange" local-name="minchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:minchange">
                <description>
                  <prose><p>Fired when this layer's minimum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <event name="H.map.layer.BaseTileLayer#event:maxchange" local-name="maxchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:maxchange">
                <description>
                  <prose><p>Fired when this layer's maximum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <property name="H.map.layer.BaseTileLayer#dark" local-name="dark" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dark">
                <description>
                  <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
Must NOT published, API internally used only!</p></prose>
                </description>
              </property>
              <enum name="H.map.layer.BaseTileLayer#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#EventType">
                <description>
                  <prose><p>Event types fired by Layer.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.layer.BaseTileLayer#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.BaseTileLayer#EventType.MINCHANGE" local-name="MINCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.BaseTileLayer#EventType.MAXCHANGE" local-name="MAXCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.layer.BaseTileLayer#isValid" local-name="isValid" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#isValid">
                <description>
                  <prose><p>This method checks if a zoom level can be served by this layer.</p></prose>
                </description>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level to check</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if this layer can provide data for the zoom level,
 otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#setMin" local-name="setMin" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMin">
                <description>
                  <prose><p>This method sets the minimum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="min">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new minimum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>min</code> parameter is not a number or if it is larger that the current
 maximum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.BaseTileLayer#setMax" local-name="setMax" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMax">
                <description>
                  <prose><p>This method sets the maximum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="max">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new maximum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>max</code> parameter is not a number or if it is smaller that the current
 minimum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.BaseTileLayer#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches an update event to all registered listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.BaseTileLayer#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#getCopyrights">
                <description>
                  <prose><p>This method returns the copyright current data provider.</p>
<p>Note: This function must be overridden by any class inheriting layer.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding area for which to retrieve the
 copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level for which to retrieve the copyright
 information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information
 objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.BaseTileLayer#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.BaseTileLayer#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.BaseTileLayer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <interface name="H.map.layer.ITileLayer" local-name="ITileLayer" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This interface describes a layer which provides data partitioned in quad-tree
tiles in an x, y, z fashion (where z describes the level within the tree and
  x and y describe the absolute column and row indeces whithin the level).</p>
<p>Adding a layer implementing this interface to the layer collection causes
the render engine to retrieve tiles and render the data contained within the
tiles (see <link ref="H.map.provider.Tile" />).</p></prose>
              </description>
              <method name="H.map.layer.ITileLayer#requestTiles" local-name="requestTiles" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method requests tiles for the current bounding rectangle at the given
zoom level (z-value).</p>
<p>An implementing object must calculate the tile grid which intersects with
the given bounding rectangle. An ITileLayer does not need to return all
tiles immediately (as loading tile data from remote sources may be
asynchronous). The implementing object may return a partial response as long
as the full response cannot be synchronously provided to the renderer.</p>
<p>The response object returned by this method must contain the number of tiles
which intersect with the bounding rectangle at the given zoom level.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process, i.e. caching of remote objects is strongly advised.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which tiles
 are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tiles are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the
 total number of tiles requested and the tile objects that could be
 immediately returned</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ITileLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ITileLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <typedef name="H.map.layer.ITileLayer.Response" local-name="Response" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>A response object for a tile request. Contains total number of elements requested and
an array of currently available Tiles</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="total"/>
                      </key>
                      <value>
                        <name name="number"/>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="tiles"/>
                      </key>
                      <value>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.provider.Tile"/>
                          </app>
                        </typed>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.ITileLayer.Response#total" local-name="total" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>the total number of requested tiles</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.layer.ITileLayer.Response#tiles" local-name="tiles" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>the tiles which this provider
 can currently return synchronously</p></prose>
                  </description>
                  <types>
                    <type ref="Array.&lt;H.map.provider.Tile&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.provider.Tile"/>
                      </app>
                    </typed>
                  </ctype>
                </property>
              </typedef>
              <typedef name="H.map.layer.ITileLayer.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize a TileLayer object.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="projection"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="H.geo.IProjection"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="opacity"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.ITileLayer.Options#projection" local-name="projection" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>an optional projection to be
 used for this layer, default is <link ref="H.geo.mercator" /></p></prose>
                  </description>
                  <types>
                    <type ref="H.geo.IProjection"/>
                  </types>
                  <ctype>
                    <name name="H.geo.IProjection" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.ITileLayer.Options#opacity" local-name="opacity" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>tile layer opacity, default is <code>1</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
            </interface>
            <class name="H.map.layer.TileLayer" local-name="TileLayer" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Tile Layer, represents data shown on map on a tile basis. Can be used
to show map tile images or other type of data which is partitioned into tiles.</p>
<p>The TileLayer class is an implementation of the ITileLayer interface which
uses an ITileProivder as a data source. It delegates tile requests to its
provider.</p></prose>
              </description>
              <extends>
                <type ref="H.map.layer.ITileLayer"/>
              </extends>
              <extends>
                <type ref="H.map.layer.BaseTileLayer"/>
              </extends>
              <constructor local-name="TileLayer" name="H.map.layer.TileLayer">
                <param name="provider">
                  <types>
                    <type ref="H.map.provider.TileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider"/>
                  </ctype>
                  <description>
                    <prose><p>data source for the TileLayer</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.layer.ITileLayer.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>additional options</p></prose>
                  </description>
                </param>
                <exception>
                  <description>
                    <prose>IllegalArgument if the provider argument is not a TileProvider</prose>
                  </description>
                </exception>
              </constructor>
              <method name="H.map.layer.TileLayer#requestTiles" local-name="requestTiles" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#requestTiles">
                <description>
                  <prose><p>This method requests tiles for the current bounding rectangle at the given
zoom level (z-value).</p>
<p>An implementing object must calculate the tile grid which intersects with
the given bounding rectangle. An ITileLayer does not need to return all
tiles immediately (as loading tile data from remote sources may be
asynchronous). The implementing object may return a partial response as long
as the full response cannot be synchronously provided to the renderer.</p>
<p>The response object returned by this method must contain the number of tiles
which intersect with the bounding rectangle at the given zoom level.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process, i.e. caching of remote objects is strongly advised.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which tiles
 are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tiles are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the
 total number of tiles requested and the tile objects that could be
 immediately returned</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#requestTile">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#cancelTile">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <property name="H.map.layer.TileLayer#provider" local-name="provider" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#provider">
                <description>
                  <prose><p>Instance of image tile provider</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.TileProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.TileProvider"/>
                </ctype>
              </property>
              <property name="H.map.layer.TileLayer#tileRequested_" local-name="tileRequested_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#tileRequested_">
                <description>
                  <prose><p>Map of previously requested tile (used to filter out ongoing and current requests)</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.layer.TileLayer#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getProvider">
                <description>
                  <prose><p>This method returns the provider which feeds this layer with data.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.TileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider"/>
                  </ctype>
                  <description>
                    <prose><p>this layer's provider</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#geoRectToRect" local-name="geoRectToRect" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#geoRectToRect">
                <description>
                  <prose><p>This method transforms a geo-rectangle to geometrical projected rectangle at
the current projection zoom level or at provided zoom level</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>geo bounds to be projected</p></prose>
                  </description>
                </param>
                <param name="opt_zoom" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>overrides current projection zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected 2d space rect cooresponding to provided geo bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#getTileBounds" local-name="getTileBounds" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getTileBounds">
                <description>
                  <prose><p>This method returns tile grid for a bounding rectangle</p></prose>
                </description>
                <param name="rectBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected rect bounds which coorespond to geo bounding box</p></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>current zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>rectangle which represents the tile grid bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.BaseTileLayer#requestTile">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#cancelTile">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#cancelPreviouslyRequested_" local-name="cancelPreviouslyRequested_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#cancelPreviouslyRequested_">
                <description>
                  <prose><p>This method cancels previously requested tiles
which are out of current request range.</p></prose>
                </description>
                <param name="currentlyRequested">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose><p>map of currently requested tiles</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#getProviderTiles" local-name="getProviderTiles" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getProviderTiles">
                <description>
                  <prose><p>This method requests tiles from the data source (provider). It can return a set of
tiles which are currently loaded. All tiles which are not yet loaded will
be included in response as soon as they will be available during subsequent calls.</p></prose>
                </description>
                <param name="tileBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>bounds in tile grid</p></prose>
                  </description>
                </param>
                <param name="isCDB">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>returns an array if tile which are already loaded</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.layer.TileLayer#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:update">
                <description>
                  <prose><p>Fired when this layer's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <event name="H.map.layer.TileLayer#event:minchange" local-name="minchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:minchange">
                <description>
                  <prose><p>Fired when this layer's minimum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <event name="H.map.layer.TileLayer#event:maxchange" local-name="maxchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:maxchange">
                <description>
                  <prose><p>Fired when this layer's maximum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <property name="H.map.layer.TileLayer#dark" local-name="dark" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dark">
                <description>
                  <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
Must NOT published, API internally used only!</p></prose>
                </description>
              </property>
              <enum name="H.map.layer.TileLayer#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#EventType">
                <description>
                  <prose><p>Event types fired by Layer.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.layer.TileLayer#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.TileLayer#EventType.MINCHANGE" local-name="MINCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.TileLayer#EventType.MAXCHANGE" local-name="MAXCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.layer.TileLayer#isValid" local-name="isValid" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#isValid">
                <description>
                  <prose><p>This method checks if a zoom level can be served by this layer.</p></prose>
                </description>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level to check</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if this layer can provide data for the zoom level,
 otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#setMin" local-name="setMin" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMin">
                <description>
                  <prose><p>This method sets the minimum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="min">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new minimum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>min</code> parameter is not a number or if it is larger that the current
 maximum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.TileLayer#setMax" local-name="setMax" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMax">
                <description>
                  <prose><p>This method sets the maximum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="max">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new maximum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>max</code> parameter is not a number or if it is smaller that the current
 minimum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.TileLayer#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches an update event to all registered listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.TileLayer#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#getCopyrights">
                <description>
                  <prose><p>This method returns the copyright current data provider.</p>
<p>Note: This function must be overridden by any class inheriting layer.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding area for which to retrieve the
 copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level for which to retrieve the copyright
 information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information
 objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.TileLayer#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.TileLayer#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.TileLayer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <interface name="H.map.layer.IMarkerLayer" local-name="IMarkerLayer" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>This interface describes a layer which provides marker objects to the
renderer.</p>
<p>Adding a layer implementing this interface to the layer collection causes
the render engine to render marker objects provided by the requestMarkers
function.</p></prose>
              </description>
              <method name="H.map.layer.IMarkerLayer#requestMarkers" local-name="requestMarkers" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method requests marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.IMarkerLayer#requestDomMarkers" local-name="requestDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This method requests dom marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all dom marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.layer.IMarkerLayer.Response" local-name="Response" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This type represents a response object returned by the <link ref="H.map.layer.IMarkerLayer#requestMarkers" /> function.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="total"/>
                      </key>
                      <value>
                        <name name="number"/>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="markers"/>
                      </key>
                      <value>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.AbstractMarker"/>
                          </app>
                        </typed>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.IMarkerLayer.Response#total" local-name="total" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The total number of markers, inclusive markers with not ready icons</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.layer.IMarkerLayer.Response#markers" local-name="markers" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The marker objects for the bounding rectangle (only ready)</p></prose>
                  </description>
                  <types>
                    <type ref="Array.&lt;H.map.AbstractMarker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.AbstractMarker"/>
                      </app>
                    </typed>
                  </ctype>
                </property>
              </typedef>
              <typedef name="H.map.layer.IMarkerLayer.TiledResponse" local-name="TiledResponse" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This type represents a response object returned by the <link ref="H.map.layer.IMarkerLayer#requestMarkers" /> function.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="total"/>
                      </key>
                      <value>
                        <name name="number"/>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="requested"/>
                      </key>
                      <value>
                        <name name="number"/>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="markers"/>
                      </key>
                      <value>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.AbstractMarker"/>
                          </app>
                        </typed>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.IMarkerLayer.TiledResponse#number" local-name="number" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>of returned tiles</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.layer.IMarkerLayer.TiledResponse#requested" local-name="requested" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>number of requested tiles</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
                <property name="H.map.layer.IMarkerLayer.TiledResponse#objects" local-name="objects" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>the marker objects within requested tiled area</p></prose>
                  </description>
                  <types>
                    <type ref="Array.&lt;H.map.AbstractMarker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.AbstractMarker"/>
                      </app>
                    </typed>
                  </ctype>
                </property>
              </typedef>
            </interface>
            <class name="H.map.layer.ObjectLayer" local-name="ObjectLayer" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This class represents a layer which renders map objects. Spatial objects like
polygons and polylines a rendered to tiles before being passed to the enigne.
Point objects like markers are provided as objects given an rectangular area.</p></prose>
              </description>
              <extends>
                <type ref="H.map.layer.ITileLayer"/>
              </extends>
              <extends>
                <type ref="H.map.layer.IMarkerLayer"/>
              </extends>
              <extends>
                <type ref="H.map.layer.Layer"/>
              </extends>
              <constructor local-name="ObjectLayer" name="H.map.layer.ObjectLayer">
                <param name="provider">
                  <types>
                    <type ref="H.map.provider.ObjectProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.ObjectProvider"/>
                  </ctype>
                  <description>
                    <prose><p>the ObjectProvider which
 provides the map objects to this object layer.</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.layer.ObjectLayer.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ObjectLayer.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The options for this layer</p></prose>
                  </description>
                </param>
              </constructor>
              <method name="H.map.layer.ObjectLayer#onProvidersUpdate_" local-name="onProvidersUpdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A listener for update events from ObjectProvider and SpatialTileProvider</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                  </types>
                  <ctype>
                    <name name="H.util.Event"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns current ObjectLayer's data provider</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.ObjectProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.ObjectProvider"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.layer.ObjectLayer.EMPTY_MARKER_LAYER_RESPONSE_" local-name="EMPTY_MARKER_LAYER_RESPONSE_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.layer.IMarkerLayer.Response"/>
                </types>
                <ctype>
                  <name name="H.map.layer.IMarkerLayer.Response"/>
                </ctype>
              </property>
              <property name="H.map.layer.ObjectLayer.EMPTY_TILE_LAYER_RESPONSE_" local-name="EMPTY_TILE_LAYER_RESPONSE_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.layer.ITileLayer.Response"/>
                </types>
                <ctype>
                  <name name="H.map.layer.ITileLayer.Response"/>
                </ctype>
              </property>
              <typedef name="H.map.layer.ObjectLayer.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Configuration object which can be use to initialize the ObjectLayer.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="tileSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="tileCacheSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="dataCacheSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="pixelRatio"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.layer.ObjectLayer.Options#tileSize" local-name="tileSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the size of the tiles rendered by this layer
 for polylines and polygons (must be power of 2, default is <code>256</code>)</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.ObjectLayer.Options#tileCacheSize" local-name="tileCacheSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the number of fully rendered spatial tiles
 that are cached for immediate reuse, default is <code>32</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.ObjectLayer.Options#dataCacheSize" local-name="dataCacheSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the number of tiles to cache which have
 render data only, default is <code>512</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.layer.ObjectLayer.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <method name="H.map.layer.ObjectLayer#requestTiles" local-name="requestTiles" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#requestTiles">
                <description>
                  <prose><p>This method requests tiles for the current bounding rectangle at the given
zoom level (z-value).</p>
<p>An implementing object must calculate the tile grid which intersects with
the given bounding rectangle. An ITileLayer does not need to return all
tiles immediately (as loading tile data from remote sources may be
asynchronous). The implementing object may return a partial response as long
as the full response cannot be synchronously provided to the renderer.</p>
<p>The response object returned by this method must contain the number of tiles
which intersect with the bounding rectangle at the given zoom level.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process, i.e. caching of remote objects is strongly advised.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which tiles
 are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tiles are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the
 total number of tiles requested and the tile objects that could be
 immediately returned</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#requestTile">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.ITileLayer#cancelTile">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#requestMarkers" local-name="requestMarkers" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.IMarkerLayer#requestMarkers">
                <description>
                  <prose><p>This method requests marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#requestDomMarkers" local-name="requestDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.IMarkerLayer#requestDomMarkers">
                <description>
                  <prose><p>This method requests dom marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all dom marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.layer.ObjectLayer#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:update">
                <description>
                  <prose><p>Fired when this layer's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <event name="H.map.layer.ObjectLayer#event:minchange" local-name="minchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:minchange">
                <description>
                  <prose><p>Fired when this layer's minimum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <event name="H.map.layer.ObjectLayer#event:maxchange" local-name="maxchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:maxchange">
                <description>
                  <prose><p>Fired when this layer's maximum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <property name="H.map.layer.ObjectLayer#dark" local-name="dark" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dark">
                <description>
                  <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
Must NOT published, API internally used only!</p></prose>
                </description>
              </property>
              <enum name="H.map.layer.ObjectLayer#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#EventType">
                <description>
                  <prose><p>Event types fired by Layer.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.layer.ObjectLayer#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.ObjectLayer#EventType.MINCHANGE" local-name="MINCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.ObjectLayer#EventType.MAXCHANGE" local-name="MAXCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.layer.ObjectLayer#isValid" local-name="isValid" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#isValid">
                <description>
                  <prose><p>This method checks if a zoom level can be served by this layer.</p></prose>
                </description>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level to check</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if this layer can provide data for the zoom level,
 otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#setMin" local-name="setMin" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMin">
                <description>
                  <prose><p>This method sets the minimum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="min">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new minimum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>min</code> parameter is not a number or if it is larger that the current
 maximum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.ObjectLayer#setMax" local-name="setMax" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMax">
                <description>
                  <prose><p>This method sets the maximum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="max">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new maximum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>max</code> parameter is not a number or if it is smaller that the current
 minimum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.ObjectLayer#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches an update event to all registered listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.ObjectLayer#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#getCopyrights">
                <description>
                  <prose><p>This method returns the copyright current data provider.</p>
<p>Note: This function must be overridden by any class inheriting layer.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding area for which to retrieve the
 copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level for which to retrieve the copyright
 information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information
 objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.ObjectLayer#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.ObjectLayer#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.ObjectLayer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.layer.MarkerTileLayer" local-name="MarkerTileLayer" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>ObjectTileLayer represents map objects which are requested on a tile basis</p></prose>
              </description>
              <extends>
                <type ref="H.map.layer.BaseTileLayer"/>
              </extends>
              <extends>
                <type ref="H.map.layer.IMarkerLayer"/>
              </extends>
              <constructor local-name="MarkerTileLayer" name="H.map.layer.MarkerTileLayer">
                <param name="provider">
                  <types>
                    <type ref="H.map.provider.MarkerTileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.MarkerTileProvider"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.layer.ITileLayer.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <method name="H.map.layer.MarkerTileLayer#calculateTileGrid_" local-name="calculateTileGrid_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method calcualtes the tile grid bounds</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#mergeMarkerTiles_" local-name="mergeMarkerTiles_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method merges markers from tile layer response to
single set of markers</p></prose>
                </description>
                <param name="markerTiles">
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.layer.MarkerTileLayer.EMPTY_RESPONSE_" local-name="EMPTY_RESPONSE_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                </types>
                <ctype>
                  <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                </ctype>
              </property>
              <method name="H.map.layer.MarkerTileLayer#requestTiledMarkers_" local-name="requestTiledMarkers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method requests marker tiles from the provider</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.layer.MarkerTileLayer#provider" local-name="provider" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#provider">
                <description>
                  <prose><p>Instance of image tile provider</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.TileProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.TileProvider"/>
                </ctype>
              </property>
              <property name="H.map.layer.MarkerTileLayer#tileRequested_" local-name="tileRequested_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#tileRequested_">
                <description>
                  <prose><p>Map of previously requested tile (used to filter out ongoing and current requests)</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.layer.MarkerTileLayer#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getProvider">
                <description>
                  <prose><p>This method returns the provider which feeds this layer with data.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.TileProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider"/>
                  </ctype>
                  <description>
                    <prose><p>this layer's provider</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#geoRectToRect" local-name="geoRectToRect" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#geoRectToRect">
                <description>
                  <prose><p>This method transforms a geo-rectangle to geometrical projected rectangle at
the current projection zoom level or at provided zoom level</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>geo bounds to be projected</p></prose>
                  </description>
                </param>
                <param name="opt_zoom" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>overrides current projection zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected 2d space rect cooresponding to provided geo bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#getTileBounds" local-name="getTileBounds" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getTileBounds">
                <description>
                  <prose><p>This method returns tile grid for a bounding rectangle</p></prose>
                </description>
                <param name="rectBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>projected rect bounds which coorespond to geo bounding box</p></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>current zoom level</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>rectangle which represents the tile grid bounds</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#requestTile" local-name="requestTile" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.BaseTileLayer#requestTile">
                <description>
                  <prose><p>This method requests a single tile according to tile coordinates. It returns
either a Tile object if it is already loaded or undefined and starts loading
the tile</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicates whether only cached tiles are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                    <type ref="undefined"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.provider.Tile"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>tile object corresponding to requested coordinates</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#cancelTile">
                <description>
                  <prose><p>This method cancels a previously requested tile.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile row position</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile column position</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>zoom level</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#cancelPreviouslyRequested_" local-name="cancelPreviouslyRequested_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.BaseTileLayer#cancelPreviouslyRequested_">
                <description>
                  <prose><p>This method cancels previously requested tiles
which are out of current request range.</p></prose>
                </description>
                <param name="currentlyRequested">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose><p>map of currently requested tiles</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#getProviderTiles" local-name="getProviderTiles" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.BaseTileLayer#getProviderTiles">
                <description>
                  <prose><p>This method requests tiles from the data source (provider). It can return a set of
tiles which are currently loaded. All tiles which are not yet loaded will
be included in response as soon as they will be available during subsequent calls.</p></prose>
                </description>
                <param name="tileBounds">
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>bounds in tile grid</p></prose>
                  </description>
                </param>
                <param name="isCDB">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.ITileLayer.Response"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.ITileLayer.Response"/>
                  </ctype>
                  <description>
                    <prose><p>returns an array if tile which are already loaded</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.layer.MarkerTileLayer#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:update">
                <description>
                  <prose><p>Fired when this layer's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <event name="H.map.layer.MarkerTileLayer#event:minchange" local-name="minchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:minchange">
                <description>
                  <prose><p>Fired when this layer's minimum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <event name="H.map.layer.MarkerTileLayer#event:maxchange" local-name="maxchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.Layer#event:maxchange">
                <description>
                  <prose><p>Fired when this layer's maximum zoom level changes.</p></prose>
                </description>
                <types>
                  <type ref="H.util.ChangeEvent"/>
                </types>
                <ctype>
                  <name name="H.util.ChangeEvent"/>
                </ctype>
              </event>
              <property name="H.map.layer.MarkerTileLayer#dark" local-name="dark" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dark">
                <description>
                  <prose><p>Indicates whether the content of this layer is mainly dark, default is <code>false</code>
Must NOT published, API internally used only!</p></prose>
                </description>
              </property>
              <enum name="H.map.layer.MarkerTileLayer#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#EventType">
                <description>
                  <prose><p>Event types fired by Layer.</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.layer.MarkerTileLayer#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.MarkerTileLayer#EventType.MINCHANGE" local-name="MINCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.layer.MarkerTileLayer#EventType.MAXCHANGE" local-name="MAXCHANGE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <method name="H.map.layer.MarkerTileLayer#isValid" local-name="isValid" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#isValid">
                <description>
                  <prose><p>This method checks if a zoom level can be served by this layer.</p></prose>
                </description>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level to check</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if this layer can provide data for the zoom level,
 otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#setMin" local-name="setMin" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMin">
                <description>
                  <prose><p>This method sets the minimum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="min">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new minimum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>min</code> parameter is not a number or if it is larger that the current
 maximum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.MarkerTileLayer#setMax" local-name="setMax" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#setMax">
                <description>
                  <prose><p>This method sets the maximum zoom level for which this layer will provide
tiles.</p></prose>
                </description>
                <param name="max">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The new maximum zoom level of this layer</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.Layer"/>
                  </types>
                  <ctype>
                    <name name="H.map.layer.Layer"/>
                  </ctype>
                  <description>
                    <prose><p>Returns this instance of the layer</p></prose>
                  </description>
                </returns>
                <exception>
                  <types>
                    <type ref="H.lang.InvalidArgumentError"/>
                  </types>
                  <ctype>
                    <name name="H.lang.InvalidArgumentError"/>
                  </ctype>
                  <description>
                    <prose>Throws an exception if the
 <code>max</code> parameter is not a number or if it is smaller that the current
 minimum zoom level</prose>
                  </description>
                </exception>
              </method>
              <method name="H.map.layer.MarkerTileLayer#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.layer.Layer#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches an update event to all registered listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.MarkerTileLayer#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.layer.Layer#getCopyrights">
                <description>
                  <prose><p>This method returns the copyright current data provider.</p>
<p>Note: This function must be overridden by any class inheriting layer.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding area for which to retrieve the
 copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level for which to retrieve the copyright
 information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information
 objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.layer.MarkerTileLayer#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.layer.MarkerTileLayer#requestMarkers" local-name="requestMarkers" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.IMarkerLayer#requestMarkers">
                <description>
                  <prose><p>This method requests marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.layer.MarkerTileLayer#requestDomMarkers" local-name="requestDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.layer.IMarkerLayer#requestDomMarkers">
                <description>
                  <prose><p>This method requests dom marker objects for provided bounding rectangle.</p>
<p>The implementation of this method must return all dom marker objects which
are contained within this bounding rectangle.</p>
<p>The response object returned by this method must contain the number of
objects which intersect with the bounding rectangle.</p>
<p>This method will be called by the renderer for each rendering cycle. An
implementing object must make sure that calling this method does not impede
the rendering process.</p></prose>
                </description>
                <param name="boundingRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>the bounding rectangle for which marker are to be returned</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="prioCenter">
                  <types>
                    <type ref="H.math.Point"/>
                  </types>
                  <ctype>
                    <name name="H.math.Point"/>
                  </ctype>
                  <description>
                    <prose><p>The priority center as an offset in screen pixel relative
 to the center</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.layer.IMarkerLayer.Response"/>
                    <type ref="H.map.layer.IMarkerLayer.TiledResponse"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.Response"/>
                      </type>
                      <type>
                        <name name="H.map.layer.IMarkerLayer.TiledResponse"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>a response object containing the number of markers and the markers themselves</p></prose>
                  </description>
                </returns>
              </method>
            </class>
          </ns>
          <class name="H.map.Circle" local-name="Circle" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A Polygon with a circular shape.</p></prose>
            </description>
            <extends>
              <type ref="H.map.Polygon"/>
            </extends>
            <constructor local-name="Circle" name="H.map.Circle">
              <param name="center">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The geographical coordinates of the circle's center</p></prose>
                </description>
              </param>
              <param name="radius">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The radius of the circle in meters</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Circle.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Circle.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>An object that specifies circle options and their initial values (among these,
   <code>precision</code> has a significant impact on the shape of the circle - please
   see <code><link ref="H.map.Circle.Options" /></code></p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.Circle#setCenter" local-name="setCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the geographical center point of this circle.
If the specified center is an instance of H.geo.Point you must not modify this Point instance without calling
setCenter immediately afterwards.</p></prose>
              </description>
              <param name="center">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#getCenter" local-name="getCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the center point of this circle
You must not modify the returned Point instance without calling setCenter immediately afterwards.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setRadius" local-name="setRadius" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the length of the radius of the circle in meters.
The value is clamped to the of {@code[0 ... 20015089.27787877]}  (half WGS84 mean circumference)</p></prose>
              </description>
              <param name="radius">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#getRadius" local-name="getRadius" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the length of the radius of the circle in meters.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#precision_" local-name="precision_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The precision of the circle.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Circle#setPrecision" local-name="setPrecision" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To set the precision of this circle {@see H.map.Circle.Options#precision}</p></prose>
              </description>
              <param name="precision">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <property name="H.map.Circle#precisionKey_" local-name="precisionKey_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The key of the precision property. Not tagged as constants to reduce code size!</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getPrecision" local-name="getPrecision" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>To get the precision value of this circle</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getStrip_" local-name="getStrip_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To get the computed strip of the circle</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.Circle.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="style"/>
                    </key>
                    <value>
                      <name name="H.map.SpatialStyle"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <name name="boolean"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="precision"/>
                    </key>
                    <value>
                      <name name="number"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Circle.Options#style" local-name="style" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>the style to be used when tracing the polyline</p></prose>
                </description>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>An optional boolean value indicating whether this
     map object is visible, default is <code>true</code></p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#precision" local-name="precision" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The precision of a circle as a number of segments to be
     used when rendering the circle. The value is clamped to the range between [4 ... 360],
     where 60 is the default. Note that the lower the value the more angular and
     the less circle-like the shape appears and, conversely, the higher the value the
     smoother and more rounded the result. Thus, starting at the extreme low end of the
     possible values, 4 produces a square, 6 a hexagon, while 30 results in a
     circle-like shape, although it appears increasingly angular as the zoom level
     increases (as you zoom in), and finally 360 produces a smooth circle.</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the circle, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the circle is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the circle is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Circle.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of
          ObjectProvider wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
            </typedef>
            <method name="H.map.Circle#closeOpenPolygon_" local-name="closeOpenPolygon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#closeOpenPolygon_">
              <description>
                <prose><p>This method closes an &quot;open polygon&quot; by multiplying the strip across the x-axis and adding the closing legs north- or
southwards (depending on the &quot;northwards&quot; argument).</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The strip list</p></prose>
                </description>
              </param>
              <param name="northwards">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether to close the polygon north- or southwards</p></prose>
                </description>
              </param>
              <param name="pxProj">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified strip list</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#coversCoords_" local-name="coversCoords_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#coversCoords_">
              <description>
                <prose><p>This method tests if a given point is within a 2D polygon area.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The x-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The y-component of the coordinate to test</p></prose>
                </description>
              </param>
              <param name="pixelStrip">
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the strip describing the polygon</p></prose>
                </description>
              </param>
              <param name="rayCastFromSouthPole">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>a boolean value indicating whether to
 check by ray casting from south (true) or north (false)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>true if the point is within the polygon, false otherwise</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getStripFromResult_" local-name="getStripFromResult_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#getStripFromResult_">
              <description>
                <prose><p>This method converts a clipping result back to an x,y array</p></prose>
              </description>
              <param name="result">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the clipping result</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the x,y array</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#bounds" local-name="bounds" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#bounds">
              <description>
                <prose><p>The cached bounds of the polygon</p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Circle#isCoveringNorthPole" local-name="isCoveringNorthPole" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#isCoveringNorthPole">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" />
IMPORTANT:
If a sub-classes doesn't calculate the strip during construction time (still null), they must adjust this property
during the lazy strip calculation when getStrip() is called.</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Circle#setNorthPoleCovering" local-name="setNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#setNorthPoleCovering">
              <description>
                <prose><p>To set the indicator whether this polygon covers the north pole.
It's needed for Polygons whose strip is defined as lines arround the world on longitude axis
(for example a circle whose center is one of the poles).
In this case a additional information is needed to know if the southern or northern part of the world should be
covered by the poygon.</p></prose>
              </description>
              <param name="flag">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A value of <code>true</code> means it covers the north pole, <code>false</code> means south pole</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Polygon"/>
                </types>
                <ctype>
                  <name name="H.map.Polygon"/>
                </ctype>
                <description>
                  <prose><p>the Polygon instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getNorthPoleCovering" local-name="getNorthPoleCovering" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#getNorthPoleCovering">
              <description>
                <prose><p>See <link ref="H.map.Polygon.prototype.setNorthPoleCovering" /></p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#preparedStripForDateBorder_" local-name="preparedStripForDateBorder_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#preparedStripForDateBorder_">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#clip" local-name="clip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Polygon#clip">
              <description>
                <prose><p>This method clips this polygon against a rectangular area. This method will
take polygons crossing the date border into account duplicate the shape in
the returned list of intersecting strips.</p></prose>
              </description>
              <param name="geoRect">
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose><p>the rectangular area against which to clip</p></prose>
                </description>
              </param>
              <param name="projection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>a projection to use for bounding box padding</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>a list of arrays with alternating lat, lng values.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#sanitizePolygonPoints_" local-name="sanitizePolygonPoints_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#sanitizePolygonPoints_">
              <description>
                <prose><p>This method sanitizes a polygon strip by adding additional points if the
shape touches the date border. It returns a new array with lat, lng values.</p></prose>
              </description>
              <param name="latLngAltArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the lat,lng,alt array from the poylgon's strip.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the santized lat,lng values from the strip.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#addDateBorderPoint_" local-name="addDateBorderPoint_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#addDateBorderPoint_">
              <description>
                <prose><p>Algorithm adds two points laying on date border if polygon strip crosses it.
This operation is needed to rotate strip correctly (see also
<link ref="H.map.Polygon#_rotateStripCoords" />) if that polygon is &quot;open&quot;
(covering a pole).
This method is destructive, meaning that it modifies the data passed in
rather than copying the array.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of alternating lat,lng values</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the modified array</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#rotateStripCoords_" local-name="rotateStripCoords_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Polygon#rotateStripCoords_">
              <description>
                <prose><p>Rotate the array of coordinates to start with point which has longitude most
similar to given longitude. In general passed coordArray is spliced and
concatenated to start with that coordinate.</p></prose>
              </description>
              <param name="coordArray">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </param>
              <param name="longitude">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of coords lat, lng, lat,...</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Circle#event:stripchange" local-name="stripchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.GeoShape#event:stripchange">
              <description>
                <prose><p>Fired when this spatial's strip changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Circle#strip" local-name="strip" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#strip">
              <description>
                <prose><p>The strip to describe the shape in geo-space</p></prose>
              </description>
              <types>
                <type ref="H.geo.Strip"/>
              </types>
              <ctype>
                <name name="H.geo.Strip" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getStrip" local-name="getStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#getStrip">
              <description>
                <prose><p>This method returns the strip which represents the shape of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip"/>
                </ctype>
                <description>
                  <prose><p>the strip</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setStrip" local-name="setStrip" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.GeoShape#setStrip">
              <description>
                <prose><p>This method sets the geo-information for the spatial object</p></prose>
              </description>
              <param name="strip" nullable="true">
                <types>
                  <type ref="H.geo.Strip"/>
                </types>
                <ctype>
                  <name name="H.geo.Strip" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>The strip which represents the shape of the spatial object.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.GeoShape"/>
                </types>
                <ctype>
                  <name name="H.map.GeoShape"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getBounds" local-name="getBounds" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.GeoShape#getBounds">
              <description>
                <prose><p>This method returns the bounding rectangle for this object. The rectangle
is the smallest rectangle which encloses all points of the spatial object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#projectGeoStrips" local-name="projectGeoStrips" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectGeoStrips">
              <description>
                <prose><p>Projects geo-strips to x,y strips
DON'T publish, API-internal use only by SpatiaTile!</p></prose>
              </description>
              <param name="strips">
                <types>
                  <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="number"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>The geo-strips to project</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>A flag to indicate whether the strip is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the projected strips</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#projectDenormalized_" local-name="projectDenormalized_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#projectDenormalized_">
              <description>
                <prose><p>Returns an array of coordinates which are denormalized but they cover the shape. Denormalized means
that returned array of projected coordinates should contain points computed out of longitudes which are
bigger than 180 or smaller than -180 degrees.</p></prose>
              </description>
              <param name="coords">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of lat, lng...</p></prose>
                </description>
              </param>
              <param name="isClosed">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>Flag if the shape is closed</p></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose><p>The pixel projection to use</p></prose>
                </description>
              </param>
              <param name="opt_shift" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Optional value to determine of shifting to left or right world (+-360)</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;H.math.Point&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.math.Point"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>Array of 2D points</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#denormalizeLastLng_" local-name="denormalizeLastLng_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalizeLastLng_">
              <description>
                <prose><p>To keep the last longitude, needed by denormalize<em>()
Must be reset to 0 for each execution of projectDenormalized</em> before calling denormalize_</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Circle#denormalize_" local-name="denormalize_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.GeoShape#denormalize_">
              <description>
                <prose><p>To create a Point with denormalized longitudes, necessary for sequential longitudes with a delta &gt; 180 degrees</p></prose>
              </description>
              <param name="lat">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="lng">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="shift">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="pxProjection">
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Circle#event:stylechange" local-name="stylechange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Spatial#event:stylechange">
              <description>
                <prose><p>Fired when this spatial's style changes.</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Circle#style" local-name="style" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#style">
              <description>
                <prose><p>The current style of this spatial object. If it is not defined you have to call getStyle() to create a default style.
Must NOT published, API internally used only by SpatialTile to prevent unnecessary cloning.</p></prose>
              </description>
              <types>
                <type ref="H.map.SpatialStyle"/>
              </types>
              <ctype>
                <name name="H.map.SpatialStyle"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getStyle" local-name="getStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#getStyle">
              <description>
                <prose><p>To get the drawing style of this object. The returned style is treated as immutable and must not be modified
afterwards to prevent inconsistancies!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.SpatialStyle"/>
                </types>
                <ctype>
                  <name name="H.map.SpatialStyle"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setStyle" local-name="setStyle" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#setStyle">
              <description>
                <prose><p>To set the drawing style of this object.
If the passed opt_style argument is an instance of <link ref="H.map.SpatialStyle" /> it is treated as immutable and
must not be modified afterwards to prevent inconsistancies!
.</p></prose>
              </description>
              <param name="opt_style" optional="true">
                <types>
                  <type ref="H.map.SpatialStyle"/>
                  <type ref="H.map.SpatialStyle.Options"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.SpatialStyle"/>
                    </type>
                    <type>
                      <name name="H.map.SpatialStyle.Options"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The style to set.
       If it evaluates to a <code>falsy</code> the <link ref="H.map.SpatialStyle.DEFAULT_STYLE" /> is used.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Spatial"/>
                </types>
                <ctype>
                  <name name="H.map.Spatial"/>
                </ctype>
                <description>
                  <prose><p>the Spatial instance itself</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#PX_CLIP_MARGIN" local-name="PX_CLIP_MARGIN" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#PX_CLIP_MARGIN">
              <description>
                <prose><p>The clip margin in pixel to use when clipping a projected geometry in pixel space
DON'T publish it, API internal use only</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Circle#FULLY_COVERED" local-name="FULLY_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#FULLY_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is covering the requested area fully
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Circle#NOT_COVERED" local-name="NOT_COVERED" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#NOT_COVERED">
              <description>
                <prose><p>The constant to signalize that the geometry of the spatial object is not covering the requested area at all
DON'T publish it, API internally use only</p></prose>
              </description>
              <types>
                <type ref="Array"/>
              </types>
              <ctype>
                <name name="Array"/>
              </ctype>
            </property>
            <property name="H.map.Circle#isClosed_" local-name="isClosed_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Spatial#isClosed_">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Circle#isClosed" local-name="isClosed" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Spatial#isClosed">
              <description>
                <prose><p>Indicates whether this spatial object represents a closed shape</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getGeometry" local-name="getGeometry" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.Spatial#getGeometry">
              <description>
                <prose><p>Returns the projected geometry of this spatial object for a given spatial tile. Tile's coordinate
system origin is top left corner.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <typed>
                        <base>
                          <name name="Array"/>
                        </base>
                        <app>
                          <name name="H.math.Point"/>
                        </app>
                      </typed>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>an array of arrays containing alternating x, y coordinate pairs</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getHybridIdx" local-name="getHybridIdx" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.Spatial#getHybridIdx">
              <description>
                <prose><p>The index of the geometry where the polyline geometries start. If the value is <code>-1</code> the geometry is not a
hybrid geometrys.
DON'T publish! It's just a work arround to be able to represent spatial objects which are a composit of
tessellated polygons (as surface area) and polylines (as outline) like the Meta-Info-Buildings.
The provided geometry begins with the shapes for the tessellated polygons. Starting at hybrid index the pathes for
the outlines are added. The hybrid index is taken in to account during rendering and hit testing.
It is only considered if the isClosed flag is true and the hybrid index is <code>&gt;= 0</code>.
The default implementation returns always <code>-1</code>. Concrete Spatial implementation have to override it.</p></prose>
              </description>
              <param name="tile">
                <types>
                  <type ref="H.map.provider.SpatialTile"/>
                </types>
                <ctype>
                  <name name="H.map.provider.SpatialTile"/>
                </ctype>
                <description>
                  <prose><p>The tile for which the geometry is requested</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>the index where outline geometries are starting, 0 means no hybrid geometry at all</p></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Circle#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Circle#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Circle#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Circle#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Circle#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Circle#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Circle#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Circle#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Circle#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Circle#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Circle#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Circle#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Circle#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Circle#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Circle#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Circle#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Circle#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Circle#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Circle#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Circle#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Circle#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Circle#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Circle#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.DomIcon" local-name="DomIcon" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A visual representation of the <link ref="H.map.DomMarker" />. DomIcon needs to be created with a dom element.
Dom element works as a template for visual representation of the marker therefore
single DomIcon can be reused across multiple DomMarkers. Provided dom node gets cloned and
rendered every time when marker reaches (is visible within) the map view port therefore
all previously attached event listeners will not execute. To handle cases where listeners
for the dom node are in needed, user needs to add them within <i>onAttach</i> callback
were currently displayed clone reference is available. Within <i>onDetach</i> callback,
cloned node listener can be removed.</p>
<p>The <i>onAttach</i> and <i>onDetach</i> callbacks can be provided to the icon by using
<link ref="H.map.DomIcon.Options" /></p></prose>
              <example>var domElement = document.createElement(&apos;div&apos;);
domElement.style.width = &apos;20px&apos;;
domElement.style.height = &apos;20px&apos;;
domElement.style.backgroundColor = &apos;blue&apos;;

function changeOpacity(evt) {
  evt.target.style.opacity = 0.8;
};

var domIcon = new H.map.DomIcon(domElement, {
  onAttach: function(clonedElement, domIcon, domMarker) {
    clonedElement.addEventListener(&apos;mouseover&apos;, changeOpacity);
  },
  onDetach: function(clonedElement, domIcon, domMarker) {
    clonedElement.removeEventListener(&apos;mouseover&apos;, changeOpacity);
  }
});</example>
            </description>
            <constructor local-name="DomIcon" name="H.map.DomIcon">
              <param name="element">
                <types>
                  <type ref="Element"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="Element"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The element or markup to use for this icon</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.DomIcon.Options"/>
                </types>
                <ctype>
                  <name name="H.map.DomIcon.Options" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </constructor>
            <property name="H.map.DomIcon#elem" local-name="elem" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The DOM element of this icon
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element" nullable="false"/>
              </ctype>
            </property>
            <property name="H.map.DomIcon.parserElement_" local-name="parserElement_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A container element used to parse markup</p></prose>
              </description>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
            </property>
            <property name="H.map.DomIcon#onAttach" local-name="onAttach" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The customized callback to invoke when a clone is appended to a DOM tree
Must NOT be published, it's used API interally only by rendering!
The renderer has to assure that the callback is called in the correct moment.</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func nullable="true">
                  <param>
                    <name name="Element" nullable="false"/>
                  </param>
                  <param>
                    <name name="H.map.DomIcon" nullable="false"/>
                  </param>
                  <param>
                    <name name="H.map.DomMarker" nullable="false"/>
                  </param>
                </func>
              </ctype>
            </property>
            <property name="H.map.DomIcon#onDetach_" local-name="onDetach_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The customized callback to invoke when a clone is removed from a DOM tree</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func nullable="true">
                  <param>
                    <name name="Element" nullable="false"/>
                  </param>
                  <param>
                    <name name="H.map.DomIcon" nullable="false"/>
                  </param>
                  <param>
                    <name name="H.map.DomMarker" nullable="false"/>
                  </param>
                </func>
              </ctype>
            </property>
            <method name="H.map.DomIcon#getClone" local-name="getClone" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns a clone of this icon's element
Must NOT be published, it's used API interally only by rendering!</p></prose>
              </description>
              <param name="marker">
                <types>
                  <type ref="H.map.DomMarker"/>
                </types>
                <ctype>
                  <name name="H.map.DomMarker" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>The DomMarker instance for which this clone is requested</p></prose>
                </description>
              </param>
              <param name="targetDocument">
                <types>
                  <type ref="Document"/>
                </types>
                <ctype>
                  <name name="Document"/>
                </ctype>
                <description>
                  <prose><p>The target document for the clone</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomIcon#disposeClone" local-name="disposeClone" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>To dispose a no longer used clone of this icon's element
Must NOT be published, it's used API interally only by rendering!</p></prose>
              </description>
              <param name="clone">
                <types>
                  <type ref="Element"/>
                </types>
                <ctype>
                  <name name="Element" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="marker">
                <types>
                  <type ref="H.map.DomMarker"/>
                </types>
                <ctype>
                  <name name="H.map.DomMarker" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>The DomMarker instance for which this clone was requested</p></prose>
                </description>
              </param>
            </method>
            <property name="H.map.DomIcon#containsCanvasses_" local-name="containsCanvasses_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Indicates whether the element contains one or more canvas elements</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <typedef name="H.map.DomIcon.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a DomIcon</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="onAttach"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <func>
                            <param>
                              <name name="Element"/>
                            </param>
                            <param>
                              <name name="H.map.DomIcon"/>
                            </param>
                            <param>
                              <name name="H.map.DomMarker"/>
                            </param>
                          </func>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="onDetach"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <func>
                            <param>
                              <name name="Element"/>
                            </param>
                            <param>
                              <name name="H.map.DomIcon"/>
                            </param>
                            <param>
                              <name name="H.map.DomMarker"/>
                            </param>
                          </func>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.DomIcon.Options#onAttach" local-name="onAttach" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A callback which is invoked before a clone of the icon's element is appended and displayed on the map.
          This callback can be used to setup the clone.</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="Element"/>
                    </param>
                    <param>
                      <name name="H.map.DomIcon"/>
                    </param>
                    <param>
                      <name name="H.map.DomMarker"/>
                    </param>
                  </func>
                </ctype>
              </property>
              <property name="H.map.DomIcon.Options#onDetach" local-name="onDetach" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>A callback which is invoked after a clone of the icon's element is removed from the map.
          This callback can be used to clean up the clone.</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="Element"/>
                    </param>
                    <param>
                      <name name="H.map.DomIcon"/>
                    </param>
                    <param>
                      <name name="H.map.DomMarker"/>
                    </param>
                  </func>
                </ctype>
              </property>
            </typedef>
          </class>
          <class name="H.map.HitArea" local-name="HitArea" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This class represents an area that objects, like a marker, occupies in the screen space, meaning that
object can be probed and returned by <link ref="H.Map@getObjectsAt" /> method.</p></prose>
            </description>
            <constructor local-name="HitArea" name="H.map.HitArea">
              <param name="shapeType">
                <types>
                  <type ref="H.map.HitArea.ShapeType"/>
                </types>
                <ctype>
                  <name name="H.map.HitArea.ShapeType"/>
                </ctype>
                <description>
                  <prose><p>type of HitArea's shape <link ref="H.map.HitArea.ShapeType" /></p></prose>
                </description>
              </param>
              <param name="values">
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>the type-dependent values to define the shape of the hit area. The format
for the different types are: H.map.HitArea.ShapeType.RECT: [left, top, right, bottom],
H.map.HitArea.ShapeType.CIRCLE: [centerX, centerY, radius],
H.map.HitArea.ShapeType.POLYGON: [x1, y1, x2, y2 &#x2026; xN,yN]</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.map.HitArea#hitTest" local-name="hitTest" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This method tests if HitArea covers the given coordinate.</p></prose>
              </description>
              <param name="x">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>x pixel coordinate to test</p></prose>
                </description>
              </param>
              <param name="y">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>y pixel coordinate to test</p></prose>
                </description>
              </param>
              <param name="tolerance">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>A numeric value indicating the tolerance to use for
hit testing</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.math.CoverType"/>
                </types>
                <ctype>
                  <name name="H.math.CoverType"/>
                </ctype>
                <description>
                  <prose><p>returns type of coverage</p></prose>
                </description>
              </returns>
            </method>
            <enum name="H.map.HitArea.ShapeType" local-name="ShapeType" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Enumeration represents possible shape types that HitArea can have.</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <value name="H.map.HitArea.ShapeType.RECT" local-name="RECT">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.HitArea.ShapeType.CIRCLE" local-name="CIRCLE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.HitArea.ShapeType.POLYGON" local-name="POLYGON">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
          </class>
          <class name="H.map.AbstractMarker" local-name="AbstractMarker" access="public" scope="static" virtual="true" published="true" exported="true">
            <description>
              <prose><p>This class represents marker, which offers a means of identifying a location on the map with an icon.</p>
<p>A marker consists of a geographic location and a visual representation in the form of a bitmap or a DOM element.
Markers are rendered in screen space, i.e. while they are always fixed to their geographic location their icon is
always rendered independently of the map's zoom level.</p></prose>
            </description>
            <extends>
              <type ref="H.map.Object"/>
            </extends>
            <constructor local-name="AbstractMarker" name="H.map.AbstractMarker">
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The location of this marker</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.AbstractMarker.Options"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The values to initialize this marker</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.AbstractMarker#position_" local-name="position_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Keeps a reference to the marker's current position</p></prose>
              </description>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getPosition" local-name="getPosition" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method returns this marker's current position.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>current marker geo position</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setPosition" local-name="setPosition" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This method sets the marker's current position.</p></prose>
              </description>
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.AbstractMarker#iconConstructor" local-name="iconConstructor" access="protected" scope="instance" virtual="true" published="false" exported="false">
              <description>
                <prose><p>The constructor for the icon. It is used for instanceof checks and must be defined in su classes</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
            </property>
            <property name="H.map.AbstractMarker#icon" local-name="icon" access="protected" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The the marker's current icon.</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getIcon" local-name="getIcon" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Returns this marker's current icon.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setIcon" local-name="setIcon" access="public" scope="instance" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Sets the marker's current icon.</p></prose>
              </description>
              <param name="icon">
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The new marker icon</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>H.lang.InvalidArgumentError</prose>
                </description>
              </exception>
            </method>
            <property name="H.map.AbstractMarker#createDefaultIcon" local-name="createDefaultIcon" access="protected" scope="instance" virtual="true" published="false" exported="false">
              <description>
                <prose><p>Creates and returns a default icon</p></prose>
              </description>
            </property>
            <property name="H.map.AbstractMarker#defaultIcon_" local-name="defaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Keeps the default icon</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getDefaultIcon_" local-name="getDefaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Returns the default icon</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <typedef name="H.map.AbstractMarker.DefaultIconOptions" local-name="DefaultIconOptions" access="protected" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A record to store options to create a default icon</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="svg"/>
                    </key>
                    <value>
                      <name name="string"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="size"/>
                    </key>
                    <value>
                      <name name="H.math.Size"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="anchor"/>
                    </key>
                    <value>
                      <name name="H.math.Point"/>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="hitArea"/>
                    </key>
                    <value>
                      <name name="H.map.HitArea"/>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.AbstractMarker.DefaultIconOptions#svg" local-name="svg" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The icon's SVG markup</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.DefaultIconOptions#size" local-name="size" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The icon's size</p></prose>
                </description>
                <types>
                  <type ref="H.math.Size"/>
                </types>
                <ctype>
                  <name name="H.math.Size"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.DefaultIconOptions#anchor" local-name="anchor" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The anchor to apply to the icon</p></prose>
                </description>
                <types>
                  <type ref="H.math.Point"/>
                </types>
                <ctype>
                  <name name="H.math.Point"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.DefaultIconOptions#hitArea" local-name="hitArea" access="public" scope="" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The icon's area for hit detection</p></prose>
                </description>
                <types>
                  <type ref="H.map.HitArea"/>
                </types>
                <ctype>
                  <name name="H.map.HitArea"/>
                </ctype>
              </property>
            </typedef>
            <property name="H.map.AbstractMarker.defaultIconOptions_" local-name="defaultIconOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Keeps the options for the default icon</p></prose>
              </description>
              <types>
                <type ref="H.map.AbstractMarker.DefaultIconOptions"/>
              </types>
              <ctype>
                <name name="H.map.AbstractMarker.DefaultIconOptions"/>
              </ctype>
            </property>
            <typedef name="H.map.AbstractMarker.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a AbstractMarker</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="icon"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.Icon"/>
                        </type>
                        <type>
                          <name name="H.map.DomIcon"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.AbstractMarker.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the map object is visible at all, default is <code>true</code>.</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of ObjectProvider
          wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.AbstractMarker.Options#icon" local-name="icon" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The icon to use for the visual representation, if omitted a default icon is used.</p></prose>
                </description>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
              </property>
            </typedef>
            <event name="H.map.AbstractMarker#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.AbstractMarker#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.AbstractMarker#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.AbstractMarker#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.AbstractMarker#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.AbstractMarker#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.AbstractMarker#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.AbstractMarker#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.AbstractMarker#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.AbstractMarker#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.AbstractMarker#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.AbstractMarker#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.AbstractMarker#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.AbstractMarker#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.AbstractMarker#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.AbstractMarker#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.AbstractMarker#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.AbstractMarker#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.AbstractMarker#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.AbstractMarker#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.AbstractMarker#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.AbstractMarker#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.DomMarker" local-name="DomMarker" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A marker with a visual representation in the form of a full styleable and scripteable DOM element.
DomMarker are predestinated if small amounts of markers with dynamic styled and/or scripted icons should be displayed
om the map (e.g. animated interactive SVG).</p></prose>
            </description>
            <extends>
              <type ref="H.map.AbstractMarker"/>
            </extends>
            <constructor local-name="DomMarker" name="H.map.DomMarker">
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.DomMarker.Options"/>
                </types>
                <ctype>
                  <name name="H.map.DomMarker.Options" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </constructor>
            <typedef name="H.map.DomMarker.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a DomMarker</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="icon"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.DomIcon"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.DomMarker.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.DomMarker.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.DomMarker.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the map object is visible at all, default is <code>true</code>.</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.DomMarker.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.DomMarker.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of ObjectProvider
          wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.DomMarker.Options#icon" local-name="icon" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The icon to use for the visual representation, if omitted a default icon is used.</p></prose>
                </description>
                <types>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <name name="H.map.DomIcon" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <property name="H.map.DomMarker#position_" local-name="position_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#position_">
              <description>
                <prose><p>Keeps a reference to the marker's current position</p></prose>
              </description>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getPosition" local-name="getPosition" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#getPosition">
              <description>
                <prose><p>This method returns this marker's current position.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>current marker geo position</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setPosition" local-name="setPosition" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#setPosition">
              <description>
                <prose><p>This method sets the marker's current position.</p></prose>
              </description>
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.DomMarker#iconConstructor" local-name="iconConstructor" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.AbstractMarker#iconConstructor">
              <description>
                <prose><p>The constructor for the icon. It is used for instanceof checks and must be defined in su classes</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
            </property>
            <property name="H.map.DomMarker#icon" local-name="icon" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#icon">
              <description>
                <prose><p>The the marker's current icon.</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getIcon" local-name="getIcon" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#getIcon">
              <description>
                <prose><p>Returns this marker's current icon.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setIcon" local-name="setIcon" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#setIcon">
              <description>
                <prose><p>Sets the marker's current icon.</p></prose>
              </description>
              <param name="icon">
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The new marker icon</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>H.lang.InvalidArgumentError</prose>
                </description>
              </exception>
            </method>
            <property name="H.map.DomMarker#createDefaultIcon" local-name="createDefaultIcon" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.AbstractMarker#createDefaultIcon">
              <description>
                <prose><p>Creates and returns a default icon</p></prose>
              </description>
            </property>
            <property name="H.map.DomMarker#defaultIcon_" local-name="defaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#defaultIcon_">
              <description>
                <prose><p>Keeps the default icon</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getDefaultIcon_" local-name="getDefaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#getDefaultIcon_">
              <description>
                <prose><p>Returns the default icon</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.DomMarker#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.DomMarker#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.DomMarker#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.DomMarker#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.DomMarker#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.DomMarker#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.DomMarker#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.DomMarker#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.DomMarker#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.DomMarker#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.DomMarker#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.DomMarker#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DomMarker#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.DomMarker#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.DomMarker#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.DomMarker#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DomMarker#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.DomMarker#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DomMarker#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DomMarker#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.DomMarker#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.DomMarker#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <class name="H.map.Marker" local-name="Marker" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>A marker with a visual representation in the form of a bitmap icon.
Marker are predestinated if large amounts of markers with static icons should be displayed om the map.</p></prose>
            </description>
            <extends>
              <type ref="H.map.AbstractMarker"/>
            </extends>
            <constructor local-name="Marker" name="H.map.Marker">
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose><p>The location of this marker</p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.map.Marker.Options"/>
                </types>
                <ctype>
                  <name name="H.map.Marker.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The values to initialize this marker</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.map.Marker#previousIconState_" local-name="previousIconState_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Keeps the state of the previous icon, see invalidate()</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon.prototype.State"/>
              </types>
              <ctype>
                <name name="H.map.Icon.prototype.State"/>
              </ctype>
            </property>
            <property name="H.map.Marker#isListeningForStateChange_" local-name="isListeningForStateChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Indicates whether this marker is currently listening to icon's &quot;statechange&quot; event</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Marker#onIconStateChange_" local-name="onIconStateChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The listener for the &quot;statechange&quot; event</p></prose>
              </description>
            </method>
            <typedef name="H.map.Marker.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
              <description>
                <prose><p>Options used to initialize a Marker</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="min"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="max"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="visibility"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="zIndex"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="provider"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.provider.ObjectProvider"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="icon"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="H.map.Icon"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.map.Marker.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Marker.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Marker.Options#visibility" local-name="visibility" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether the map object is visible at all, default is <code>true</code>.</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Marker.Options#zIndex" local-name="zIndex" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The z-index value of the map object, default is <code>0</code></p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.map.Marker.Options#provider" local-name="provider" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The provider of this object. This property is only needed if a customized Implementation of ObjectProvider
          wants to instantiate an object.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Provider"/>
                  <type ref="null"/>
                </types>
                <ctype>
                  <union optional="true">
                    <type>
                      <name name="H.map.provider.Provider"/>
                    </type>
                    <type>
                      <null/>
                    </type>
                  </union>
                </ctype>
              </property>
              <property name="H.map.Marker.Options#icon" local-name="icon" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The icon to use for the visual representation, if omitted a default icon is used.</p></prose>
                </description>
                <types>
                  <type ref="H.map.Icon"/>
                </types>
                <ctype>
                  <name name="H.map.Icon" optional="true"/>
                </ctype>
              </property>
            </typedef>
            <property name="H.map.Marker#position_" local-name="position_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#position_">
              <description>
                <prose><p>Keeps a reference to the marker's current position</p></prose>
              </description>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
            </property>
            <method name="H.map.Marker#getPosition" local-name="getPosition" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#getPosition">
              <description>
                <prose><p>This method returns this marker's current position.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.geo.Point"/>
                </types>
                <ctype>
                  <name name="H.geo.Point"/>
                </ctype>
                <description>
                  <prose><p>current marker geo position</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setPosition" local-name="setPosition" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#setPosition">
              <description>
                <prose><p>This method sets the marker's current position.</p></prose>
              </description>
              <param name="position">
                <types>
                  <type ref="H.geo.IPoint"/>
                </types>
                <ctype>
                  <name name="H.geo.IPoint"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.InvalidArgumentError"/>
                </types>
                <ctype>
                  <name name="H.lang.InvalidArgumentError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Marker#iconConstructor" local-name="iconConstructor" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.AbstractMarker#iconConstructor">
              <description>
                <prose><p>The constructor for the icon. It is used for instanceof checks and must be defined in su classes</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
            </property>
            <property name="H.map.Marker#icon" local-name="icon" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#icon">
              <description>
                <prose><p>The the marker's current icon.</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Marker#getIcon" local-name="getIcon" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#getIcon">
              <description>
                <prose><p>Returns this marker's current icon.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setIcon" local-name="setIcon" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.AbstractMarker#setIcon">
              <description>
                <prose><p>Sets the marker's current icon.</p></prose>
              </description>
              <param name="icon">
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>The new marker icon</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.AbstractMarker"/>
                </types>
                <ctype>
                  <name name="H.map.AbstractMarker"/>
                </ctype>
                <description>
                  <prose><p>the marker itself</p></prose>
                </description>
              </returns>
              <exception>
                <description>
                  <prose>H.lang.InvalidArgumentError</prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Marker#createDefaultIcon" local-name="createDefaultIcon" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.AbstractMarker#createDefaultIcon">
              <description>
                <prose><p>Creates and returns a default icon</p></prose>
              </description>
            </property>
            <property name="H.map.Marker#defaultIcon_" local-name="defaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#defaultIcon_">
              <description>
                <prose><p>Keeps the default icon</p></prose>
              </description>
              <types>
                <type ref="H.map.Icon"/>
                <type ref="H.map.DomIcon"/>
              </types>
              <ctype>
                <union nullable="false">
                  <type>
                    <name name="H.map.Icon"/>
                  </type>
                  <type>
                    <name name="H.map.DomIcon"/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Marker#getDefaultIcon_" local-name="getDefaultIcon_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.AbstractMarker#getDefaultIcon_">
              <description>
                <prose><p>Returns the default icon</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Icon"/>
                  <type ref="H.map.DomIcon"/>
                </types>
                <ctype>
                  <union nullable="false">
                    <type>
                      <name name="H.map.Icon"/>
                    </type>
                    <type>
                      <name name="H.map.DomIcon"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <event name="H.map.Marker#event:visibilitychange" local-name="visibilitychange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:visibilitychange">
              <description>
                <prose><p>Fired when this object's visibility changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <event name="H.map.Marker#event:zindexchange" local-name="zindexchange" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.Object#event:zindexchange">
              <description>
                <prose><p>Fired when this object's z-index changes</p></prose>
              </description>
              <types>
                <type ref="H.util.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.util.ChangeEvent"/>
              </ctype>
            </event>
            <property name="H.map.Marker#type" local-name="type" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#type">
              <description>
                <prose><p>The major type of this object. Any concrete implementation has to define the type!
Must NOT be published, it's used API internally only!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object.Type"/>
              </types>
              <ctype>
                <name name="H.map.Object.Type"/>
              </ctype>
            </property>
            <enum name="H.map.Marker#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#EventType">
              <description>
                <prose><p>Events fired by Object</p></prose>
              </description>
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <value name="H.map.Marker#EventType.VISIBILITYCHANGE" local-name="VISIBILITYCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
              <value name="H.map.Marker#EventType.ZINDEXCHANGE" local-name="ZINDEXCHANGE">
                <description>
                  <prose></prose>
                </description>
              </value>
            </enum>
            <property name="H.map.Marker#id_" local-name="id_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#id_">
              <description>
                <prose><p>The ID of this object</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Marker#getId" local-name="getId" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getId">
              <description>
                <prose><p>Returns the ID of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#min_" local-name="min_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#min_">
              <description>
                <prose><p>The minimum zoom level for which the object is visible, default is <code>-Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.map.Marker#max_" local-name="max_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#max_">
              <description>
                <prose><p>The maximum zoom level for which the object is visible, default is <code>Infinity</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Marker#isVisibleForZoom" local-name="isVisibleForZoom" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#isVisibleForZoom">
              <description>
                <prose><p>Checks if the given zoom level is in the visibility range of this object
Must NOT be published, it's used API interally only by ObjectProvider</p></prose>
              </description>
              <param name="zoomLevel">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>The zoom level to check against</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#visibility_" local-name="visibility_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#visibility_">
              <description>
                <prose><p>The visibility flag of this Object, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.map.Marker#setVisibility" local-name="setVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setVisibility">
              <description>
                <prose><p>Sets the visibility of this object.</p></prose>
              </description>
              <param name="opt_visibility" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates whether this map object should be visible.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#getVisibility" local-name="getVisibility" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getVisibility">
              <description>
                <prose><p>Returns the visibility of this object.</p></prose>
              </description>
              <param name="opt_effective" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicates that the effective visibility is requested. In this case the visibility of
       all possible ancestor groups is also taken into account</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#zIndex_" local-name="zIndex_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zIndex_">
              <description>
                <prose><p>The z-index of this object, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Marker#getZIndex" local-name="getZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getZIndex">
              <description>
                <prose><p>Returns the z-index of this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setZIndex" local-name="setZIndex" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setZIndex">
              <description>
                <prose><p>To set the-index of this object.</p></prose>
              </description>
              <param name="zIndex">
                <types>
                  <type ref="number"/>
                  <type ref="undefined"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="number"/>
                    </type>
                    <type>
                      <undefined/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this object</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#zInfo" local-name="zInfo" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#zInfo">
              <description>
                <prose><p>An Array that collects information for z-ordering.
At index 0 it stores a boolean flag to indicate whether at least one of the objects on ancestor-or-self axis
has a defined zIndex <code>1</code> - otherwise <code>0</code>.
At index [1 ... n] it stores alternating the zIndex and the siblingIndex of each object on ancestor-or-self axis,
starting with the root ancestor
Must NOT be published, it's used API interally only by Group#resetZInfo!</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;number&gt;"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="number"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <method name="H.map.Marker#getZInfo" local-name="getZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#getZInfo">
              <description>
                <prose><p>Returns the z-info of this object.
Must NOT be published, it's used API interally only!</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="Array.&lt;number&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="number"/>
                    </app>
                  </typed>
                </ctype>
                <description>
                  <prose><p>see H.map.Object.prototype.zInfo for more informations</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#resetZInfo" local-name="resetZInfo" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#resetZInfo">
              <description>
                <prose><p>Resets the z-info for this object. We need a method, because Group will override the behavior
Must NOT be published, it's used API interally only!</p></prose>
              </description>
            </method>
            <property name="H.map.Marker#zOrderIdx" local-name="zOrderIdx" access="protected" scope="instance" virtual="true" published="false" exported="false" inherited="H.map.Object#zOrderIdx">
              <description>
                <prose><p>An index to use if different object types are compared for z-ordering.
Each concrete implementation of a map object has to provide a correct z-order index.
The current version of our API uses:
 <em> 0 for Spatial
 </em> 1 for Marker
 * 2 for DomMarker</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <method name="H.map.Marker#compareZOrder" local-name="compareZOrder" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#compareZOrder">
              <description>
                <prose><p>Compares the rendering z-order of this object with another object.</p></prose>
              </description>
              <param name="other">
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>The other map object to compare with</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <description>
                  <prose><p>If less then <code>0</code> the first object has a lower z-order.
     If equal <code>0</code> booth objects have the same z-order.
     If greater then <code>0</code> the first object has a higher z-order.</p></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#previousSibling" local-name="previousSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#previousSibling">
              <description>
                <prose><p>A reference to the previous sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the first child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Marker#nextSibling" local-name="nextSibling" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#nextSibling">
              <description>
                <prose><p>A reference to the next sibling within this object's group
or <code>null</code> if this object is not yet attached to a group or this object is the last child in its group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
            </property>
            <property name="H.map.Marker#siblingIndex" local-name="siblingIndex" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#siblingIndex">
              <description>
                <prose><p>The sibling index of this object.
The sibling index might not be identical with the child's index in the children collection of the group but it's
assured that each object has an higher siblingIndex than its previous sibling and a lower siblingIndex than
its next sibling.
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="number"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="number"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.map.Marker#parentGroup" local-name="parentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#parentGroup">
              <description>
                <prose><p>A reference to the parent group of this object or <code>null</code> if this object is not yet attached to a group
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <name name="H.map.Group" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Marker#getParentGroup" local-name="getParentGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getParentGroup">
              <description>
                <prose><p>Returns the parent group which contains this object or <code>null</code> if the object is not contained by any group.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setParentGroup" local-name="setParentGroup" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setParentGroup">
              <description>
                <prose><p>To set the parent group which contains this object or <code>null</code> if it is not contained by any group
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="parentGroup" nullable="true">
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Marker#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getRootGroup">
              <description>
                <prose><p>The root object in which this object is attached or the object itself.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#contains" local-name="contains" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#contains">
              <description>
                <prose><p>Checks whether the given object is an inclusive descendant of this object</p></prose>
              </description>
              <param name="object">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>The object that's being compared against.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </returns>
            </method>
            <property name="H.map.Marker#provider" local-name="provider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#provider">
              <description>
                <prose><p>Reference to the current provider of this object
Must NOT be published, it's used API interally only by Object and Group!</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.ObjectProvider"/>
              </types>
              <ctype>
                <name name="H.map.provider.ObjectProvider" nullable="true"/>
              </ctype>
            </property>
            <method name="H.map.Marker#getProvider" local-name="getProvider" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getProvider">
              <description>
                <prose><p>The current provider of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current provider</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setProvider" local-name="setProvider" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#setProvider">
              <description>
                <prose><p>Sets the provider of this object.
Must NOT be published, it's used API interally only by Group!</p></prose>
              </description>
              <param name="newProvider" nullable="true">
                <types>
                  <type ref="H.map.provider.ObjectProvider"/>
                </types>
                <ctype>
                  <name name="H.map.provider.ObjectProvider" nullable="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_caller" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The caller to use for the error message.
     If omitted, the providers are NOT checked!
     It's usefull for Group#setProvider to prevent unnecessary checks for all descendants.</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>whether the provider has been changed</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="H.lang.IllegalOperationError"/>
                </types>
                <ctype>
                  <name name="H.lang.IllegalOperationError"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </exception>
            </method>
            <property name="H.map.Marker#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.Object#invalidations_">
              <description>
                <prose><p>The Invalidations of this object</p></prose>
              </description>
              <types>
                <type ref="H.map.provider.Invalidations"/>
              </types>
              <ctype>
                <name name="H.map.provider.Invalidations"/>
              </ctype>
            </property>
            <method name="H.map.Marker#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getInvalidations">
              <description>
                <prose><p>Returns the invalidations of this object</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.map.provider.Invalidations"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations"/>
                </ctype>
                <description>
                  <prose><p>an invalidation object</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#invalidate" local-name="invalidate" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#invalidate">
              <description>
                <prose><p>This method invalidates this map object.</p></prose>
              </description>
              <param name="flags">
                <types>
                  <type ref="H.math.BitMask"/>
                </types>
                <ctype>
                  <name name="H.math.BitMask"/>
                </ctype>
                <description>
                  <prose><p>The flags indicating the types of occurred changes</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
                <description>
                  <prose><p>indicates whether a validtion was executed (only if the object has a provider)</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#getData" local-name="getData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#getData">
              <description>
                <prose><p>This method returns previously stored arbitrary data from this object.</p></prose>
              </description>
              <returns>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the previously stored data or <code>undefined</code> if not data was stored.</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setData" local-name="setData" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.Object#setData">
              <description>
                <prose><p>This method stores arbitrary data with this map object</p></prose>
              </description>
              <param name="data">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the data to be stored</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.map.Object"/>
                </types>
                <ctype>
                  <name name="H.map.Object"/>
                </ctype>
                <description>
                  <prose><p>returns this map object instance</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <param name="parent">
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget"/>
                </ctype>
                <description>
                  <prose><p>the new parent event target</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Marker#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
              <description>
                <prose></prose>
              </description>
              <returns>
                <types>
                  <type ref="H.util.EventTarget"/>
                </types>
                <ctype>
                  <name name="H.util.EventTarget" nullable="true"/>
                </ctype>
                <description>
                  <prose><p>the current parent event target</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.map.Marker#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
              <description>
                <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>event handler function</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Marker#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
              <description>
                <prose><p>This method will removed previously added listener from the event target</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>name of event</p></prose>
                </description>
              </param>
              <param name="handler">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose><p>previously added event handler</p></prose>
                </description>
              </param>
              <param name="opt_capture" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose><p>scope for the handler function</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Marker#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
              <description>
                <prose><p>This method will dispatch event on the event target object</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="H.util.Event"/>
                  <type ref="string"/>
                </types>
                <ctype>
                  <union>
                    <type>
                      <name name="H.util.Event"/>
                    </type>
                    <type>
                      <name name="string"/>
                    </type>
                  </union>
                </ctype>
                <description>
                  <prose><p>event object or event name</p></prose>
                </description>
              </param>
            </method>
            <method name="H.map.Marker#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
              <description>
                <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
              </description>
            </method>
            <method name="H.map.Marker#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
              <description>
                <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
              </description>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <name name="Function" nullable="false"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="opt_scope" optional="true">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
          </class>
          <ns name="H.map.provider" local-name="provider" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This namespace contains interfaces and implementations of provider.</p>
<p>Providers represent data sources, which provide arbitrary data to the
Maps API's rendering engines. Specializations of this concept are
tile providers (which create tile-partitioned data to be used
by the renderer) and object providers (which provide map objects to the
renderer for consumption).</p>
<p>Providers implement the communication with backend-services and caching of
received data.</p></prose>
            </description>
            <class name="H.map.provider.Invalidations" local-name="Invalidations" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>This class represents invalidation states of a renderable object. A renderer
can optimize its rendering strategies based on the information in this
object.</p>
<p>For example, renderers may differentiate between a purely visual change of
an object and a spatial change of an object. One may only require the
change of a color during rendering, the other requires to re-project the
object.</p></prose>
              </description>
              <constructor local-name="Invalidations" name="H.map.provider.Invalidations"/>
              <property name="H.map.provider.Invalidations.MARK_INITIAL" local-name="MARK_INITIAL" access="public" scope="static" virtual="false" published="true" exported="true" constant="true">
                <description>
                  <prose><p>This constant represents the initial invalidation mark an invalidations
object has.</p></prose>
                </description>
                <types>
                  <type ref="H.map.provider.Invalidations.Mark"/>
                </types>
                <ctype>
                  <name name="H.map.provider.Invalidations.Mark"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>To update invalidation marks accordingly to the given the invalidation types.</p></prose>
                </description>
                <param name="mark">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to set</p></prose>
                  </description>
                </param>
                <param name="types">
                  <types>
                    <type ref="H.math.BitMask"/>
                  </types>
                  <ctype>
                    <name name="H.math.BitMask"/>
                  </ctype>
                  <description>
                    <prose><p>The descrete invalidation types to update</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Invalidations#getMark" local-name="getMark" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns the current invalidation mark of this invalidations
object.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>the current invalidation mark</p></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#anyMark_" local-name="anyMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for ANY</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isAny" local-name="isAny" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether any change occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#visualMark_" local-name="visualMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for VISUAL</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isVisual" local-name="isVisual" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether a visual change occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#spatialMark_" local-name="spatialMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for SPATIAL</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isSpatial" local-name="isSpatial" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether a spatial change occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#addMark_" local-name="addMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for ADD</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isAdd" local-name="isAdd" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether an add-operation occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#removeMark_" local-name="removeMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for REMOVE</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isRemove" local-name="isRemove" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether a remove operation occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.Invalidations#zOrderMark_" local-name="zOrderMark_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidation mark for Z_ORDER</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.Invalidations#isZOrder" local-name="isZOrder" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether a z-order change occurred after the specified since mark</p></prose>
                </description>
                <param name="since">
                  <types>
                    <type ref="H.map.provider.Invalidations.Mark"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations.Mark"/>
                  </ctype>
                  <description>
                    <prose><p>The invalidation mark to check against</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <enum name="H.map.provider.Invalidations.Flag" local-name="Flag" access="public" scope="static" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This enumeration encapsulates bit flags for different invalidations of map objects.</p>
<p>Flags can be combined to signal multiple changes at the same time.
These flags are used by providers to differentiate different kinds
of property changes in order to optimize the rendering.</p>
<p>Values of this emumeration are:</p>
<ul>
<li>VISUAL (an object's visual appearance has been changed)</li>
<li>SPATIAL (an object's geospatial attribute has been changed)</li>
<li>REMOVE (an item has been removed from a provider)</li>
<li>ADD (an item has been added to a provider)</li>
<li>Z_ORDER (an item's z-index or it's index within its parent's children collection has been changed)</li>
<li>NONE (indicating that no change has occured)</li>
</ul></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
                <value name="H.map.provider.Invalidations.Flag.NONE" local-name="NONE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.provider.Invalidations.Flag.VISUAL" local-name="VISUAL">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.provider.Invalidations.Flag.SPATIAL" local-name="SPATIAL">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.provider.Invalidations.Flag.ADD" local-name="ADD">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.provider.Invalidations.Flag.REMOVE" local-name="REMOVE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
                <value name="H.map.provider.Invalidations.Flag.Z_ORDER" local-name="Z_ORDER">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <typedef name="H.map.provider.Invalidations.Mark" local-name="Mark" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>The invalidation mark represents a counter which is increased whenever an
invalidation takes place.</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </typedef>
            </class>
            <class name="H.map.provider.Tile" local-name="Tile" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>Generic Tile object which represents a part of the world
fiting into the Tile area represented by the Tiel coordinates (x - row, y - column)
and the zoom level (z). Number of tiles at particular zoom level (which means
number of areas into world is being splitted) is defined
as following: numberOfRows = numberOfColumns = 2^zoomlevel</p></prose>
              </description>
              <constructor local-name="Tile" name="H.map.provider.Tile">
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile zoom level</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all/>
                  </ctype>
                  <description>
                    <prose><p>generic data object which cooresponds to the given coordinates</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.Tile#key" local-name="key" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Unique tile key generated by provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.map.provider.Tile#x" local-name="x" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Tile column</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.Tile#y" local-name="y" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Tile row</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.Tile#z" local-name="z" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Tile zoom level</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.Tile#data" local-name="data" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Tile data (an image for example)</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.map.provider.Tile#valid" local-name="valid" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>This property holds a boolean flag indicating whether this tile is
still valid (true) or whether it should be re-fetched (false)</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
            </class>
            <class name="H.map.provider.SpatialTile" local-name="SpatialTile" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>SpatialTile represents part of the spatial data (i.e polyline, polygon)
clipped to area which fits into a single map tile. The data is clipped
according to tile's current x,y position and zoom level (z).</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.Tile"/>
              </extends>
              <constructor local-name="SpatialTile" name="H.map.provider.SpatialTile">
                <param name="key">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>the tile key</p></prose>
                  </description>
                </param>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the column number of this tile</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the row number of this tile</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the zoom level of this tile</p></prose>
                  </description>
                </param>
                <param name="tileSize">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the size of this spatial tile</p></prose>
                  </description>
                </param>
                <param name="pixelRatio">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                  </description>
                </param>
                <param name="objectProvider">
                  <types>
                    <type ref="H.map.provider.ObjectProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.ObjectProvider"/>
                  </ctype>
                  <description>
                    <prose><p>the object provider
 from which this tile will take it's information</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.SpatialTile#pxClipRect_" local-name="pxClipRect_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The projected rectangle on pixel base which represents the area to clip objects</p></prose>
                </description>
                <types>
                  <type ref="H.math.Rect"/>
                </types>
                <ctype>
                  <name name="H.math.Rect"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTile#getPxClipRect" local-name="getPxClipRect" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Returns a projected rectangle on pixel base which represents the area to clip objects.
The origin (0, 0) is at the top-left corner of the tile</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.math.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.math.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.SpatialTile#geoClipRect_" local-name="geoClipRect_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The geographical rectangle which represents the area to query intersecting objects</p></prose>
                </description>
                <types>
                  <type ref="H.geo.Rect"/>
                </types>
                <ctype>
                  <name name="H.geo.Rect"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTile#getGeoClipRect" local-name="getGeoClipRect" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Returns the geographical rectangle which represents the area to query intersecting objects</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.SpatialTile#pxProj_" local-name="pxProj_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The pixel projection for this tile. Origin (0, 0) is at the top-left corner of the tile</p></prose>
                </description>
                <types>
                  <type ref="H.geo.PixelProjection"/>
                </types>
                <ctype>
                  <name name="H.geo.PixelProjection"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTile#getPxProj" local-name="getPxProj" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Returns the pixel projection for this tile. The x and y coordinates defines the top-left corner of the tile</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.geo.PixelProjection"/>
                  </types>
                  <ctype>
                    <name name="H.geo.PixelProjection"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.SpatialTile#pixelRatio_" local-name="pixelRatio_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The pixel ratio of this tile</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTile#getPixelRatio" local-name="getPixelRatio" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Returns the pixel ratio of this tile</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile.zOrderComparator_" local-name="zOrderComparator_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A stateless comparator function to use for z-order sorting of spatial objects - see Array.prototype.sort().</p></prose>
                </description>
                <param name="first">
                  <types>
                    <type ref="H.map.Spatial"/>
                  </types>
                  <ctype>
                    <name name="H.map.Spatial"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="second">
                  <types>
                    <type ref="H.map.Spatial"/>
                  </types>
                  <ctype>
                    <name name="H.map.Spatial"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#requestObjects_" local-name="requestObjects_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method returns the objects that may draw on this tile in correct z-order</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the spatial objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#getProviderInvalidations_" local-name="getProviderInvalidations_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Returns the invalidations for all spatial objects of the provider</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.provider.Invalidations"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#checkInvalidations_" local-name="checkInvalidations_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method checks invalidations on the object provider and invalidates
this tile's information. In certain circumstances we can keep information
on the tile that is expensive to retrieve. If only style information on the
objects changes we can keep the spatially projected and clipped data for
faster redrawing of the tile.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.SpatialTile#isCanvasValid" local-name="isCanvasValid" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method checks if this spatial tile's canvas element is still valid and returns
a boolean value indicating whether the canvas element can still be used
for tile placement or whether it needs to be redrawn.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if the canvas element is still valid, otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#isDataValid" local-name="isDataValid" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method checks if this spatial tile's render data is still valid and returns a
boolean value indicating whether the projected, clipped and simplified spatial
information can still be used.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if the rendering data is still valid, otherwise false</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#releaseCanvas" local-name="releaseCanvas" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method releases this tile's canvas element and returns it for pooling</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <name name="HTMLCanvasElement"/>
                  </ctype>
                  <description>
                    <prose><p>the canvas element</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#releaseData" local-name="releaseData" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Releases this tile's rendering data.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#getObjects" local-name="getObjects" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>Returns the spatial objects considered by this tile. The array is sorted according to their drawing
order, the topmost object has an index #0 in returned array.
This function is a temporarly solution to be able to iterate over the objects of a tile,
needed for remote objects like metaInfo and venue to retain and release objects!</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Returns visible objects under the given tile x/y coordinates. Array is sorted according to their drawing
order, topmost object has an index #0 in returned array.</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x pixel coordinate on the tile</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y pixel coordinate on the tile</p></prose>
                  </description>
                </param>
                <param name="opt_topMostOnly" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>optional flag, if set method returns array with single element that is located
on top</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>array of map objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#render" local-name="render" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method renders the object data on to this tile and returns a boolean value whether
anything was rendered on the provided canvas.</p></prose>
                </description>
                <param name="canvas">
                  <types>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <name name="HTMLCanvasElement"/>
                  </ctype>
                  <description>
                    <prose><p>the canvas on which this tile will paint</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>true if the any object was rendered, false otherwise</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#renderPolyline_" local-name="renderPolyline_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method renders a not closed spatial object (polyline).</p></prose>
                </description>
                <param name="object">
                  <types>
                    <type ref="H.map.Spatial"/>
                  </types>
                  <ctype>
                    <name name="H.map.Spatial"/>
                  </ctype>
                  <description>
                    <prose><p>the polyline</p></prose>
                  </description>
                </param>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>the target context</p></prose>
                  </description>
                </param>
                <param name="style">
                  <types>
                    <type ref="H.map.SpatialStyle"/>
                  </types>
                  <ctype>
                    <name name="H.map.SpatialStyle"/>
                  </ctype>
                  <description>
                    <prose><p>The style to apply</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTile#renderPolygon_" local-name="renderPolygon_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method renders a polygon onto this tile.</p></prose>
                </description>
                <param name="object">
                  <types>
                    <type ref="H.map.Spatial"/>
                  </types>
                  <ctype>
                    <name name="H.map.Spatial"/>
                  </ctype>
                  <description>
                    <prose><p>the polygon to render</p></prose>
                  </description>
                </param>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>the canvas context on which to render</p></prose>
                  </description>
                </param>
                <param name="style">
                  <types>
                    <type ref="H.map.SpatialStyle"/>
                  </types>
                  <ctype>
                    <name name="H.map.SpatialStyle"/>
                  </ctype>
                  <description>
                    <prose><p>The style to apply</p></prose>
                  </description>
                </param>
              </method>
              <property name="H.map.provider.SpatialTile.simplifyEpsilon_" local-name="simplifyEpsilon_" access="private" scope="static" virtual="false" published="false" exported="false" constant="true">
                <description>
                  <prose><p>The epsilon value to use for Douglas-Peucker simplification {@see H.math.simplifyDP}</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTile.simplify_" local-name="simplify_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Simplifies an arbitrary number of x,y strips using Douglas-Peucker line
simplification algorithm.</p></prose>
                </description>
                <param name="data">
                  <types>
                    <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.math.Point"/>
                          </app>
                        </typed>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of alternating x,y arrays</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.math.Point"/>
                          </app>
                        </typed>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the simplified list</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile.setStrokeStyle_" local-name="setStrokeStyle_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method applies the stroking related properties of a spatial style to the a canvas context</p></prose>
                </description>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>The rendering context</p></prose>
                  </description>
                </param>
                <param name="style">
                  <types>
                    <type ref="H.map.SpatialStyle"/>
                  </types>
                  <ctype>
                    <name name="H.map.SpatialStyle"/>
                  </ctype>
                  <description>
                    <prose><p>The style to apply</p></prose>
                  </description>
                </param>
                <param name="pixelRatio">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>whether the style is effectively stroking and was applied to the given context</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile.setFillStyle_" local-name="setFillStyle_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method applies the filling related properties of a spatial style to the a canvas context</p></prose>
                </description>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>The rendering context</p></prose>
                  </description>
                </param>
                <param name="style">
                  <types>
                    <type ref="H.map.SpatialStyle"/>
                  </types>
                  <ctype>
                    <name name="H.map.SpatialStyle"/>
                  </ctype>
                  <description>
                    <prose><p>The style to apply</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>whether the style is effectively filling and was applied to the given context</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile.drawPaths_" local-name="drawPaths_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method draws a list of x,y array as paths on a rendering context.
Using opt_start and opt_end you can filter out which geometries you want to skip</p></prose>
                </description>
                <param name="data">
                  <types>
                    <type ref="Array.&lt;Array.&lt;number&gt;&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="number"/>
                          </app>
                        </typed>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>the x,y arrays to render</p></prose>
                  </description>
                </param>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>The rendering context</p></prose>
                  </description>
                </param>
                <param name="isClosed">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Whether to close and fill each path</p></prose>
                  </description>
                </param>
                <param name="isStroked">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Whether to stroke each path</p></prose>
                  </description>
                </param>
                <param name="isFilled">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Whether to fill each path</p></prose>
                  </description>
                </param>
                <param name="opt_start" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>Inclusive first geometry index to draw</p></prose>
                  </description>
                </param>
                <param name="opt_end" optional="true">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>Exclusive last geometry index to draw</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTile.getStripLength_" local-name="getStripLength_" access="private" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The method will compute the length of a strip in pixel, used by renderArrows_() for each strip</p></prose>
                </description>
                <param name="strip">
                  <types>
                    <type ref="Array.&lt;H.math.Point&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.math.Point"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>The strip to compute the length for.</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>the length of the strip in pixel.</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTile#renderArrows_" local-name="renderArrows_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The method will draw arrows on top of a polyline to visualize the direction (e.g. for routes).
It's triggered by renderPolyline_()</p></prose>
                </description>
                <param name="ctx">
                  <types>
                    <type ref="CanvasRenderingContext2D"/>
                  </types>
                  <ctype>
                    <name name="CanvasRenderingContext2D"/>
                  </ctype>
                  <description>
                    <prose><p>The target context</p></prose>
                  </description>
                </param>
                <param name="strips">
                  <types>
                    <type ref="Array.&lt;Array.&lt;H.math.Point&gt;&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.math.Point"/>
                          </app>
                        </typed>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>The strips used to draw arrows.</p></prose>
                  </description>
                </param>
                <param name="arrows">
                  <types>
                    <type ref="H.map.ArrowStyle"/>
                  </types>
                  <ctype>
                    <name name="H.map.ArrowStyle"/>
                  </ctype>
                  <description>
                    <prose><p>The style definition for the arrows</p></prose>
                  </description>
                </param>
                <param name="lineWidth">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The line width of the polyline</p></prose>
                  </description>
                </param>
              </method>
              <property name="H.map.provider.SpatialTile#key" local-name="key" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#key">
                <description>
                  <prose><p>Unique tile key generated by provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTile#x" local-name="x" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#x">
                <description>
                  <prose><p>Tile column</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTile#y" local-name="y" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#y">
                <description>
                  <prose><p>Tile row</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTile#z" local-name="z" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#z">
                <description>
                  <prose><p>Tile zoom level</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTile#data" local-name="data" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#data">
                <description>
                  <prose><p>Tile data (an image for example)</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTile#valid" local-name="valid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Tile#valid">
                <description>
                  <prose><p>This property holds a boolean flag indicating whether this tile is
still valid (true) or whether it should be re-fetched (false)</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
            </class>
            <class name="H.map.provider.Provider" local-name="Provider" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>A Provider defines an object which works as a database for the map.
Providers can exists in different forms they can implement client
side object storage or they can request data from the remote service.</p></prose>
              </description>
              <extends>
                <type ref="H.util.EventTarget"/>
              </extends>
              <constructor local-name="Provider" name="H.map.provider.Provider">
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.provider.Provider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Provider.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <event name="H.map.provider.Provider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.Provider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.Provider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.Provider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.Provider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.Provider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.Provider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Provider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method disposes the ImageTileProvider</p></prose>
                </description>
              </method>
              <method name="H.map.provider.Provider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.provider.Provider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize the Povider</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.Provider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.Provider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The max maximal supported zoom level, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <method name="H.map.provider.Provider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Provider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.Provider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Provider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Provider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.Provider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.Provider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.TileProvider" local-name="TileProvider" access="public" scope="static" virtual="true" published="true" exported="true">
              <description>
                <prose><p>TileProvider is an abstract class to provide data on a tile basis</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.Provider"/>
              </extends>
              <constructor local-name="TileProvider" name="H.map.provider.TileProvider">
                <param name="options">
                  <types>
                    <type ref="H.map.provider.TileProvider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider.Options"/>
                  </ctype>
                  <description>
                    <prose><p>The options to instantiate this TileProvider</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.TileProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="true" published="true" exported="false">
                <description>
                  <prose><p>Request data on a tile basis</p></prose>
                </description>
              </property>
              <property name="H.map.provider.TileProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="true" published="true" exported="false">
                <description>
                  <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
                </description>
              </property>
              <property name="H.map.provider.TileProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="true" published="true" exported="false">
                <description>
                  <prose><p>Cancels tile from being requested using a tile-key</p></prose>
                </description>
              </property>
              <method name="H.map.provider.TileProvider#createTileInternal" local-name="createTileInternal" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>This method creates a tile object with given parameters</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile coordinate (zoom)</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="HTMLImageElement"/>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>data for the tile</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="Object.&lt;string,*&gt;="/>
                  </types>
                  <ctype>
                    <typed optional="true">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>free form options object. These options are meant to
  be used in tile specific rendering cases</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.TileProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The z tile coordinate (zoom level)</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>string</p></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.provider.TileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize the TilePovider</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="tileSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.TileProvider.Options#tileSize" local-name="tileSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The size of a tile as edge length in pixels.
     It must be 2^n where n is in range <code>[0 ... 30]</code>, default is <code>256</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.TileProvider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.TileProvider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The max maximal supported zoom level, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <event name="H.map.provider.TileProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.TileProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.TileProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.TileProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.TileProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.TileProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.TileProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.TileProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#disposeInternal">
                <description>
                  <prose><p>This method disposes the ImageTileProvider</p></prose>
                </description>
              </method>
              <method name="H.map.provider.TileProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.TileProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.TileProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.TileProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.TileProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.TileProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.TileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.TileProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.SpatialTileProvider" local-name="SpatialTileProvider" access="public" scope="static" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This tile provider renders spatial map objects (polylines and polygons) to tiles. Every tile represents a part of
the spatial object which is clipped according to requested tile coordinates.</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.TileProvider"/>
              </extends>
              <constructor local-name="SpatialTileProvider" name="H.map.provider.SpatialTileProvider">
                <param name="objectProvider">
                  <types>
                    <type ref="H.map.provider.ObjectProvider"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.ObjectProvider"/>
                  </ctype>
                  <description>
                    <prose><p>The ObjectProvider which provides the objects to paint</p></prose>
                  </description>
                </param>
                <param name="options">
                  <types>
                    <type ref="H.map.provider.SpatialTileProvider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.SpatialTileProvider.Options"/>
                  </ctype>
                  <description>
                    <prose><p>The options for this SpatialTileProvider</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.SpatialTileProvider#lastProcessSync_" local-name="lastProcessSync_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTileProvider#onObjectProviderUpdate_" local-name="onObjectProviderUpdate_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A listener for 'update' events from the ObjectProvider, which dispatches an 'update' event on this
SpatialTileProvider if the target is a map object of type 'SPATIAL'</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                  </types>
                  <ctype>
                    <name name="H.util.Event"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#processSync" local-name="processSync" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Triggers the provider to render tiles synchronously.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.SpatialTileProvider#queueForRendering_" local-name="queueForRendering_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Queues a tile request for rendering</p></prose>
                </description>
                <param name="tileKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#processRenderTask_" local-name="processRenderTask_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The funtion to process a task of the render queue</p></prose>
                </description>
                <param name="task">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#onRenderTaskDone_" local-name="onRenderTaskDone_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Callback function for the async queue's process function</p></prose>
                </description>
                <param name="task">
                  <types>
                    <type ref="H.util.AsyncQueue.Task"/>
                  </types>
                  <ctype>
                    <name name="H.util.AsyncQueue.Task"/>
                  </ctype>
                  <description>
                    <prose><p>the task</p></prose>
                  </description>
                </param>
                <param name="result">
                  <types>
                    <type ref="*"/>
                  </types>
                  <ctype>
                    <all/>
                  </ctype>
                  <description>
                    <prose><p>the result of the task</p></prose>
                  </description>
                </param>
                <param name="opt_error" optional="true">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>an optional error</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#onTileDropped_" local-name="onTileDropped_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Callback for the tile-with-canvas cache</p></prose>
                </description>
                <param name="tileKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>the id of the dropped tile</p></prose>
                  </description>
                </param>
                <param name="tile">
                  <types>
                    <type ref="H.map.provider.SpatialTile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.SpatialTile"/>
                  </ctype>
                  <description>
                    <prose><p>the dropped tile</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#onDataDropped_" local-name="onDataDropped_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Callback for the tile-with-renderData cache</p></prose>
                </description>
                <param name="tileKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>the id of the dropped tile</p></prose>
                  </description>
                </param>
                <param name="tile">
                  <types>
                    <type ref="H.map.provider.SpatialTile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.SpatialTile"/>
                  </ctype>
                  <description>
                    <prose><p>the dropped tile</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#popCanvas_" local-name="popCanvas_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method pops a canvas from the canvas pool or creates a new one if no
canvas elements are available in the pool.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <name name="HTMLCanvasElement"/>
                  </ctype>
                  <description>
                    <prose><p>a canvas</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTileProvider#disposeInternal" local-name="disposeInternal" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Implementation of <link ref="H.util.Disposable#disposeInternal" /></p></prose>
                </description>
              </method>
              <typedef name="H.map.provider.SpatialTileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Configuration object which can be use to initialize the SpatialTileProvider.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="tileSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="tileCacheSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="dataCacheSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="pixelRatio"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.SpatialTileProvider.Options#tileSize" local-name="tileSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the size of the tiles rendered by this layer
 for polylines and polygons (must be power of 2, default is <code>256</code>)</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.SpatialTileProvider.Options#tileCacheSize" local-name="tileCacheSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the number of fully rendered spatial tiles
 that are cached for immediate reuse, default is <code>32</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.SpatialTileProvider.Options#dataCacheSize" local-name="dataCacheSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>the number of tiles to cache which have
 render data only, default is <code>512</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.SpatialTileProvider.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays</p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                </property>
              </typedef>
              <property name="H.map.provider.SpatialTileProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#requestTile">
                <description>
                  <prose><p>Request data on a tile basis</p></prose>
                </description>
              </property>
              <property name="H.map.provider.SpatialTileProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTile">
                <description>
                  <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
                </description>
              </property>
              <property name="H.map.provider.SpatialTileProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTileByKey">
                <description>
                  <prose><p>Cancels tile from being requested using a tile-key</p></prose>
                </description>
              </property>
              <method name="H.map.provider.SpatialTileProvider#createTileInternal" local-name="createTileInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.TileProvider#createTileInternal">
                <description>
                  <prose><p>This method creates a tile object with given parameters</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile coordinate (zoom)</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="HTMLImageElement"/>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>data for the tile</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="Object.&lt;string,*&gt;="/>
                  </types>
                  <ctype>
                    <typed optional="true">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>free form options object. These options are meant to
  be used in tile specific rendering cases</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTileProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.TileProvider#getTileKey">
                <description>
                  <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The z tile coordinate (zoom level)</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>string</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.SpatialTileProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.SpatialTileProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.SpatialTileProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.SpatialTileProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTileProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.SpatialTileProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.SpatialTileProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTileProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.SpatialTileProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.SpatialTileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.SpatialTileProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.RemoteTileProvider" local-name="RemoteTileProvider" access="public" scope="static" virtual="true" published="true" exported="true">
              <description>
                <prose><p>RemoteTileProvider is an abstract class which should be used by classes
implementing data provision on a tile basis. Every child class needs to
implement 'requestInternal' (to request remote tile) and 'getCache' (to
provide configured cache object were tiled data is being cached)</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.TileProvider"/>
              </extends>
              <constructor local-name="RemoteTileProvider" name="H.map.provider.RemoteTileProvider">
                <param name="options">
                  <types>
                    <type ref="H.map.provider.TileProvider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.TileProvider.Options"/>
                  </ctype>
                  <description>
                    <prose><p>The options to instantiate this TileProvider</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.RemoteTileProvider#pending_" local-name="pending_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>A map of currently requested tiles (by tile key)</p></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, H.util.ICancelable&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="H.util.ICancelable"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.map.provider.RemoteTileProvider#cache_" local-name="cache_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Tile cache.</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache"/>
                </types>
                <ctype>
                  <name name="H.util.Cache"/>
                </ctype>
              </property>
              <property name="H.map.provider.RemoteTileProvider.cache" local-name="cache" access="public" scope="static" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>RemoteTileProvider cache instance, shared with all remote tile providers</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache"/>
                </types>
                <ctype>
                  <name name="H.util.Cache"/>
                </ctype>
              </property>
              <method name="H.map.provider.RemoteTileProvider#getCache" local-name="getCache" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method returns cache which should be used to store tiles</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.Cache"/>
                  </types>
                  <ctype>
                    <name name="H.util.Cache"/>
                  </ctype>
                  <description>
                    <prose><p>cache</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.RemoteTileProvider#cacheFilter" local-name="cacheFilter" access="public" scope="instance" virtual="false" published="false" exported="true">
                <description>
                  <prose><p>This method is used to remove all cache entries for this particular provider.
It is passed as filter to cache removeAll method.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicating if the element should be removed</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.RemoteTileProvider#requestInternal" local-name="requestInternal" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>This method request tile from remote service</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The row number of the tile</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The column number of the tile</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="onResponse">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <union>
                          <type>
                            <typed>
                              <base>
                                <name name="Array"/>
                              </base>
                              <app>
                                <name name="H.map.Object"/>
                              </app>
                            </typed>
                          </type>
                          <type>
                            <name name="HTMLImageElement"/>
                          </type>
                          <type>
                            <name name="HTMLCanvasElement"/>
                          </type>
                          <type>
                            <null/>
                          </type>
                        </union>
                      </param>
                      <param>
                        <all optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called after response arrives</p></prose>
                  </description>
                </param>
                <param name="onError">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="string" optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called in case of communication error</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.ICancelable"/>
                  </types>
                  <ctype>
                    <name name="H.util.ICancelable"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.RemoteTileProvider#dummyCancelable_" local-name="dummyCancelable_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Dummy cancelable object used in case if requestInternal onSuccess was called synchronously</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.provider.RemoteTileProvider#reload" local-name="reload" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>This method instructs the provider to reload data from it's source.</p>
<p>Two reload modes are possible:</p>
<ul>
<li><code>hard</code>: A hard immediately removes the cached tiles from
the tile cache and forces the provider to re-fetch the tiles. Currently
cached tiles will not be used for rendering.</li>
<li><code>soft</code>: A soft invalidation only marks tiles as invalid and requests
the tiles to be re-fetched at the earliest convenience. The provider does
not invalidate the cache immediately in this case. This means that cached
tiles can still be rendered while the updated tiles are fetched.</li>
</ul></prose>
                </description>
                <param name="hard">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>a boolean flag indicating whether to invalidate in
 <code>hard</code> mode (<code>true</code>) or in <code>soft</code> mode (<code>false</code>);</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#invalidateEach" local-name="invalidateEach" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method sets the 'valid' flag of each cached tile it is called on to
<code>false</code>.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose><p>the tile</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>This method disposes the RemoteTileProvider</p></prose>
                </description>
              </method>
              <typedef name="H.map.provider.RemoteTileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize the RemoteTileProvider object.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.RemoteTileProvider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.RemoteTileProvider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The max maximal supported zoom level, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <property name="H.map.provider.RemoteTileProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#requestTile">
                <description>
                  <prose><p>Request data on a tile basis</p></prose>
                </description>
              </property>
              <property name="H.map.provider.RemoteTileProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTile">
                <description>
                  <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
                </description>
              </property>
              <property name="H.map.provider.RemoteTileProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTileByKey">
                <description>
                  <prose><p>Cancels tile from being requested using a tile-key</p></prose>
                </description>
              </property>
              <method name="H.map.provider.RemoteTileProvider#createTileInternal" local-name="createTileInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.TileProvider#createTileInternal">
                <description>
                  <prose><p>This method creates a tile object with given parameters</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile coordinate (zoom)</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="HTMLImageElement"/>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>data for the tile</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="Object.&lt;string,*&gt;="/>
                  </types>
                  <ctype>
                    <typed optional="true">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>free form options object. These options are meant to
  be used in tile specific rendering cases</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.RemoteTileProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.TileProvider#getTileKey">
                <description>
                  <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The z tile coordinate (zoom level)</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>string</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.RemoteTileProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.RemoteTileProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.RemoteTileProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.RemoteTileProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.RemoteTileProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.RemoteTileProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.RemoteTileProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.RemoteTileProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.RemoteTileProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.RemoteTileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.RemoteTileProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.ImageTileProvider" local-name="ImageTileProvider" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>An ImageTileProvider uses network service to provide bitmap images as tiles.</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.RemoteTileProvider"/>
              </extends>
              <constructor local-name="ImageTileProvider" name="H.map.provider.ImageTileProvider">
                <param name="options">
                  <types>
                    <type ref="H.map.provider.ImageTileProvider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.ImageTileProvider.Options"/>
                  </ctype>
                  <description>
                    <prose><p>configuration for tile provider</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.ImageTileProvider#getURL_" local-name="getURL_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Creates the URL for a a specified tile</p></prose>
                </description>
              </property>
              <property name="H.map.provider.ImageTileProvider#crossOrigin_" local-name="crossOrigin_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>Current cross-origin settings for loading images</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <property name="H.map.provider.ImageTileProvider#tileSize" local-name="tileSize" access="public" scope="instance" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Size of a tile image supported by the provider</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <typedef name="H.map.provider.ImageTileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize the ImageTileProvider object.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="getURL"/>
                      </key>
                      <value>
                        <func>
                          <param>
                            <name name="number"/>
                          </param>
                          <param>
                            <name name="number"/>
                          </param>
                          <param>
                            <name name="number"/>
                          </param>
                          <return>
                            <name name="string"/>
                          </return>
                        </func>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="crossOrigin"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="string"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="tileSize"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.ImageTileProvider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.ImageTileProvider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The max maximal supported zoom level, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.ImageTileProvider.Options#getURL" local-name="getURL" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>The function to create an URL for s specified tile</p></prose>
                  </description>
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                    </func>
                  </ctype>
                </property>
                <property name="H.map.provider.ImageTileProvider.Options#crossOrigin" local-name="crossOrigin" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The string to be set for the crossOrigin attribute for loaded images</p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.ImageTileProvider.Options#tileSize" local-name="tileSize" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The size of a single tile in pixels, default is <code>256</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <property name="H.map.provider.ImageTileProvider#pending_" local-name="pending_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#pending_">
                <description>
                  <prose><p>A map of currently requested tiles (by tile key)</p></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, H.util.ICancelable&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="H.util.ICancelable"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.map.provider.ImageTileProvider#cache_" local-name="cache_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#cache_">
                <description>
                  <prose><p>Tile cache.</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache"/>
                </types>
                <ctype>
                  <name name="H.util.Cache"/>
                </ctype>
              </property>
              <method name="H.map.provider.ImageTileProvider#getCache" local-name="getCache" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#getCache">
                <description>
                  <prose><p>This method returns cache which should be used to store tiles</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.Cache"/>
                  </types>
                  <ctype>
                    <name name="H.util.Cache"/>
                  </ctype>
                  <description>
                    <prose><p>cache</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ImageTileProvider#cacheFilter" local-name="cacheFilter" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.RemoteTileProvider#cacheFilter">
                <description>
                  <prose><p>This method is used to remove all cache entries for this particular provider.
It is passed as filter to cache removeAll method.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicating if the element should be removed</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ImageTileProvider#requestInternal" local-name="requestInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#requestInternal">
                <description>
                  <prose><p>This method request tile from remote service</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The row number of the tile</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The column number of the tile</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="onResponse">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <union>
                          <type>
                            <typed>
                              <base>
                                <name name="Array"/>
                              </base>
                              <app>
                                <name name="H.map.Object"/>
                              </app>
                            </typed>
                          </type>
                          <type>
                            <name name="HTMLImageElement"/>
                          </type>
                          <type>
                            <name name="HTMLCanvasElement"/>
                          </type>
                          <type>
                            <null/>
                          </type>
                        </union>
                      </param>
                      <param>
                        <all optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called after response arrives</p></prose>
                  </description>
                </param>
                <param name="onError">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="string" optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called in case of communication error</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.ICancelable"/>
                  </types>
                  <ctype>
                    <name name="H.util.ICancelable"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.ImageTileProvider#dummyCancelable_" local-name="dummyCancelable_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#dummyCancelable_">
                <description>
                  <prose><p>Dummy cancelable object used in case if requestInternal onSuccess was called synchronously</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.provider.ImageTileProvider#reload" local-name="reload" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#reload">
                <description>
                  <prose><p>This method instructs the provider to reload data from it's source.</p>
<p>Two reload modes are possible:</p>
<ul>
<li><code>hard</code>: A hard immediately removes the cached tiles from
the tile cache and forces the provider to re-fetch the tiles. Currently
cached tiles will not be used for rendering.</li>
<li><code>soft</code>: A soft invalidation only marks tiles as invalid and requests
the tiles to be re-fetched at the earliest convenience. The provider does
not invalidate the cache immediately in this case. This means that cached
tiles can still be rendered while the updated tiles are fetched.</li>
</ul></prose>
                </description>
                <param name="hard">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>a boolean flag indicating whether to invalidate in
 <code>hard</code> mode (<code>true</code>) or in <code>soft</code> mode (<code>false</code>);</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#invalidateEach" local-name="invalidateEach" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#invalidateEach">
                <description>
                  <prose><p>This method sets the 'valid' flag of each cached tile it is called on to
<code>false</code>.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose><p>the tile</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#disposeInternal">
                <description>
                  <prose><p>This method disposes the RemoteTileProvider</p></prose>
                </description>
              </method>
              <property name="H.map.provider.ImageTileProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#requestTile">
                <description>
                  <prose><p>Request data on a tile basis</p></prose>
                </description>
              </property>
              <property name="H.map.provider.ImageTileProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTile">
                <description>
                  <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
                </description>
              </property>
              <property name="H.map.provider.ImageTileProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTileByKey">
                <description>
                  <prose><p>Cancels tile from being requested using a tile-key</p></prose>
                </description>
              </property>
              <method name="H.map.provider.ImageTileProvider#createTileInternal" local-name="createTileInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.TileProvider#createTileInternal">
                <description>
                  <prose><p>This method creates a tile object with given parameters</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile coordinate (zoom)</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="HTMLImageElement"/>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>data for the tile</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="Object.&lt;string,*&gt;="/>
                  </types>
                  <ctype>
                    <typed optional="true">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>free form options object. These options are meant to
  be used in tile specific rendering cases</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ImageTileProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.TileProvider#getTileKey">
                <description>
                  <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The z tile coordinate (zoom level)</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>string</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.ImageTileProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.ImageTileProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.ImageTileProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.ImageTileProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.ImageTileProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.ImageTileProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.ImageTileProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ImageTileProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ImageTileProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ImageTileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.ImageTileProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.ObjectProvider" local-name="ObjectProvider" access="public" scope="static" virtual="true" published="true" exported="true">
              <description>
                <prose><p>An abstract class to manage and provide map objects (Marker, Polyline, Polygon)</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.Provider"/>
              </extends>
              <constructor local-name="ObjectProvider" name="H.map.provider.ObjectProvider">
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.provider.Provider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Provider.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.ObjectProvider#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The invalidations of this provider, seperated by object types</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.provider.Invalidations&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.provider.Invalidations"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <method name="H.map.provider.ObjectProvider#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Returns the accumulate invalidations of this provider's objects that have occurred.</p></prose>
                </description>
                <param name="opt_type" optional="true">
                  <types>
                    <type ref="H.map.Object.Type"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object.Type" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The type of objects to consider for the invalidations. If undefined, all types are taken into account.</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Invalidations"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#invalidateObject" local-name="invalidateObject" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>To signal to this provider that a map object has been changed.
The method updates the Invalidations of this provider and the given map object and triggers dispatchUpdate()</p></prose>
                </description>
                <param name="mapObject">
                  <types>
                    <type ref="H.map.Object"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>The map object to be invalidated</p></prose>
                  </description>
                </param>
                <param name="changes">
                  <types>
                    <type ref="H.math.BitMask"/>
                  </types>
                  <ctype>
                    <name name="H.math.BitMask"/>
                  </ctype>
                  <description>
                    <prose><p>The flags indicating the types of occurred changes</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#providesSpatials" local-name="providesSpatials" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether this provider is currently providing spatial map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Spatials.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#requestSpatials" local-name="requestSpatials" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>Returns all polyline, polygon, circle and rect objects which intersect with the provided area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#requestSpatialsByTile" local-name="requestSpatialsByTile" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>Returns the spatial objects which intersect the given tile</p></prose>
                </description>
                <param name="tile">
                  <types>
                    <type ref="H.map.provider.SpatialTile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.SpatialTile"/>
                  </ctype>
                  <description>
                    <prose><p>The tile for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#providesMarkers" local-name="providesMarkers" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether this provider is currently providing Marker map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Markers.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#requestMarkers" local-name="requestMarkers" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>Returns all Marker map objects which intersect with the provided rectangular area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Marker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Marker"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#providesDomMarkers" local-name="providesDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether this provider is currently providing DomMarker map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Markers.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#requestDomMarkers" local-name="requestDomMarkers" access="public" scope="instance" virtual="true" published="true" exported="true">
                <description>
                  <prose><p>Returns all DomMarker map objects which intersect with the provided rectangular area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.DomMarker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.DomMarker"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.ObjectProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.ObjectProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.ObjectProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.ObjectProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.ObjectProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.ObjectProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.ObjectProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#disposeInternal">
                <description>
                  <prose><p>This method disposes the ImageTileProvider</p></prose>
                </description>
              </method>
              <method name="H.map.provider.ObjectProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.ObjectProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.ObjectProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.ObjectProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.LocalObjectProvider" local-name="LocalObjectProvider" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>A LocalObjectProvider acts as a database for map objects. It provides functionality to fetch visible objects within
concrete geographical bounds and zoom levels.
All objects are organized within a hierarchical group structure.
An object can be added to the provider by adding it to a group within this structure. The root group of the provider
can be fetched via <link ref="H.map.provider.LocalObjectProvider#getRootGroup" />.
A <link ref="H.Map" /> has already its own LocalObjectProvider and provides functionality to add and remove objects.
Only in advanced use cases there is a need to create an additional LocalObjectProvider.</p></prose>
                <example>  // Create your own LocalObjectProvider and add some hierarchical objects:

  myProvider = new H.map.provider.LocalObjectProvider();
  myMap.addLayer(new H.map.layer.ObjectLayer(myProvider));
  hereDotCom = {lat: 52.5308, lng: 13.3852};
  myGroup = new H.map.Group();
  myGroup.addObject(new H.map.Circle(hereDotCom, 35));
  myProvider.getRootGroup().addObjects([
    myGroup,
    new H.map.Marker(hereDotCom)
  ]);
  myMap.setCenter(hereDotCom).setZoom(18);</example>
              </description>
              <extends>
                <type ref="H.map.provider.ObjectProvider"/>
              </extends>
              <constructor local-name="LocalObjectProvider" name="H.map.provider.LocalObjectProvider">
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="H.map.provider.Provider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Provider.Options" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.LocalObjectProvider#rootGroup_" local-name="rootGroup_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The root group of this provider.</p></prose>
                </description>
                <types>
                  <type ref="H.map.Group"/>
                </types>
                <ctype>
                  <name name="H.map.Group"/>
                </ctype>
              </property>
              <property name="H.map.provider.LocalObjectProvider#spatialTree_" local-name="spatialTree_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The quad tree for all spatial objects</p></prose>
                </description>
                <types>
                  <type ref="H.geo.QuadTree"/>
                </types>
                <ctype>
                  <name name="H.geo.QuadTree"/>
                </ctype>
              </property>
              <property name="H.map.provider.LocalObjectProvider#markerTree_" local-name="markerTree_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The quad tree for all Marker map objects</p></prose>
                </description>
                <types>
                  <type ref="H.geo.QuadTree"/>
                </types>
                <ctype>
                  <name name="H.geo.QuadTree"/>
                </ctype>
              </property>
              <property name="H.map.provider.LocalObjectProvider#domMarkerTree_" local-name="domMarkerTree_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>The quad tree for all DomMarker map objects</p></prose>
                </description>
                <types>
                  <type ref="H.geo.QuadTree"/>
                </types>
                <ctype>
                  <name name="H.geo.QuadTree"/>
                </ctype>
              </property>
              <method name="H.map.provider.LocalObjectProvider#getRootGroup" local-name="getRootGroup" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Returns the root group of this provider.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.map.Group"/>
                  </types>
                  <ctype>
                    <name name="H.map.Group"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#addObject" local-name="addObject" access="public" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To add an object to this provider's database.
Must NOT published, API internally use only!
It must not called directly. It is invoked by H.map.Object#setProvider() which checks beforehand,
that it is an <link ref="H.map.Object" /> instance.</p></prose>
                </description>
                <param name="object">
                  <types>
                    <type ref="H.map.Object"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>The object to add</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#removeObject" local-name="removeObject" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>To remove an object from this provider's database.
It must not called directly. It is invoked by H.map.Group which checks beforehand,
that it is an <link ref="H.map.Object" /> instance and its provider is this provider.</p></prose>
                </description>
                <param name="object">
                  <types>
                    <type ref="H.map.Object"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>The object to remove</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#requestObjects_" local-name="requestObjects_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>To request objects from the specified geo database (tree)</p></prose>
                </description>
                <param name="tree">
                  <types>
                    <type ref="H.geo.QuadTree"/>
                  </types>
                  <ctype>
                    <name name="H.geo.QuadTree"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="zoom">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Object&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Object"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.LocalObjectProvider#invalidations_" local-name="invalidations_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.ObjectProvider#invalidations_">
                <description>
                  <prose><p>The invalidations of this provider, seperated by object types</p></prose>
                </description>
                <types>
                  <type ref="Array.&lt;H.map.provider.Invalidations&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Array"/>
                    </base>
                    <app>
                      <name name="H.map.provider.Invalidations"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <method name="H.map.provider.LocalObjectProvider#getInvalidations" local-name="getInvalidations" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.ObjectProvider#getInvalidations">
                <description>
                  <prose><p>Returns the accumulate invalidations of this provider's objects that have occurred.</p></prose>
                </description>
                <param name="opt_type" optional="true">
                  <types>
                    <type ref="H.map.Object.Type"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object.Type" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The type of objects to consider for the invalidations. If undefined, all types are taken into account.</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Invalidations"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Invalidations"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#invalidateObject" local-name="invalidateObject" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.ObjectProvider#invalidateObject">
                <description>
                  <prose><p>To signal to this provider that a map object has been changed.
The method updates the Invalidations of this provider and the given map object and triggers dispatchUpdate()</p></prose>
                </description>
                <param name="mapObject">
                  <types>
                    <type ref="H.map.Object"/>
                  </types>
                  <ctype>
                    <name name="H.map.Object" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>The map object to be invalidated</p></prose>
                  </description>
                </param>
                <param name="changes">
                  <types>
                    <type ref="H.math.BitMask"/>
                  </types>
                  <ctype>
                    <name name="H.math.BitMask"/>
                  </ctype>
                  <description>
                    <prose><p>The flags indicating the types of occurred changes</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#providesSpatials" local-name="providesSpatials" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.ObjectProvider#providesSpatials">
                <description>
                  <prose><p>Checks whether this provider is currently providing spatial map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Spatials.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#requestSpatials" local-name="requestSpatials" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.ObjectProvider#requestSpatials">
                <description>
                  <prose><p>Returns all polyline, polygon, circle and rect objects which intersect with the provided area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#requestSpatialsByTile" local-name="requestSpatialsByTile" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.ObjectProvider#requestSpatialsByTile">
                <description>
                  <prose><p>Returns the spatial objects which intersect the given tile</p></prose>
                </description>
                <param name="tile">
                  <types>
                    <type ref="H.map.provider.SpatialTile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.SpatialTile"/>
                  </ctype>
                  <description>
                    <prose><p>The tile for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Spatial&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Spatial"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#providesMarkers" local-name="providesMarkers" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.ObjectProvider#providesMarkers">
                <description>
                  <prose><p>Checks whether this provider is currently providing Marker map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Markers.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#requestMarkers" local-name="requestMarkers" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.ObjectProvider#requestMarkers">
                <description>
                  <prose><p>Returns all Marker map objects which intersect with the provided rectangular area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.Marker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Marker"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#providesDomMarkers" local-name="providesDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.ObjectProvider#providesDomMarkers">
                <description>
                  <prose><p>Checks whether this provider is currently providing DomMarker map objects.
A concrete implementation of ObjectProvider must override it if it currently provides Markers.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#requestDomMarkers" local-name="requestDomMarkers" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.ObjectProvider#requestDomMarkers">
                <description>
                  <prose><p>Returns all DomMarker map objects which intersect with the provided rectangular area.</p></prose>
                </description>
                <param name="geoRect">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>A rectangular area in geo space to intersect with</p></prose>
                  </description>
                </param>
                <param name="zoomLevel">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the objects are requested</p></prose>
                  </description>
                </param>
                <param name="visiblesOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only invisible objects are to be considered</p></prose>
                  </description>
                </param>
                <param name="cacheOnly">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>Indicates whether only cached objects are to be considered</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="Array.&lt;H.map.DomMarker&gt;"/>
                  </types>
                  <ctype>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.DomMarker"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of intersecting objects</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.LocalObjectProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.LocalObjectProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.LocalObjectProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.LocalObjectProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.LocalObjectProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.LocalObjectProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.LocalObjectProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#disposeInternal">
                <description>
                  <prose><p>This method disposes the ImageTileProvider</p></prose>
                </description>
              </method>
              <method name="H.map.provider.LocalObjectProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.LocalObjectProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.LocalObjectProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.LocalObjectProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
            <class name="H.map.provider.MarkerTileProvider" local-name="MarkerTileProvider" access="public" scope="static" virtual="false" published="true" exported="true">
              <description>
                <prose><p>A MarkerTileProvider uses network service to provide markers on tile basis.</p></prose>
              </description>
              <extends>
                <type ref="H.map.provider.RemoteTileProvider"/>
              </extends>
              <constructor local-name="MarkerTileProvider" name="H.map.provider.MarkerTileProvider">
                <param name="options">
                  <types>
                    <type ref="H.map.provider.MarkerTileProvider.Options"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.MarkerTileProvider.Options"/>
                  </ctype>
                  <description>
                    <prose><p>configuration for tile provider</p></prose>
                  </description>
                </param>
              </constructor>
              <property name="H.map.provider.MarkerTileProvider#requestData_" local-name="requestData_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>User supplied function that fetches and produces map objects</p></prose>
                </description>
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <name name="number"/>
                    </param>
                    <param>
                      <func>
                        <param>
                          <typed>
                            <base>
                              <name name="Array"/>
                            </base>
                            <app>
                              <name name="H.map.AbstractMarker"/>
                            </app>
                          </typed>
                        </param>
                      </func>
                    </param>
                    <param>
                      <name name="Function"/>
                    </param>
                    <return>
                      <name name="H.util.ICancelable"/>
                    </return>
                  </func>
                </ctype>
              </property>
              <property name="H.map.provider.MarkerTileProvider#providesDomMarkers_" local-name="providesDomMarkers_" access="private" scope="instance" virtual="false" published="false" exported="false">
                <description>
                  <prose><p>If set to true provides gives back dom markers</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean"/>
                </ctype>
              </property>
              <method name="H.map.provider.MarkerTileProvider#invalidateObject" local-name="invalidateObject" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>To signal to this provider that a map object has been changed.
The method marks tile, that contains that objectm as invalid and triggers dispatchUpdate()</p></prose>
                </description>
                <param name="marker">
                  <types>
                    <type ref="H.map.AbstractMarker"/>
                  </types>
                  <ctype>
                    <name name="H.map.AbstractMarker" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>The map object to be invalidated</p></prose>
                  </description>
                </param>
                <param name="flags">
                  <types>
                    <type ref="H.math.BitMask"/>
                  </types>
                  <ctype>
                    <name name="H.math.BitMask"/>
                  </ctype>
                  <description>
                    <prose><p>The flags indicating the types of occurred changes</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#providesDomMarkers" local-name="providesDomMarkers" access="public" scope="instance" virtual="false" published="true" exported="true">
                <description>
                  <prose><p>Checks whether this provider is currently providing <link ref="H.map.DomMarker" /> map objects.</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <typedef name="H.map.provider.MarkerTileProvider.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
                <description>
                  <prose><p>Options which are used to initialize the MarkerTileProvider object.</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="min"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="max"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="number"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="requestData"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <func>
                              <param>
                                <name name="number"/>
                              </param>
                              <param>
                                <name name="number"/>
                              </param>
                              <param>
                                <name name="number"/>
                              </param>
                              <param>
                                <func>
                                  <param>
                                    <typed>
                                      <base>
                                        <name name="Array"/>
                                      </base>
                                      <app>
                                        <name name="H.map.AbstractMarker"/>
                                      </app>
                                    </typed>
                                  </param>
                                </func>
                              </param>
                              <param>
                                <name name="Function"/>
                              </param>
                              <return>
                                <name name="H.util.ICancelable"/>
                              </return>
                            </func>
                          </type>
                        </union>
                      </value>
                    </field>
                    <field>
                      <key>
                        <name name="providesDomMarkers"/>
                      </key>
                      <value>
                        <union>
                          <type>
                            <name name="boolean"/>
                          </type>
                          <type>
                            <undefined/>
                          </type>
                        </union>
                      </value>
                    </field>
                  </record>
                </ctype>
                <property name="H.map.provider.MarkerTileProvider.Options#min" local-name="min" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The minimal supported zoom level, default is <code>0</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.MarkerTileProvider.Options#max" local-name="max" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>The maximal supported zoom level, default is <code>22</code></p></prose>
                  </description>
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number" optional="true"/>
                  </ctype>
                </property>
                <property name="H.map.provider.MarkerTileProvider.Options#requestData" local-name="requestData" access="public" scope="" virtual="false" published="false" exported="false">
                  <description>
                    <prose><p>function that fetches marker data and creates array of
<code>H.map.AbstractMarker</code> that is passed success callback, if function fails to fetch data
onError callback must be called</p></prose>
                  </description>
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <name name="number"/>
                      </param>
                      <param>
                        <func>
                          <param>
                            <typed>
                              <base>
                                <name name="Array"/>
                              </base>
                              <app>
                                <name name="H.map.AbstractMarker"/>
                              </app>
                            </typed>
                          </param>
                        </func>
                      </param>
                      <param>
                        <name name="Function"/>
                      </param>
                      <return>
                        <name name="H.util.ICancelable"/>
                      </return>
                    </func>
                  </ctype>
                </property>
                <property name="H.map.provider.MarkerTileProvider.Options#providesDomMarkers" local-name="providesDomMarkers" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                  <description>
                    <prose><p>indicates if markers provided are of type
<code>H.map.DomMarker</code> or <code>H.map.Marker</code>, default is <code>H.map.Marker</code></p></prose>
                  </description>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                </property>
              </typedef>
              <property name="H.map.provider.MarkerTileProvider#pending_" local-name="pending_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#pending_">
                <description>
                  <prose><p>A map of currently requested tiles (by tile key)</p></prose>
                </description>
                <types>
                  <type ref="Object.&lt;string, H.util.ICancelable&gt;"/>
                </types>
                <ctype>
                  <typed>
                    <base>
                      <name name="Object"/>
                    </base>
                    <app>
                      <name name="string"/>
                    </app>
                    <app>
                      <name name="H.util.ICancelable"/>
                    </app>
                  </typed>
                </ctype>
              </property>
              <property name="H.map.provider.MarkerTileProvider#cache_" local-name="cache_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#cache_">
                <description>
                  <prose><p>Tile cache.</p></prose>
                </description>
                <types>
                  <type ref="H.util.Cache"/>
                </types>
                <ctype>
                  <name name="H.util.Cache"/>
                </ctype>
              </property>
              <method name="H.map.provider.MarkerTileProvider#getCache" local-name="getCache" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#getCache">
                <description>
                  <prose><p>This method returns cache which should be used to store tiles</p></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.Cache"/>
                  </types>
                  <ctype>
                    <name name="H.util.Cache"/>
                  </ctype>
                  <description>
                    <prose><p>cache</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.MarkerTileProvider#cacheFilter" local-name="cacheFilter" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.RemoteTileProvider#cacheFilter">
                <description>
                  <prose><p>This method is used to remove all cache entries for this particular provider.
It is passed as filter to cache removeAll method.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>indicating if the element should be removed</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.MarkerTileProvider#requestInternal" local-name="requestInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#requestInternal">
                <description>
                  <prose><p>This method request tile from remote service</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The row number of the tile</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The column number of the tile</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which the tile is requested</p></prose>
                  </description>
                </param>
                <param name="onResponse">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <union>
                          <type>
                            <typed>
                              <base>
                                <name name="Array"/>
                              </base>
                              <app>
                                <name name="H.map.Object"/>
                              </app>
                            </typed>
                          </type>
                          <type>
                            <name name="HTMLImageElement"/>
                          </type>
                          <type>
                            <name name="HTMLCanvasElement"/>
                          </type>
                          <type>
                            <null/>
                          </type>
                        </union>
                      </param>
                      <param>
                        <all optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called after response arrives</p></prose>
                  </description>
                </param>
                <param name="onError">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <func>
                      <param>
                        <name name="string" optional="true"/>
                      </param>
                    </func>
                  </ctype>
                  <description>
                    <prose><p>function which is called in case of communication error</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.util.ICancelable"/>
                  </types>
                  <ctype>
                    <name name="H.util.ICancelable"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <property name="H.map.provider.MarkerTileProvider#dummyCancelable_" local-name="dummyCancelable_" access="private" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#dummyCancelable_">
                <description>
                  <prose><p>Dummy cancelable object used in case if requestInternal onSuccess was called synchronously</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
              </property>
              <method name="H.map.provider.MarkerTileProvider#reload" local-name="reload" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.RemoteTileProvider#reload">
                <description>
                  <prose><p>This method instructs the provider to reload data from it's source.</p>
<p>Two reload modes are possible:</p>
<ul>
<li><code>hard</code>: A hard immediately removes the cached tiles from
the tile cache and forces the provider to re-fetch the tiles. Currently
cached tiles will not be used for rendering.</li>
<li><code>soft</code>: A soft invalidation only marks tiles as invalid and requests
the tiles to be re-fetched at the earliest convenience. The provider does
not invalidate the cache immediately in this case. This means that cached
tiles can still be rendered while the updated tiles are fetched.</li>
</ul></prose>
                </description>
                <param name="hard">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean"/>
                  </ctype>
                  <description>
                    <prose><p>a boolean flag indicating whether to invalidate in
 <code>hard</code> mode (<code>true</code>) or in <code>soft</code> mode (<code>false</code>);</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#invalidateEach" local-name="invalidateEach" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#invalidateEach">
                <description>
                  <prose><p>This method sets the 'valid' flag of each cached tile it is called on to
<code>false</code>.</p></prose>
                </description>
                <param name="entryKey">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>tile key corresponding to a single tile coordinates</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose><p>the tile</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.RemoteTileProvider#disposeInternal">
                <description>
                  <prose><p>This method disposes the RemoteTileProvider</p></prose>
                </description>
              </method>
              <property name="H.map.provider.MarkerTileProvider#requestTile" local-name="requestTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#requestTile">
                <description>
                  <prose><p>Request data on a tile basis</p></prose>
                </description>
              </property>
              <property name="H.map.provider.MarkerTileProvider#cancelTile" local-name="cancelTile" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTile">
                <description>
                  <prose><p>Cancels tile from being requested using x, y, z coordinates (column, row, zoom)</p></prose>
                </description>
              </property>
              <property name="H.map.provider.MarkerTileProvider#cancelTileByKey" local-name="cancelTileByKey" access="public" scope="instance" virtual="true" published="true" exported="false" inherited="H.map.provider.TileProvider#cancelTileByKey">
                <description>
                  <prose><p>Cancels tile from being requested using a tile-key</p></prose>
                </description>
              </property>
              <method name="H.map.provider.MarkerTileProvider#createTileInternal" local-name="createTileInternal" access="public" scope="instance" virtual="true" published="true" exported="true" inherited="H.map.provider.TileProvider#createTileInternal">
                <description>
                  <prose><p>This method creates a tile object with given parameters</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>tile coordinate (zoom)</p></prose>
                  </description>
                </param>
                <param name="data">
                  <types>
                    <type ref="HTMLImageElement"/>
                    <type ref="HTMLCanvasElement"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="HTMLImageElement"/>
                      </type>
                      <type>
                        <name name="HTMLCanvasElement"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>data for the tile</p></prose>
                  </description>
                </param>
                <param name="opt_options" optional="true">
                  <types>
                    <type ref="Object.&lt;string,*&gt;="/>
                  </types>
                  <ctype>
                    <typed optional="true">
                      <base>
                        <name name="Object"/>
                      </base>
                      <app>
                        <name name="string"/>
                      </app>
                      <app>
                        <all/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>free form options object. These options are meant to
  be used in tile specific rendering cases</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="H.map.provider.Tile"/>
                  </types>
                  <ctype>
                    <name name="H.map.provider.Tile"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.MarkerTileProvider#getTileKey" local-name="getTileKey" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.TileProvider#getTileKey">
                <description>
                  <prose><p>This method creates a tile key consisting of the provider's uid, and the tile's x, y and z coordinates, seperated by
underscores e.g.: &quot;4711_7_42_23&quot;</p></prose>
                </description>
                <param name="x">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The x tile coordinate (row)</p></prose>
                  </description>
                </param>
                <param name="y">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The y tile coordinate (column)</p></prose>
                  </description>
                </param>
                <param name="z">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The z tile coordinate (zoom level)</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>string</p></prose>
                  </description>
                </returns>
              </method>
              <event name="H.map.provider.MarkerTileProvider#event:update" local-name="update" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#event:update">
                <description>
                  <prose><p>Fired when this provider's data updates</p></prose>
                </description>
                <types>
                  <type ref="H.util.Event"/>
                </types>
                <ctype>
                  <name name="H.util.Event"/>
                </ctype>
              </event>
              <enum name="H.map.provider.MarkerTileProvider#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false" inherited="H.map.provider.Provider#EventType">
                <description>
                  <prose><p>Event types fired by Provider</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <value name="H.map.provider.MarkerTileProvider#EventType.UPDATE" local-name="UPDATE">
                  <description>
                    <prose></prose>
                  </description>
                </value>
              </enum>
              <property name="H.map.provider.MarkerTileProvider#min" local-name="min" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#min">
                <description>
                  <prose><p>Minimum zoom level at which provider can serve data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.MarkerTileProvider#max" local-name="max" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#max">
                <description>
                  <prose><p>Maximum zoom level at which provider can server data, set at construction time</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number"/>
                </ctype>
              </property>
              <property name="H.map.provider.MarkerTileProvider#uid" local-name="uid" access="public" scope="instance" virtual="false" published="true" exported="false" inherited="H.map.provider.Provider#uid">
                <description>
                  <prose><p>Provider instance unique identifier, generated at construction time</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
              </property>
              <method name="H.map.provider.MarkerTileProvider#dispatchUpdate" local-name="dispatchUpdate" access="protected" scope="instance" virtual="false" published="false" exported="true" inherited="H.map.provider.Provider#dispatchUpdate">
                <description>
                  <prose><p>This method dispatches update events</p></prose>
                </description>
                <param name="opt_target" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>The object which causes the update. It is set as the events &quot;target&quot; property.
       If ommited, the provider itself is set as the target.</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#getCopyrights" local-name="getCopyrights" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.map.provider.Provider#getCopyrights">
                <description>
                  <prose><p>This method returns the copyrights of the provided content for a certain geographical area at a specified zoom level.</p>
<p>Note: This function must be overridden by any class inheriting the Provider class.
The default implementation returns <code>null</code>.</p></prose>
                </description>
                <param name="bounds">
                  <types>
                    <type ref="H.geo.Rect"/>
                  </types>
                  <ctype>
                    <name name="H.geo.Rect"/>
                  </ctype>
                  <description>
                    <prose><p>The bounding area for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <param name="level">
                  <types>
                    <type ref="number"/>
                  </types>
                  <ctype>
                    <name name="number"/>
                  </ctype>
                  <description>
                    <prose><p>The zoom level for which to retrieve the copyright information</p></prose>
                  </description>
                </param>
                <returns>
                  <types>
                    <type ref="?Array.&lt;H.map.ICopyright&gt;"/>
                  </types>
                  <ctype>
                    <typed nullable="true">
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.ICopyright"/>
                      </app>
                    </typed>
                  </ctype>
                  <description>
                    <prose><p>a list of copyright information objects for the provided area and zoom level</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.MarkerTileProvider#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <param name="parent">
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget"/>
                  </ctype>
                  <description>
                    <prose><p>the new parent event target</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
                <description>
                  <prose></prose>
                </description>
                <returns>
                  <types>
                    <type ref="H.util.EventTarget"/>
                  </types>
                  <ctype>
                    <name name="H.util.EventTarget" nullable="true"/>
                  </ctype>
                  <description>
                    <prose><p>the current parent event target</p></prose>
                  </description>
                </returns>
              </method>
              <method name="H.map.provider.MarkerTileProvider#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
                <description>
                  <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>event handler function</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
                <description>
                  <prose><p>This method will removed previously added listener from the event target</p></prose>
                </description>
                <param name="type">
                  <types>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <name name="string"/>
                  </ctype>
                  <description>
                    <prose><p>name of event</p></prose>
                  </description>
                </param>
                <param name="handler">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose><p>previously added event handler</p></prose>
                  </description>
                </param>
                <param name="opt_capture" optional="true">
                  <types>
                    <type ref="boolean"/>
                  </types>
                  <ctype>
                    <name name="boolean" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose><p>scope for the handler function</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
                <description>
                  <prose><p>This method will dispatch event on the event target object</p></prose>
                </description>
                <param name="evt">
                  <types>
                    <type ref="H.util.Event"/>
                    <type ref="string"/>
                  </types>
                  <ctype>
                    <union>
                      <type>
                        <name name="H.util.Event"/>
                      </type>
                      <type>
                        <name name="string"/>
                      </type>
                    </union>
                  </ctype>
                  <description>
                    <prose><p>event object or event name</p></prose>
                  </description>
                </param>
              </method>
              <method name="H.map.provider.MarkerTileProvider#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
                <description>
                  <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
                </description>
              </method>
              <method name="H.map.provider.MarkerTileProvider#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
                <description>
                  <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
                </description>
                <param name="callback">
                  <types>
                    <type ref="function"/>
                  </types>
                  <ctype>
                    <name name="Function" nullable="false"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
                <param name="opt_scope" optional="true">
                  <types>
                    <type ref="Object"/>
                  </types>
                  <ctype>
                    <name name="Object" optional="true"/>
                  </ctype>
                  <description>
                    <prose></prose>
                  </description>
                </param>
              </method>
            </class>
          </ns>
        </ns>
        <class name="H.Map" local-name="Map" access="public" scope="static" virtual="false" published="true" exported="true">
          <description>
            <prose><p>Map class defines map instance in the application. By creating this
object you will initialize a visible map object which is attached
to the provided dom element. Map class is an entry point to all
operations related to layers, map objects and geo-screen transformations.
By specifying options you can initialize map with predefined view.</p></prose>
            <example>var platform = new H.service.Platform({
  app_id: &quot;{your app id}&quot;,
  app_code: &quot;{your app code}&quot;
});
var maptypes = platform.createDefaultLayers();

var map = new H.Map(document.getElementById(&apos;mapdiv&apos;), maptypes.normal.map, {
  center: new H.geo.Point(0, 51),
  zoom: 8
});</example>
          </description>
          <extends>
            <type ref="H.util.EventTarget"/>
          </extends>
          <constructor local-name="Map" name="H.Map">
            <param name="element">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>html element into which the map will be rendered</p></prose>
              </description>
            </param>
            <param name="baseLayer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose><p>The layer to be used as the base (bottom most) layer.</p></prose>
              </description>
            </param>
            <param name="opt_options" optional="true">
              <types>
                <type ref="H.Map.Options"/>
              </types>
              <ctype>
                <name name="H.Map.Options" optional="true"/>
              </ctype>
              <description>
                <prose><p>additional map options</p></prose>
              </description>
            </param>
          </constructor>
          <event name="H.Map#event:mapviewchangestart" local-name="mapviewchangestart" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Fired when changes of this map's view are starting</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <event name="H.Map#event:mapviewchange" local-name="mapviewchange" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Fired when changes of this map's view are ongoing</p></prose>
            </description>
            <types>
              <type ref="H.map.ChangeEvent"/>
            </types>
            <ctype>
              <name name="H.map.ChangeEvent"/>
            </ctype>
          </event>
          <event name="H.Map#event:mapviewchangeend" local-name="mapviewchangeend" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Fired when changes of this map's view are ending</p></prose>
            </description>
            <types>
              <type ref="H.util.Event"/>
            </types>
            <ctype>
              <name name="H.util.Event"/>
            </ctype>
          </event>
          <event name="H.Map#event:baselayerchange" local-name="baselayerchange" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Fired when this map's base layer changes</p></prose>
            </description>
            <types>
              <type ref="H.util.ChangeEvent"/>
            </types>
            <ctype>
              <name name="H.util.ChangeEvent"/>
            </ctype>
          </event>
          <event name="H.Map#event:enginechange" local-name="enginechange" access="public" scope="instance" virtual="false" published="true" exported="false">
            <description>
              <prose><p>Fired when this map's engine changes i.e when entering
panorama. Event holds references to old and new engine type.</p></prose>
            </description>
            <types>
              <type ref="H.util.ChangeEvent"/>
            </types>
            <ctype>
              <name name="H.util.ChangeEvent"/>
            </ctype>
          </event>
          <property name="H.Map#mapviewchangeStarted_" local-name="mapviewchangeStarted_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>flag to signal that mapviewchange has started</p></prose>
            </description>
          </property>
          <property name="H.Map#mapviewchangeEndHandle_" local-name="mapviewchangeEndHandle_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Handle to mapviewchangeEnd timeout</p></prose>
            </description>
          </property>
          <property name="H.Map#imprint_" local-name="imprint_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="H.map.Imprint"/>
            </types>
            <ctype>
              <name name="H.map.Imprint" nullable="true"/>
            </ctype>
          </property>
          <property name="H.Map#autoColor_" local-name="autoColor_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <types>
              <type ref="boolean"/>
            </types>
            <ctype>
              <name name="boolean"/>
            </ctype>
          </property>
          <method name="H.Map.adjustOptions_" local-name="adjustOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="options">
              <types>
                <type ref="Object"/>
                <type ref="undefined"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="Object"/>
                  </type>
                  <type>
                    <undefined/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="symbol">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function"/>
              </ctype>
              <description>
                <prose><p>The symbol to use for the exception</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map.Options"/>
              </types>
              <ctype>
                <name name="H.Map.Options"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <property name="H.Map#viewModel_" local-name="viewModel_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>View model instance</p></prose>
            </description>
            <types>
              <type ref="H.map.ViewModel"/>
            </types>
            <ctype>
              <name name="H.map.ViewModel"/>
            </ctype>
          </property>
          <property name="H.Map#viewPort_" local-name="viewPort_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Viewport instance</p></prose>
            </description>
            <types>
              <type ref="H.map.ViewPort"/>
            </types>
            <ctype>
              <name name="H.map.ViewPort"/>
            </ctype>
          </property>
          <property name="H.Map#engine_" local-name="engine_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Engine instance</p></prose>
            </description>
            <types>
              <type ref="H.map.render.RenderEngine"/>
            </types>
            <ctype>
              <name name="H.map.render.RenderEngine"/>
            </ctype>
          </property>
          <property name="H.Map#dataModel_" local-name="dataModel_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Data model instance</p></prose>
            </description>
            <types>
              <type ref="H.map.DataModel"/>
            </types>
            <ctype>
              <name name="H.map.DataModel"/>
            </ctype>
          </property>
          <property name="H.Map#MAPVIEWCHANGEEND_THRESHOLD_" local-name="MAPVIEWCHANGEEND_THRESHOLD_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Threshold (ms) after which mapviewchangeend is fired.</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
          </property>
          <property name="H.Map#element_" local-name="element_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Root map html element</p></prose>
            </description>
            <types>
              <type ref="Element"/>
            </types>
            <ctype>
              <name name="Element"/>
            </ctype>
          </property>
          <method name="H.Map#disposeInternal" local-name="disposeInternal" access="protected" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Function disposes the map object</p></prose>
            </description>
          </method>
          <method name="H.Map#getElement" local-name="getElement" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map root html element</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#createMapElement_" local-name="createMapElement_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>This method initializes map root element</p></prose>
            </description>
            <param name="containerElement">
              <types>
                <type ref="Element"/>
              </types>
              <ctype>
                <name name="Element"/>
              </ctype>
              <description>
                <prose><p>element provided from the application</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#adjustColors_" local-name="adjustColors_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>To adjust the color of the imprint and UI</p></prose>
            </description>
          </method>
          <method name="H.Map#onDataModelChange_" local-name="onDataModelChange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A listener for &quot;add&quot;, &quot;remove&quot; or &quot;set&quot; events on this map's data model</p></prose>
            </description>
            <param name="event">
              <types>
                <type ref="H.util.OList.Event"/>
              </types>
              <ctype>
                <name name="H.util.OList.Event"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#onSync_" local-name="onSync_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>A listener for &quot;sync&quot; event from view model to manage mapviewchange events.</p></prose>
            </description>
            <param name="event">
              <types>
                <type ref="H.map.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.map.ChangeEvent"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#dispatchMapviewchange_" local-name="dispatchMapviewchange_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_event" optional="true">
              <types>
                <type ref="H.map.ChangeEvent"/>
              </types>
              <ctype>
                <name name="H.map.ChangeEvent" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#dispatchMapviewchangeEnd_" local-name="dispatchMapviewchangeEnd_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Private method that dispatches mapviewchangeend event.</p></prose>
            </description>
          </method>
          <method name="H.Map#setCenter" local-name="setCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the new center on a map.</p></prose>
            </description>
            <param name="center">
              <types>
                <type ref="H.geo.IPoint"/>
              </types>
              <ctype>
                <name name="H.geo.IPoint"/>
              </ctype>
              <description>
                <prose><p>requested center to be set</p></prose>
              </description>
            </param>
            <param name="opt_animate" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>parameter indicates if animated transition
should be applied, default is <code>false</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the instance itself</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getCenter" local-name="getCenter" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns currently rendered center of the map.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#setZoom" local-name="setZoom" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the zoom level on the map. Every zoom level
represents different scale i.e map at zoom level 2 is twice as large
as the map at zoom level 1.</p></prose>
            </description>
            <param name="zoom">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>requested zoom level</p></prose>
              </description>
            </param>
            <param name="opt_animate" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>parameter indicates if animated transition
should be applied, default is <code>false</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the instance itself</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getZoom" local-name="getZoom" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns currently rendered zoom level.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#zoomAt" local-name="zoomAt" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method changes the map zoom while keeping target
screen coordinates specified as x,y at the same place
where they were before.</p></prose>
            </description>
            <param name="zoom">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>new zoom level</p></prose>
              </description>
            </param>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport x-axis pixel coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport y-axis pixel coordinate</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#setViewBounds" local-name="setViewBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the bounding rect to be displayed by the map. Maps
display the bounding rect in a way that it fits entirely in the current
viewport.</p></prose>
            </description>
            <param name="boundingRect">
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose><p>view bound which should be shown on map</p></prose>
              </description>
            </param>
            <param name="opt_animate" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>parameter indicates if animated transition
should be applied, default is <code>false</code></p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the instance itself</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getViewBounds" local-name="getViewBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns bounding rect for the current map view. Returned bounding rect
defines entire currently viewable area on the screen.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getCameraDataForBounds" local-name="getCameraDataForBounds" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Calculates the best CameraModel to show the provided bounding rectangle</p></prose>
            </description>
            <param name="rect">
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect"/>
              </ctype>
              <description>
                <prose><p>The geographical bounding rectangle to use</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.ViewModel.CameraData"/>
              </types>
              <ctype>
                <name name="H.map.ViewModel.CameraData"/>
              </ctype>
              <description>
                <prose><p>The result, represented by the properties zoom
     (number) and position (geo.Point)</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the argument is not a H.geo.Rect</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#getViewPort" local-name="getViewPort" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns current map viewport. Viewport can be used
to modify padding and margin which will reflect the position
of the viewport center and the amount of extra data loaded (for margin)</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.ViewPort"/>
              </types>
              <ctype>
                <name name="H.map.ViewPort"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getViewModel" local-name="getViewModel" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns current view model. View model can be used to modify
the current view or camera. <link ref="H.map.ViewModel" /></p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.ViewModel"/>
              </types>
              <ctype>
                <name name="H.map.ViewModel"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getLayers" local-name="getLayers" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the map's current layer collection.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.DataModel"/>
              </types>
              <ctype>
                <name name="H.map.DataModel"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getImprint" local-name="getImprint" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method returns the imprint object for this map.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.Imprint"/>
              </types>
              <ctype>
                <name name="H.map.Imprint"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#capture" local-name="capture" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method captures desired region of the current map and the objects on it. Result
is returned as a HTML5 Canvas element. Origin of coordinate system for capturing is in the
top left corner of the viewport.</p>
<p>In order to see the &quot;capturable&quot; UI controls in the final result, pass a reference of
<link ref="H.ui.UI" /> object. For now the only control which is &quot;capturable&quot; is the
<link ref="H.ui.ScaleBar" />.</p>
<p>Consider initializing map with desired pixel ratio for high resolution devices
(see <link ref="H.Map.Options" />) as it has effect on the quality of the captured result.</p></prose>
              <example>var map = new H.Map(mapContainer, defaultLayers.normal.map, {
  center: {lat: -40, lng: 178},
  zoom: 2
});
var ui = H.ui.UI.createDefault(map, defaultLayers);
map.capture(function(canvas) {
  // Here we&apos;ve got the canvas with desired area of the map,
  // (from top left (0,0) corner to the bottom right (100,100) corner)
}, [ui], 0, 0, 100, 100);</example>
            </description>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <name name="HTMLCanvasElement" optional="true"/>
                  </param>
                </func>
              </ctype>
              <description>
                <prose><p>Callback function to call once result of
                                               the capturing is ready</p></prose>
              </description>
            </param>
            <param name="opt_capturables" optional="true">
              <types>
                <type ref="Array.&lt;H.util.ICapturable&gt;="/>
              </types>
              <ctype>
                <typed optional="true">
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.util.ICapturable"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>Collection of &quot;capturable&quot; element(s) to
                                                          draw into the resulting canvas</p></prose>
              </description>
            </param>
            <param name="opt_x1" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The X coordinate of the left edge of the capturing rectangle defaults to 0</p></prose>
              </description>
            </param>
            <param name="opt_y1" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The Y coordinate of the top edge of the capturing rectangle defaults to 0</p></prose>
              </description>
            </param>
            <param name="opt_x2" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The X coordinate of the right edge of the capturing rectangle defaults to viewport width</p></prose>
              </description>
            </param>
            <param name="opt_y2" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>The Y coordinate of the bottom edge of the capturing rectangle defaults to viewport height</p></prose>
              </description>
            </param>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the callback parameter is not specified or
                is not a function</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#getEngine" local-name="getEngine" access="public" scope="instance" virtual="false" published="false" exported="true">
            <description>
              <prose><p>TODO: Exposed for QA purposes only.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.render.RenderEngine"/>
              </types>
              <ctype>
                <name name="H.map.render.RenderEngine"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#setEngineType" local-name="setEngineType" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method sets the rendering engine type for the map. Rendering engine
is responsible for displaying i.e tiles and data on the map.</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the map itself</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#onFirstRender_" local-name="onFirstRender_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Listener for the first &quot;render&quot; event on the new engine to handle a engine switch triggered by setEngineType()</p></prose>
            </description>
            <param name="event">
              <types>
                <type ref="H.util.Event"/>
              </types>
              <ctype>
                <name name="H.util.Event"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#engineExitCallback_" local-name="engineExitCallback_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Callback to use for engine switch when the old engine exits (bound in constructor)</p></prose>
            </description>
          </method>
          <method name="H.Map#createEngine_" local-name="createEngine_" access="private" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Helper methotod to create a RenderEngine</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_options" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.render.RenderEngine"/>
              </types>
              <ctype>
                <name name="H.map.render.RenderEngine"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#addLayer" local-name="addLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method adds a layer to the map.</p></prose>
            </description>
            <param name="layer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose><p>The map layer to be added</p></prose>
              </description>
            </param>
            <param name="opt_idx" optional="true">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
              <description>
                <prose><p>index at which the new layer should be inserted</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>current map instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#removeLayer" local-name="removeLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method removes layer from the map.</p></prose>
            </description>
            <param name="layer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose><p>The map layer to be removed</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>current map instance</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#setBaseLayer" local-name="setBaseLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method will set provided layer as base map. The layer will be inserted
as the bottom most layer in the map.</p></prose>
            </description>
            <param name="layer">
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer"/>
              </ctype>
              <description>
                <prose><p>The layer to use as base map</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the instance itself</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getBaseLayer" local-name="getBaseLayer" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>To get the current base map layer.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="H.map.layer.Layer"/>
              </types>
              <ctype>
                <name name="H.map.layer.Layer" nullable="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#geoToScreen" local-name="geoToScreen" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns the screen coordniates according to the given geographical coordinates.
This method returns a screen pixel coordinates for the provided geo point.</p></prose>
            </description>
            <param name="geoPoint">
              <types>
                <type ref="H.geo.IPoint"/>
              </types>
              <ctype>
                <name name="H.geo.IPoint"/>
              </ctype>
              <description>
                <prose><p>point on the map</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.math.Point"/>
              </types>
              <ctype>
                <name name="H.math.Point"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#screenToGeo" local-name="screenToGeo" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns the geographical coordinates according to the given screen coordinates.</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport x-axis pixel coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport y-axis pixel coordinate</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.geo.Point"/>
              </types>
              <ctype>
                <name name="H.geo.Point"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#screenToCameraData" local-name="screenToCameraData" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns the camera data according to the given screen coordinates.
Method converts screen pixel coordinates to correct camera data object</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport x-axis pixel coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport y-axis pixel coordinate</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.ViewModel.CameraData"/>
              </types>
              <ctype>
                <name name="H.map.ViewModel.CameraData"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#addObject" local-name="addObject" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method adds an map object to the map. Map object can be a marker or a spatial object like polygon or polyline.</p></prose>
            </description>
            <param name="mapObject">
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The map object to add</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="false"/>
              </ctype>
              <description>
                <prose><p>the added map object</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the mapObject parameter is not a map object.</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#removeObject" local-name="removeObject" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method removes previously added map object from the map.</p></prose>
            </description>
            <param name="mapObject">
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="false"/>
              </ctype>
              <description>
                <prose><p>The map object to remove</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="false"/>
              </ctype>
              <description>
                <prose><p>the removed map object</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the mapObject parameter is not a map object.</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#getObjects" local-name="getObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method retrieves the list of all objects which have been added to the map.</p>
<p>Note: The returned list should be used for read access only. Modifying the list
directly can destroy the integrity of this map's object model. Please use the
map's <code>addObject/addObjects</code> and <code>removeObject/removeObjects</code> methods.</p></prose>
            </description>
            <returns>
              <types>
                <type ref="Array.&lt;H.map.Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.map.Object"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose><p>the list of all use objects which are currently on the map.</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#addObjects" local-name="addObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method adds an array of objects or an object group to the map.</p>
<p>Note: Objects which were added to the map previously will not be added again.</p></prose>
            </description>
            <param name="mapObjects">
              <types>
                <type ref="Array.&lt;!H.map.Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.map.Object" nullable="false"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the map instance</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the mapObjects parameter is neither an object group, nor an array</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#removeObjects" local-name="removeObjects" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>This method removes an array of object or an object group from the map.</p></prose>
            </description>
            <param name="mapObjects">
              <types>
                <type ref="Array.&lt;H.map.Object&gt;"/>
                <type ref="H.map.Group"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <typed>
                      <base>
                        <name name="Array"/>
                      </base>
                      <app>
                        <name name="H.map.Object"/>
                      </app>
                    </typed>
                  </type>
                  <type>
                    <name name="H.map.Group"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.Map"/>
              </types>
              <ctype>
                <name name="H.Map"/>
              </ctype>
              <description>
                <prose><p>the map instance</p></prose>
              </description>
            </returns>
            <exception>
              <types>
                <type ref="Error"/>
              </types>
              <ctype>
                <name name="Error"/>
              </ctype>
              <description>
                <prose>This method throws an error if the mapObjects parameter is
neither an object group, nor an array</prose>
              </description>
            </exception>
          </method>
          <method name="H.Map#getObjectAt" local-name="getObjectAt" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns the top most z-ordered map object found under the specific screen coordinates.
Coordinates are viewport pixel coordinates starting from top left corner as (0, 0) point.</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport x-axis pixel coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport y-axis pixel coordinate</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="H.map.Object"/>
              </types>
              <ctype>
                <name name="H.map.Object" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the entcountered top most map object or <code>null</code> if no object found</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#getObjectsAt" local-name="getObjectsAt" access="public" scope="instance" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Returns a list of map objects in descending z-order found under the specific screen coordinates.
Coordinates are viewport pixel coordinates starting from top left corner as (0, 0) point.</p></prose>
            </description>
            <param name="x">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport x-axis pixel coordinate</p></prose>
              </description>
            </param>
            <param name="y">
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
              <description>
                <prose><p>map viewport y-axis pixel coordinate</p></prose>
              </description>
            </param>
            <returns>
              <types>
                <type ref="Array.&lt;!H.map.Object&gt;"/>
              </types>
              <ctype>
                <typed>
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.map.Object" nullable="false"/>
                  </app>
                </typed>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </returns>
          </method>
          <enum name="H.Map.EngineType" local-name="EngineType" access="public" scope="static" virtual="false" published="true" exported="true">
            <description>
              <prose><p>Types of engines</p></prose>
            </description>
            <types>
              <type ref="number"/>
            </types>
            <ctype>
              <name name="number"/>
            </ctype>
            <value name="H.Map.EngineType.P2D" local-name="P2D">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.Map.EngineType.PANORAMA" local-name="PANORAMA">
              <description>
                <prose></prose>
              </description>
            </value>
          </enum>
          <typedef name="H.Map.Options" local-name="Options" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>This type defines options which can be used to initialize the map.</p></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="center"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.geo.IPoint"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="zoom"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="bounds"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.geo.Rect"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="layers"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <typed>
                          <base>
                            <name name="Array"/>
                          </base>
                          <app>
                            <name name="H.map.layer.Layer"/>
                          </app>
                        </typed>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="engineType"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.Map.EngineType"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="pixelRatio"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="imprint"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.map.Imprint.Options" nullable="true"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="renderBaseBackground"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.Map.BackgroundRange"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="autoColor"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="margin"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="padding"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="H.map.ViewPort.Padding"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="fixedCenter"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="boolean"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.Map.Options#center" local-name="center" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The initial center of the map, default is <code>{lat:0, lng: 0</code>}</p></prose>
              </description>
              <types>
                <type ref="H.geo.IPoint"/>
              </types>
              <ctype>
                <name name="H.geo.IPoint" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#zoom" local-name="zoom" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The initial zoom level of the map, default is <code>0</code> respectivly the minimal zoom level of the base map</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#bounds" local-name="bounds" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The view bounds to be displayed on the map. If provided, it takes precedence over center and zoom.
          and zoom if provided)</p></prose>
              </description>
              <types>
                <type ref="H.geo.Rect"/>
              </types>
              <ctype>
                <name name="H.geo.Rect" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#layers" local-name="layers" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>A list of layers to render on top of the base map</p></prose>
              </description>
              <types>
                <type ref="Array.&lt;H.map.layer.Layer&gt;="/>
              </types>
              <ctype>
                <typed optional="true">
                  <base>
                    <name name="Array"/>
                  </base>
                  <app>
                    <name name="H.map.layer.Layer"/>
                  </app>
                </typed>
              </ctype>
            </property>
            <property name="H.Map.Options#engineType" local-name="engineType" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The initial engine type to use, default is <code>P2D</code></p></prose>
              </description>
              <types>
                <type ref="H.Map.EngineType"/>
              </types>
              <ctype>
                <name name="H.Map.EngineType" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#pixelRatio" local-name="pixelRatio" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The pixelRatio to use for over-sampling in cases of high-resolution displays, default is <code>1</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.Map.Options#imprint" local-name="imprint" access="public" scope="" virtual="false" published="false" exported="false" optional="true" nullable="true">
              <description>
                <prose><p>The imprint options or <code>null</code> to suppress the imprint</p></prose>
              </description>
              <types>
                <type ref="H.map.Imprint.Options"/>
              </types>
              <ctype>
                <name name="H.map.Imprint.Options" nullable="true" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#renderBaseBackground" local-name="renderBaseBackground" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Object describes how many cached zoom levels should be used as a base map background while base map tiles
          are loading. Example: <code>{lower: 3, higher: 2</code>}</p></prose>
              </description>
              <types>
                <type ref="H.Map.BackgroundRange"/>
              </types>
              <ctype>
                <name name="H.Map.BackgroundRange" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#autoColor" local-name="autoColor" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates wheter the UI's colors should automaticaly adjusted to the base layer, default is <code>true</code>.
          Up to now only the copyright style will be adjusted.
          See <link ref="H.map.layer.Layer.Options#dark" /></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#margin" local-name="margin" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The size in pixel of the supplemental area to render for each side of the map</p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#padding" local-name="padding" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>The padding in pixels for each side of the map</p></prose>
              </description>
              <types>
                <type ref="H.map.ViewPort.Padding"/>
              </types>
              <ctype>
                <name name="H.map.ViewPort.Padding" optional="true"/>
              </ctype>
            </property>
            <property name="H.Map.Options#fixedCenter" local-name="fixedCenter" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
              <description>
                <prose><p>Indicates whether the center of the map should remain unchanged if the viewport's
          size or or padding has been changed, default is <code>true</code></p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
            </property>
          </typedef>
          <typedef name="H.Map.BackgroundRange" local-name="BackgroundRange" access="public" scope="static" virtual="false" published="true" exported="false">
            <description>
              <prose><p>It defines the number of lower and higher zoom levels, where cached content of the base map is rendered while
content of the current zoom level is still loading.
Example: if range was set to <code>{lower: 3, higher: 2</code>} and current level is 10 then rendering engine will
try to display cached tiles from lower zoom levels 7, 8, 9 and higher levels 11 and 12.</p></prose>
            </description>
            <types>
              <type ref="Object"/>
            </types>
            <ctype>
              <record>
                <field>
                  <key>
                    <name name="lower"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                    </union>
                  </value>
                </field>
                <field>
                  <key>
                    <name name="higher"/>
                  </key>
                  <value>
                    <union>
                      <type>
                        <name name="number"/>
                      </type>
                    </union>
                  </value>
                </field>
              </record>
            </ctype>
            <property name="H.Map.BackgroundRange#lower" local-name="lower" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The number of lower zoom levels to take into account, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
            <property name="H.Map.BackgroundRange#higher" local-name="higher" access="public" scope="" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The number of higher zoom levels to take into account, default is <code>0</code></p></prose>
              </description>
              <types>
                <type ref="number"/>
              </types>
              <ctype>
                <name name="number"/>
              </ctype>
            </property>
          </typedef>
          <enum name="H.Map#EventType" local-name="EventType" access="public" scope="instance" virtual="false" published="false" exported="false">
            <description>
              <prose><p>Events fired by Map</p></prose>
            </description>
            <types>
              <type ref="string"/>
            </types>
            <ctype>
              <name name="string"/>
            </ctype>
            <value name="H.Map#EventType.MAPVIEWCHANGESTART" local-name="MAPVIEWCHANGESTART">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.Map#EventType.MAPVIEWCHANGE" local-name="MAPVIEWCHANGE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.Map#EventType.MAPVIEWCHANGEEND" local-name="MAPVIEWCHANGEEND">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.Map#EventType.BASELAYERCHANGE" local-name="BASELAYERCHANGE">
              <description>
                <prose></prose>
              </description>
            </value>
            <value name="H.Map#EventType.ENGINECHANGE" local-name="ENGINECHANGE">
              <description>
                <prose></prose>
              </description>
            </value>
          </enum>
          <method name="H.Map#setParentEventTarget" local-name="setParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#setParentEventTarget">
            <description>
              <prose></prose>
            </description>
            <param name="parent">
              <types>
                <type ref="H.util.EventTarget"/>
              </types>
              <ctype>
                <name name="H.util.EventTarget"/>
              </ctype>
              <description>
                <prose><p>the new parent event target</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#getParentEventTarget" local-name="getParentEventTarget" access="public" scope="instance" virtual="false" published="false" exported="true" inherited="H.util.EventTarget#getParentEventTarget">
            <description>
              <prose></prose>
            </description>
            <returns>
              <types>
                <type ref="H.util.EventTarget"/>
              </types>
              <ctype>
                <name name="H.util.EventTarget" nullable="true"/>
              </ctype>
              <description>
                <prose><p>the current parent event target</p></prose>
              </description>
            </returns>
          </method>
          <method name="H.Map#addEventListener" local-name="addEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addEventListener">
            <description>
              <prose><p>This method allows to listen for specific event triggered by the object</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>event handler function</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#removeEventListener" local-name="removeEventListener" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#removeEventListener">
            <description>
              <prose><p>This method will removed previously added listener from the event target</p></prose>
            </description>
            <param name="type">
              <types>
                <type ref="string"/>
              </types>
              <ctype>
                <name name="string"/>
              </ctype>
              <description>
                <prose><p>name of event</p></prose>
              </description>
            </param>
            <param name="handler">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose><p>previously added event handler</p></prose>
              </description>
            </param>
            <param name="opt_capture" optional="true">
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean" optional="true"/>
              </ctype>
              <description>
                <prose><p>if set to true will listen in the capture phase (bubble otherwise)</p></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose><p>scope for the handler function</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#dispatchEvent" local-name="dispatchEvent" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispatchEvent">
            <description>
              <prose><p>This method will dispatch event on the event target object</p></prose>
            </description>
            <param name="evt">
              <types>
                <type ref="H.util.Event"/>
                <type ref="string"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="H.util.Event"/>
                  </type>
                  <type>
                    <name name="string"/>
                  </type>
                </union>
              </ctype>
              <description>
                <prose><p>event object or event name</p></prose>
              </description>
            </param>
          </method>
          <method name="H.Map#dispose" local-name="dispose" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#dispose">
            <description>
              <prose><p>Removes listeners from this object. Classes that extend EventTarget may
need to override this method in order to remove references to DOM Elements
and additional listeners.</p></prose>
            </description>
          </method>
          <method name="H.Map#addOnDisposeCallback" local-name="addOnDisposeCallback" access="public" scope="instance" virtual="false" published="true" exported="true" inherited="H.util.EventTarget#addOnDisposeCallback">
            <description>
              <prose><p>This method adds callback which is triggered when the object is being disposed</p></prose>
            </description>
            <param name="callback">
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <name name="Function" nullable="false"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
            <param name="opt_scope" optional="true">
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object" optional="true"/>
              </ctype>
              <description>
                <prose></prose>
              </description>
            </param>
          </method>
        </class>
        <ns name="H.net" local-name="net" access="public" scope="static" virtual="false" published="false" exported="false">
          <description>
            <prose><p>Hold functionality related to network requests</p></prose>
          </description>
          <class name="H.net.ImageLoader" local-name="ImageLoader" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>The image loader class encapsulates image requests sent by the browser
and adds functionality for request queuing and cancelling running image
requests.</p>
<p>The maxConcurrent argument to the constructor specifies the number of image
requests the loader will attempt to load in parallel.
The useFrames argument to the constructor specifies whether the loader will
use IFrames to load images.</p>
<p>In some browser implementations image requests generated by and &lt;img&gt; tag
cannot be cancelled once the request was started (e.g. Safari). The only way
to safely cancel an image request in such browsers IFrames in conjunction
with the window.stop() function can be used. The number specified in
maxConcurrent will also define the maximum number of IFrames generated. All
loader frames are placed within a single IFrame that is appended to the host
document's body.</p>
<p>A default instance of the ImageLoader class is provided as
<link ref="H.net.images" />.</p></prose>
            </description>
            <constructor local-name="ImageLoader" name="H.net.ImageLoader">
              <param name="opt_maxConcurrent" optional="true">
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
                <description>
                  <prose><p>the amount of concurrently running image requests, default is <code>6</code></p></prose>
                </description>
              </param>
              <param name="opt_useFrames" optional="true">
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
                <description>
                  <prose><p>Indicating whether images are loaded in an IFrame, default is <code>false</code></p></prose>
                </description>
              </param>
              <param name="opt_doc" optional="true">
                <types>
                  <type ref="HTMLDocument"/>
                </types>
                <ctype>
                  <name name="HTMLDocument" optional="true"/>
                </ctype>
                <description>
                  <prose><p>an optional host document from which image elements are created</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.net.ImageLoader#requestQueue_" local-name="requestQueue_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.util.AsyncQueue"/>
              </types>
              <ctype>
                <name name="H.util.AsyncQueue"/>
              </ctype>
            </property>
            <property name="H.net.ImageLoader#doc" local-name="doc" access="public" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="HTMLDocument"/>
              </types>
              <ctype>
                <name name="HTMLDocument"/>
              </ctype>
            </property>
            <property name="H.net.ImageLoader#frameLoader_" local-name="frameLoader_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="H.net.FrameLoader_"/>
              </types>
              <ctype>
                <name name="H.net.FrameLoader_"/>
              </ctype>
            </property>
            <method name="H.net.ImageLoader#load" local-name="load" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>This method enqueues and image request for further processing.</p></prose>
              </description>
              <param name="url">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>the URL of the image to load</p></prose>
                </description>
              </param>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="HTMLImageElement"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>a callback function to be
 invoked once the image was successfully loaded</p></prose>
                </description>
              </param>
              <param name="opt_errback" optional="true">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func optional="true">
                    <param>
                      <name name="string"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>a callback function to be invoked if
 the image could not be loaded</p></prose>
                </description>
              </param>
              <param name="opt_crossOrigin" optional="true">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
                <description>
                  <prose><p>optional cross-origin information to be
 sent to the server</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the task object which encapsulates the image
 request. It exposes a cancel function to cancel the loading task.</p></prose>
                </description>
              </returns>
              <exception>
                <types>
                  <type ref="Error"/>
                </types>
                <ctype>
                  <name name="Error"/>
                </ctype>
                <description>
                  <prose>This method throws an error if the url parameter is not specified or
                is not a string</prose>
                </description>
              </exception>
              <exception>
                <types>
                  <type ref="Error"/>
                </types>
                <ctype>
                  <name name="Error"/>
                </ctype>
                <description>
                  <prose>This method throws an error if the callback parameter is not specified or
                is not a function</prose>
                </description>
              </exception>
              <exception>
                <types>
                  <type ref="Error"/>
                </types>
                <ctype>
                  <name name="Error"/>
                </ctype>
                <description>
                  <prose>This method throws an error if the optianl error callback parameter is specified but
                is not a function</prose>
                </description>
              </exception>
            </method>
            <method name="H.net.ImageLoader#onImageLoad_" local-name="onImageLoad_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This callback is called when the async queue has processed a task.</p></prose>
              </description>
              <param name="task">
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the completed task</p></prose>
                </description>
              </param>
              <param name="result">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all/>
                </ctype>
                <description>
                  <prose><p>the result image element or null in case of an error</p></prose>
                </description>
              </param>
              <param name="opt_failure" optional="true">
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
                <description>
                  <prose><p>the error message or undefined in the case of success</p></prose>
                </description>
              </param>
            </method>
            <property name="H.net.ImageLoader.dataUrlRegExp_" local-name="dataUrlRegExp_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>Regular expression for checking whether image source is a data URL</p></prose>
              </description>
              <types>
                <type ref="RegExp"/>
              </types>
              <ctype>
                <name name="RegExp"/>
              </ctype>
            </property>
            <method name="H.net.ImageLoader#process_" local-name="process_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The process function for the async queue.</p></prose>
              </description>
              <param name="task">
                <types>
                  <type ref="H.util.AsyncQueue.Task"/>
                </types>
                <ctype>
                  <name name="H.util.AsyncQueue.Task"/>
                </ctype>
                <description>
                  <prose><p>the task to be executed</p></prose>
                </description>
              </param>
            </method>
            <method name="H.net.ImageLoader#newImage_" local-name="newImage_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function acts as a factory for an image tag with onload and onerror
attached.</p></prose>
              </description>
              <param name="onload">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func/>
                </ctype>
                <description>
                  <prose><p>the onload handler</p></prose>
                </description>
              </param>
              <param name="onerror">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <union>
                        <type>
                          <name name="Event"/>
                        </type>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                      </union>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the onerror handler</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the image wrap</p></prose>
                </description>
              </returns>
            </method>
            <method name="H.net.ImageLoader#newImageFramed_" local-name="newImageFramed_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>This function acts as a factory for an image tag that resides inside a
loader frame with onload and onerror attached.</p></prose>
              </description>
              <param name="onload">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func/>
                </ctype>
                <description>
                  <prose><p>the onload handler</p></prose>
                </description>
              </param>
              <param name="onerror">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <union>
                        <type>
                          <name name="Event"/>
                        </type>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                      </union>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the onerror handler</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>the image wrap</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <class name="H.net.FrameLoader_" local-name="FrameLoader_" access="private" scope="static" virtual="false" published="false" exported="false">
            <description>
              <prose><p>The frame loader encapsulates image tags in IFrames</p></prose>
            </description>
            <constructor local-name="FrameLoader_" name="H.net.FrameLoader_">
              <param name="doc">
                <types>
                  <type ref="HTMLDocument"/>
                </types>
                <ctype>
                  <name name="HTMLDocument"/>
                </ctype>
                <description>
                  <prose><p>the host document</p></prose>
                </description>
              </param>
            </constructor>
            <method name="H.net.FrameLoader_#newImage_" local-name="newImage_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The image tag factory</p></prose>
              </description>
              <param name="onload">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func/>
                </ctype>
                <description>
                  <prose><p>the onload handler</p></prose>
                </description>
              </param>
              <param name="onerror">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <union>
                        <type>
                          <name name="Event"/>
                        </type>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <null/>
                        </type>
                      </union>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>the onerror handler</p></prose>
                </description>
              </param>
              <returns>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object"/>
                </ctype>
                <description>
                  <prose><p>an image wrap</p></prose>
                </description>
              </returns>
            </method>
          </class>
          <property name="H.net.images" local-name="images" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>This object is the default instance of an image loader. It is automatically initialized when the API is loaded
with parameters depending on the host environment. This object can be replaced by a different image loader in
case the behavior needs to be changed.</p></prose>
            </description>
            <types>
              <type ref="H.net.ImageLoader"/>
            </types>
            <ctype>
              <name name="H.net.ImageLoader"/>
            </ctype>
          </property>
          <class name="H.net.Xhr" local-name="Xhr" access="public" scope="static" virtual="false" published="false" exported="true">
            <description>
              <prose><p>Sends a XHR request and invokes the provided callback once the request finished.
Must not be published, platform-API internal use only!</p></prose>
            </description>
            <constructor local-name="Xhr" name="H.net.Xhr">
              <param name="url">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose><p>The absolute URL of the XHR service to be called</p></prose>
                </description>
              </param>
              <param name="callback">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <name name="string" optional="true"/>
                    </param>
                    <param>
                      <name name="string" optional="true"/>
                    </param>
                  </func>
                </ctype>
                <description>
                  <prose><p>The function to be called once the request
       finished. It gets the response text and an optional error type as arguments.
       Possible error types are:
       <ul>
         <li><code>undefined</code> - if no error occurred </li>
         <li><code>&quot;abort&quot;</code> - if the request was explicit aborted {@see H.net.Xhr.prototype.abort}}</li>
         <li><code>&quot;timeout&quot;</code> - if the request timed out {@see H.net.Xhr.Options#timeout} </li>
         <li><code>&quot;network&quot;</code> - if a <code>NetworkError</code> occurred </li>
         <li><code>&quot;cors&quot;</code> - if the cross origin request can not be made</li>
       </ul></p></prose>
                </description>
              </param>
              <param name="opt_options" optional="true">
                <types>
                  <type ref="H.net.Xhr.Options"/>
                </types>
                <ctype>
                  <name name="H.net.Xhr.Options" optional="true"/>
                </ctype>
                <description>
                  <prose><p>The optional parameters for this XHR request</p></prose>
                </description>
              </param>
            </constructor>
            <property name="H.net.Xhr#callback_" local-name="callback_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the callback function</p></prose>
              </description>
              <types>
                <type ref="function"/>
              </types>
              <ctype>
                <func>
                  <param>
                    <unknown/>
                  </param>
                  <param>
                    <union>
                      <type>
                        <name name="string"/>
                      </type>
                      <type>
                        <undefined/>
                      </type>
                    </union>
                  </param>
                </func>
              </ctype>
            </property>
            <property name="H.net.Xhr#request_" local-name="request_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A reference to the native XHR / XDR object</p></prose>
              </description>
              <types>
                <type ref="XMLHttpRequest"/>
                <type ref="XDomainRequest"/>
              </types>
              <ctype>
                <union>
                  <type>
                    <name name="XMLHttpRequest"/>
                  </type>
                  <type>
                    <name name="XDomainRequest"/>
                  </type>
                </union>
              </ctype>
            </property>
            <property name="H.net.Xhr.defaultOptions_" local-name="defaultOptions_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>The deafault options to re-use for the constructor</p></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <name name="Object"/>
              </ctype>
            </property>
            <property name="H.net.Xhr.XhrCorsSupport_" local-name="XhrCorsSupport_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A flag to indicate if the XMLHttpRequest supports CORS requests</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <property name="H.net.Xhr.XhrTimeoutSupport_" local-name="XhrTimeoutSupport_" access="private" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A flag to indicate if the XMLHttpRequest supports timeout property</p></prose>
              </description>
              <types>
                <type ref="boolean"/>
              </types>
              <ctype>
                <name name="boolean"/>
              </ctype>
            </property>
            <method name="H.net.Xhr#addEventListener_" local-name="addEventListener_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>X-browser helper to add an event listener</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="listener">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <unknown/>
                    </param>
                    <return>
                      <unknown/>
                    </return>
                  </func>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.net.Xhr#removeEventListener_" local-name="removeEventListener_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>X-browser helper to remove an event listener</p></prose>
              </description>
              <param name="type">
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string"/>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
              <param name="listener">
                <types>
                  <type ref="function"/>
                </types>
                <ctype>
                  <func>
                    <param>
                      <unknown/>
                    </param>
                    <return>
                      <unknown/>
                    </return>
                  </func>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <method name="H.net.Xhr#abort" local-name="abort" access="public" scope="instance" virtual="false" published="false" exported="true">
              <description>
                <prose><p>It aborts an ongoing request.
If the request is not already finished, the request's callback is invoked with error &quot;abort&quot;</p></prose>
              </description>
            </method>
            <method name="H.net.Xhr#onfinished_" local-name="onfinished_" access="private" scope="instance" virtual="false" published="false" exported="false">
              <description>
                <prose><p>A listener for &quot;timeout&quot;, &quot;abort&quot;, &quot;error&quot; and &quot;load&quot; events</p></prose>
              </description>
              <param name="evt">
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <record>
                    <field>
                      <key>
                        <name name="type"/>
                      </key>
                      <value>
                        <name name="string"/>
                      </value>
                    </field>
                  </record>
                </ctype>
                <description>
                  <prose></prose>
                </description>
              </param>
            </method>
            <typedef name="H.net.Xhr.Options" local-name="Options" access="public" scope="static" virtual="false" published="false" exported="false">
              <description>
                <prose></prose>
              </description>
              <types>
                <type ref="Object"/>
              </types>
              <ctype>
                <record>
                  <field>
                    <key>
                      <name name="timeout"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="number"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="withCredentials"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="boolean"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="method"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="string"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="data"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <all/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                  <field>
                    <key>
                      <name name="headers"/>
                    </key>
                    <value>
                      <union>
                        <type>
                          <name name="Object"/>
                        </type>
                        <type>
                          <undefined/>
                        </type>
                      </union>
                    </value>
                  </field>
                </record>
              </ctype>
              <property name="H.net.Xhr.Options#timeout" local-name="timeout" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The number of milliseconds to wait before the request timed out (0 means no timeout)</p></prose>
                </description>
                <types>
                  <type ref="number"/>
                </types>
                <ctype>
                  <name name="number" optional="true"/>
                </ctype>
              </property>
              <property name="H.net.Xhr.Options#withCredentials" local-name="withCredentials" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Indicates whether user credentials should be included with the request, defaults to <code>false</code>
          This option is ignored by IE9 because of technical limitations.</p></prose>
                </description>
                <types>
                  <type ref="boolean"/>
                </types>
                <ctype>
                  <name name="boolean" optional="true"/>
                </ctype>
              </property>
              <property name="H.net.Xhr.Options#method" local-name="method" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The http request method which should be used. (i.e GET, POST...)</p></prose>
                </description>
                <types>
                  <type ref="string"/>
                </types>
                <ctype>
                  <name name="string" optional="true"/>
                </ctype>
              </property>
              <property name="H.net.Xhr.Options#data" local-name="data" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>The data which will be send by the request. For more details see native <code>XMLHttpRequest#send</code> method.
          more details.</p></prose>
                </description>
                <types>
                  <type ref="*"/>
                </types>
                <ctype>
                  <all optional="true"/>
                </ctype>
              </property>
              <property name="H.net.Xhr.Options#headers" local-name="headers" access="public" scope="" virtual="false" published="false" exported="false" optional="true">
                <description>
                  <prose><p>Map of request headers and their values which should
          be set for the current request</p></prose>
                </description>
                <types>
                  <type ref="Object"/>
                </types>
                <ctype>
                  <name name="Object" optional="true"/>
                </ctype>
              </property>
            </typedef>
          </class>
        </ns>
        <method name="H.buildInfo" local-name="buildInfo" access="public" scope="static" virtual="false" published="false" exported="true">
          <description>
            <prose><p>Function returns the module build information</p></prose>
          </description>
          <returns>
            <types>
              <type ref="H.util.BuildInfo"/>
            </types>
            <ctype>
              <name name="H.util.BuildInfo"/>
            </ctype>
            <description>
              <prose></prose>
            </description>
          </returns>
        </method>
      </ns>
    </symbols>
  </module>
</modules>
