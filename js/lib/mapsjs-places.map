{
	"version": 3,
	"file": "mapsjs-placesjs",
	"lineCount": 41,
	"mappings": "AAAA,IAAA,CAAA,CAwCIA,GAAOA,EAAPA,EAAe,EAxCnB,CA8CAC,EAAc,IAqLSC,SAAQ,GAAA,CAACC,CAAD,CAAgB,CACzCC,CAAAA,CAAQD,CAAAE,MAAA,CAAW,GAAX,CAEZ,KADA,IAAIC,EAAiBL,CAArB,CACSM,CAAT,CAAeA,CAAf,CAAsBH,CAAAI,MAAA,EAAtB,CAAA,CACE,GAqkBY,IArkBZ,EAAyBF,CAAAG,CAAIF,CAAJE,CAAzB,CACEH,CAAA,CAAMA,CAAA,CAAIC,CAAJ,CADR,KAGE,OAAO,KAGX,OAAOD,EAVsC,CA8K3BI,QAAQ,GAAA,EAAG;AA8RjBC,QAAQ,EAAA,CAACC,CAAD,CAAQ,CAC5B,IAAIC,EAAI,MAAOD,EACf,IAAS,QAAT,EAAIC,CAAJ,CACE,GAAID,CAAJ,CAAW,CAMT,GAAIA,CAAJ,WAAqBE,MAArB,CACE,MAAO,OACF,IAAIF,CAAJ,WAAqBG,OAArB,CACL,MAAOF,EAMT,KAAIG,EAAYD,MAAAE,UAAAC,SAAAC,KAAA,CACWP,CADX,CAKhB,IAAiB,iBAAjB,EAAII,CAAJ,CACE,MAAO,QAqBT,IAAkB,gBAAlB,EAAKA,CAAL,EAI4B,QAJ5B,EAIK,MAAOJ,EAAAQ,OAJZ,EAK4B,WAL5B,EAKK,MAAOR,EAAAS,OALZ,EAM0C,WAN1C,EAMK,MAAOT,EAAAU,qBANZ,EAOM,CAAAV,CAAAU,qBAAA,CAA2B,QAA3B,CAPN,CAUE,MAAO,OAgBT,IAAkB,mBAAlB,EAAKN,CAAL,EACyB,WADzB,EACI,MAAOJ,EAAAO,KADX,EAEyC,WAFzC,EAEI,MAAOP,EAAAU,qBAFX,EAGK,CAAAV,CAAAU,qBAAA,CAA2B,MAA3B,CAHL,CAIE,MAAO,UAxEA,CAAX,IA6EE,OAAO,MA9EX;IAiFO,IAAS,UAAT,EAAIT,CAAJ,EAA4C,WAA5C,EAAuB,MAAOD,EAAAO,KAA9B,CAML,MAAO,QAET,OAAON,EA3FqB,CAuGjBU,QAAQ,EAAA,CAACd,CAAD,CAAM,CACzB,MAAee,KAAAA,EAAf,GAAOf,CADkB,CA2CRgB,QAAQ,GAAA,CAAChB,CAAD,CAAM,CAC/B,IAAIiB,EAAOf,CAAA,CAAYF,CAAZ,CACX,OAAe,OAAf,EAAOiB,CAAP,EAAkC,QAAlC,EAA0BA,CAA1B,EAAmE,QAAnE,EAA8C,MAAOjB,EAAAW,OAFtB,CAsBjBO,QAAQ,EAAA,CAAClB,CAAD,CAAM,CAC5B,MAAqB,QAArB,EAAO,MAAOA,EADc,CAyCdmB,QAAQ,GAAA,CAACnB,CAAD,CAAM,CAC5B,IAAIiB,EAAO,MAAOjB,EAClB,OAAe,QAAf,EAAOiB,CAAP,EAAkC,IAAlC,EAA2BjB,CAA3B,EAAkD,UAAlD,EAA0CiB,CAFd,CAmBhBG,QAAQ,EAAA,CAACC,CAAD,CAAM,CAM1B,MAAOA,EAAA,CAAIC,EAAJ,CAAP,GACKD,CAAA,CAAIC,EAAJ,CADL,CAC+B,EAAEC,EADjC,CAN0B,CAuC5B,IAAAD,GAAqB,cAArBA,EAAwD,GAAxDA,CAAwCE,IAAAC,OAAA,EAAxCH,GAAiE,CAAjEA,CAAA,CAQAC,GAAmB,CAmEAG,SAAQ,GAAA,CAACC,CAAD,CAAKC,CAAL,CAAcC,CAAd,CAAwB,CACjD,MAAiCF,EAAAjB,KAAAoB,MAAA,CAAcH,CAAAI,KAAd,CAAuBC,SAAvB,CADgB;AAgBpCC,QAAQ,GAAA,CAACN,CAAD,CAAKC,CAAL,CAAcC,CAAd,CAAwB,CAC7C,GAAKF,CAAAA,CAAL,CACE,KAAUO,MAAJ,EAAN,CAGF,GAAuB,CAAvB,CAAIF,SAAArB,OAAJ,CAA0B,CACxB,IAAIwB,EAAY9B,KAAAG,UAAA4B,MAAA1B,KAAA,CAA2BsB,SAA3B,CAAsC,CAAtC,CAChB,OAAO,SAAQ,EAAG,CAEhB,IAAIK,EAAUhC,KAAAG,UAAA4B,MAAA1B,KAAA,CAA2BsB,SAA3B,CACd3B,MAAAG,UAAA8B,QAAAR,MAAA,CAA8BO,CAA9B,CAAuCF,CAAvC,CACA,OAAOR,EAAAG,MAAA,CAASF,CAAT,CAAkBS,CAAlB,CAJS,CAFM,CAUxB,MAAO,SAAQ,EAAG,CAChB,MAAOV,EAAAG,MAAA,CAASF,CAAT,CAAkBI,SAAlB,CADS,CAfyB,CA8CnCO,QAAQ,EAAA,CAACZ,CAAD,CAAKC,CAAL,CAAcC,CAAd,CAAwB,CAWxCU,CAAA,CATEC,QAAAhC,UAAAuB,KAAJ,EAQkE,EARlE,EAQIS,QAAAhC,UAAAuB,KAAAtB,SAAA,EAAAgC,QAAA,CAA2C,aAA3C,CARJ,CAScf,EATd,CAWcO,EAEd,OAAOS,EAAAZ,MAAA,CAAgB,IAAhB,CAAsBE,SAAtB,CAfmC,CAoE5C,IAAAW,GAAiCC,IAAAC,IAAjCF,EAA+C,QAAQ,EAAG,CAGxD,MAAO,CAAC,IAAIC,IAH4C,CAwQtCE;QAAQ,EAAA,CAACC,CAAD,CAAaC,CAAb,CAA2C,CAntCrE,IAAIrD,EAotCaoD,CAptCLnD,MAAA,CAAW,GAAX,CAAZ,CACIC,EAA8BL,CAK5BG,EAAA,CAAM,CAAN,CAAN,EAAkBE,EAAlB,EAA0BoD,CAAApD,CAAAoD,WAA1B,EACEpD,CAAAoD,WAAA,CAAe,MAAf,CAAwBtD,CAAA,CAAM,CAAN,CAAxB,CASF,KAAK,IAAIG,CAAT,CAAeH,CAAAgB,OAAf,GAAgCb,CAAhC,CAAuCH,CAAAI,MAAA,EAAvC,EAAA,CACOY,CAAAhB,CAAAgB,OAAL,EAAqBG,CAAA,CAmsCMkC,CAnsCN,CAArB,CAEEnD,CAAA,CAAIC,CAAJ,CAFF,CAmsC2BkD,CAnsC3B,CAIEnD,CAJF,CAGWA,CAAA,CAAIC,CAAJ,CAAJ,CACCD,CAAA,CAAIC,CAAJ,CADD,CAGCD,CAAA,CAAIC,CAAJ,CAHD,CAGa,EA4rC+C,CAgDvDoD,QAAQ,EAAA,CAACC,CAAD,CAAYC,CAAZ,CAAwB,CAE9CC,QAASA,EAAQ,EAAG,EACpBA,CAAA7C,UAAA,CAAqB4C,CAAA5C,UACrB2C,EAAAG,GAAA,CAAwBF,CAAA5C,UACxB2C,EAAA3C,UAAA,CAAsB,IAAI6C,CALoB,C,CCv7CNE,QAAQ,GAAA,CAACC,CAAD,CAAW,CAC3D,MAAO,EDmyBO,ICnyBP,EAAuBA,CAAAxD,OAAvB,EAAqE,GAArE,GAA8CwD,CAAA,OAA9C,CADoD,C,CCChCC,QAAQ,GAAA,CAACC,CAAD,CAAUC,CAAV,CAAqB,CACxD,GFkyBc,IElyBd,EAA0BD,CAA1B,CACE,KAAUxB,MAAJ,CAAU,SAAU,0BAAV,CAAV,CAAN,CAcF,IAAI0B,CAAJ,CAXMC,EAAI,EACR,IF6xBY,IE7xBZ,EAU+BF,CAV/B,CAAqC,CAC/BG,CAAAA,CAAM,EACV,KAASC,CAAT,GAQ6BJ,EAR7B,CAQ6BA,CAPvBK,eAAA,CAAyBD,CAAzB,CAAJ,EACED,CAAAG,KAAA,CAASC,kBAAA,CAAmBH,CAAnB,CAAT,CAAiC,GAAjC,CAAuCG,kBAAA,CAMdP,CANiC,CAAUI,CAAV,CAAnB,CAAvC,CAEFF,EAAA,CAAIC,CAAAK,KAAA,CAAS,GAAT,CAN6B,CAQrC,CAAA,CAAON,CAGgB,EAAzB,CAAID,CAAAjD,OAAJ,GAEI+C,CAFJ,CAC6B,CAA3B,CAAIA,CAAAjB,QAAA,CAAgB,GAAhB,CAAJ,CACYiB,CADZ,CACsB,GADtB,CAGYA,CAHZ,CAGsB,GAJxB,CAOA,OAAOA,EAAP,CAAiBE,CAxBuC,C,CCkejCQ,QAAQ,GAAA,CAACN,CAAD,CAAsC,CAWnE,GAAK,CAAAO,EAAAC,KAAA,CAAwBR,CAAxB,CAAL,CAAmC,MAAOA,EAGjB,GAAzB,EAAIA,CAAArB,QAAA,CAAY,GAAZ,CAAJ,GACEqB,CADF,CACQA,CAAAS,QAAA,CAAYC,EAAZ,CAAkC,OAAlC,CADR,CAGyB,GAAzB,EAAIV,CAAArB,QAAA,CAAY,GAAZ,CAAJ,GACEqB,CADF,CACQA,CAAAS,QAAA,CAAYE,EAAZ,CAA+B,MAA/B,CADR,CAGyB,GAAzB,EAAIX,CAAArB,QAAA,CAAY,GAAZ,CAAJ,GACEqB,CADF,CACQA,CAAAS,QAAA,CAAYG,EAAZ,CAA+B,MAA/B,CADR,CAGyB,GAAzB,EAAIZ,CAAArB,QAAA,CAAY,GAAZ,CAAJ,GACEqB,CADF,CACQA,CAAAS,QAAA,CAAYI,EAAZ,CAAiC,QAAjC,CADR,CAGA,OAAOb,EA1B4D,CAoCvE,IAAAU,GAAuB,IAAvB,CAQAC,GAAoB,IARpB,CAgBAC,GAAoB,IAhBpB,CAwBAC,GAAsB,KAxBtB,CAgCAC,GAAqB,SA0jBUC,SAAQ,GAAA,CAACC,CAAD,CAAOC,CAAP,CAAc,CACnD,MAAID,EAAJ,CAAWC,CAAX,CACU,EADV,CAEWD,CAAJ,CAAWC,CAAX,CACE,CADF,CAGA,CAN4C,C,CCnlClC,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EA+DiBC,SAAQ,GAAA,EAAG,CAC7C,MAAOxF,EAAA,UAAA,CAA2BA,CAAA,UAAAyF,UAA3B,CAAgE,IAD1B,CAQjBC,QAAQ,GAAA,EAAG,CAIvC,MAAO1F,EAAA,UAJgC,CAqDvC2F,EAAA,CAfAC,EAeA,CAvBAC,EAuBA,CAhCAC,CAgCA,CAhCgC,CAAA,CAkChC,KAAIC,CACJ,IACKA,CADL,CACUP,EAAA,EADV,CACgD,CAC9C,IAAIQ,GAAYN,EAAA,EAChBI,EAAA,CAAuD,CAAvD,EAAgCC,CAAA9C,QAAA,CAAW,OAAX,CAChC4C,GAAA,CAA6B,CAACC,CAA9B,EAC2B,EAD3B,EACIC,CAAA9C,QAAA,CAAW,MAAX,CAI6B,EAHjC2C,EAGiC,CAHA,CAACE,CAGD,EAFJ,EAEI,EAF7BC,CAAA9C,QAAA,CAAW,QAAX,CAE6B,GAC7B8C,CAAA9C,QAAA,CAAW,QAAX,CACJ0C,GAAA,CAAgC,CAACG,CAAjC,EACI,CAACF,EADL,EAC4D,OAD5D,EACuCI,EAAAC,QAXO,CAyBlD,IAAAC,GACkCJ,CADlC,CASAK,EAC+BN,EAV/B,CAkBAO,GAEIT,EApBJ,CA4BAU,EAEIT,EA9BJ,CAoEAU,EApEA,CAyDMN,GAAYN,EAAA,EAChB,GAAA,CAAOM,EAAP,EAAoBA,EAAAO,SAApB,EAA0C,EAoFSD,GD4kB5CrD,QAAA,CC3kBHuD,KD2kBG,CCnkBHF,GDmkBGrD,QAAA,CCnkBsBuD,KDmkBtB,CC5jB8CF,GD4jB9CrD,QAAA,CC3jBHuD,OD2jBG,CCpjByBd,GAAA,EAAF,EDojBvBzC,CCnjBkByC,EAAA,EAAA,WDmjBlBzC,ECnjBiE,EDmjBjEA,SAAA,CCljBCuD,KDkjBD,CC/iBP,KAAIT,EAAKP,EAAA,EAO2BO,EAAF,EAAQA,CAAA9C,QAAA,CAAW,SAAX,CAOP8C,EAAF,EAAQA,CAAA9C,QAAA,CAAW,QAAX,CAOR8C;CAAF,EAAQA,CAAA9C,QAAA,CAAW,MAAX,CAkHPwD,SAAQ,GAAA,EAAG,CAE3C,IAAIC,EAAM1G,CAAA,SACV,OAAO0G,EAAA,CAAMA,CAAA,aAAN,CAA4BnF,IAAAA,EAHQ,CAY7C,IAAAoF,EAxD8C,EAAA,CAAA,CAAA,IAMxCC,GAAU,EAN8B,CAM1BC,CAElB,IAAIX,EAAJ,EAA4BlG,CAAA,MAA5B,CACE,IAAI8G,GAAe9G,CAAA,MAAA4G,QAAnB,CACAA,GAAiC,UAAvB,EAAA,MAAOE,GAAP,CAAoCA,EAAA,EAApC,CAAqDA,EAFjE,KAYE,IARIV,EAAJ,CACES,CADF,CACO,qBADP,CAEWV,CAAJ,CACLU,CADK,CACA,wBADA,CAEIR,CAFJ,GAILQ,CAJK,CAIA,eAJA,CAMHA,CAAAA,CAAJ,CACE,IAAIE,GAAMF,CAAAG,KAAA,CAAQxB,EAAA,EAAR,CAAV,CACAoB,GAAUG,EAAA,CAAMA,EAAA,CAAI,CAAJ,CAAN,CAAe,EAG7B,IAAIZ,CAAJ,CAAuB,CAMrB,IAAIc,GAAUR,EAAA,EACd,IAAIQ,EAAJ,CAAcC,UAAA,CAAWN,EAAX,CAAd,CAAmC,CACjC,EAAA,CAAOO,MAAA,CAAOF,EAAP,CAAP,OAAA,CADiC,CAPd,CAWvB,EAAA,CAAOL,EApCqC,CAkF9C,IAAAQ,GAAiC,EAiBNC;QAAQ,EAAA,CAACT,CAAD,CAAU,CAEvC,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CDshBAU,CAAAA,CAAQ,CAQZ,KALA,IAAIC,EAA0BJ,MAAA7C,CCvhBMqC,EDuhBNrC,CAnxBvBS,QAAA,CAAY,wBAAZ,CAAsC,EAAtC,CAmxBM3E,MAAA,CAAyC,GAAzC,CAAb,CACIoH,EAA0BL,MAAA7C,CCzhBzBmD,CDyhByBnD,CApxBvBS,QAAA,CAAY,wBAAZ,CAAsC,EAAtC,CAoxBM3E,MAAA,CAAyC,GAAzC,CADb,CAEIsH,EAAW1F,IAAA2F,IAAA,CAASJ,CAAApG,OAAT,CAAwBqG,CAAArG,OAAxB,CAFf,CAKSyG,EAAS,CAAlB,CAA8B,CAA9B,EAAqBN,CAArB,EAAmCM,CAAnC,CAA4CF,CAA5C,CAAsDE,CAAA,EAAtD,CAAgE,CAC9D,IAAIC,EAAQN,CAAA,CAAOK,CAAP,CAARC,EAA0B,EAA9B,CACIC,EAAQN,CAAA,CAAOI,CAAP,CAARE,EAA0B,EAD9B,CAMIC,EAAe,aANnB,CAOIC,EAAe,aACnB,GAAG,CACD,IAAIC,EAASF,CAAAf,KAAA,CAAkBa,CAAlB,CAATI,EAAqC,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAAzC,CACIC,EAASF,CAAAhB,KAAA,CAAkBc,CAAlB,CAATI,EAAqC,CAAC,EAAD,CAAK,EAAL,CAAS,EAAT,CAEzC,IAAwB,CAAxB,EAAID,CAAA,CAAO,CAAP,CAAA9G,OAAJ,EAAiD,CAAjD,EAA6B+G,CAAA,CAAO,CAAP,CAAA/G,OAA7B,CACE,KAYFmG,EAAA,CAAQjC,EAAA,CAP4B,CAApB8C,EAAAF,CAAA,CAAO,CAAP,CAAA9G,OAAAgH,CAAwB,CAAxBA,CAA4BC,QAAA,CAASH,CAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CAOpC,CAN4B,CAApBI,EAAAH,CAAA,CAAO,CAAP,CAAA/G,OAAAkH,CAAwB,CAAxBA,CAA4BD,QAAA,CAASF,CAAA,CAAO,CAAP,CAAT,CAAoB,EAApB,CAMpC,CAAR,EACI7C,EAAA,CAAiD,CAAjD,EAA6B4C,CAAA,CAAO,CAAP,CAAA9G,OAA7B,CACwB,CADxB,EACI+G,CAAA,CAAO,CAAP,CAAA/G,OADJ,CADJ,EAGIkE,EAAA,CAA6B4C,CAAA,CAAO,CAAP,CAA7B,CAAwCC,CAAA,CAAO,CAAP,CAAxC,CApBH,CAAH,MAsBkB,CAtBlB;AAsBSZ,CAtBT,CAT8D,CC7hB3D,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,ED+jBEA,CChkBH,CADJ,MACI,EAFuC,CA+B3C,IAAIZ,GAAM1G,CAAA,SAAV,CADFsI,GAEO5B,EAAL,EAAaP,CAAb,CAGWM,EAAA8B,EAHX,GAIqC,YAArB,EAAA7B,EAAA,WAAA,CACZ0B,QAAA,CAASzB,EAAT,CAAiC,EAAjC,CADY,CAC2B,CAL3C,EAAA,IAAA,E,CC5XF,IAAA6B,GAA8BC,MAAJ,CACtB,gHADsB,C,CCxJRC,QAAQ,GAAA,EAAG,CAuCKC,CAtChC,EAAuCC,EAAvC,EAE6BhH,CAAA,CAAY,IAAZ,CAHF,CAe3BiH,IAAAA,GAAKA,C,CC0MP,IAAAC,GAAqC,C,CC/NdC,QAAQ,GAAA,EAAG,EAwElC,CAAA,CAtGA,EAAAC,UAsGAC,EAAAC,IAAA,CAAqC,CAOrCD,EAAAE,EAAA,CAAyC,CAAA,CAOzCF,EAAAG,EAAA,CAA0C,CAAA,CAqB1CH,EAAAI,EAAA,CAAsCC,QAAQ,CAACC,CAAD,CAAWC,CAAX,CAAkBC,CAAlB,CAAuBhI,CAAvB,CACCiI,CADD,CACUC,CADV,CACuB,CAGnE,GRyuB2B,UQzuB3B,ERyuBOjJ,CAAA,CQzuBa6I,CRyuBb,CQzuBP,CACE,IAAAK,EAAA,CAA2B,CAAA,CAD7B,KAEO,IAAIL,CAAJ,EAAgBA,CAAAM,YAAhB,ERuuBoB,UQvuBpB,ERuuBAnJ,CAAA,CQtuBa6I,CAAAM,YRsuBb,CQvuBA,CAEL,IAAAD,EAAA,CAA2B,CAAA,CAFtB,KAIL,MAAMlH,MAAA,CAAM,2BAAN,CAAN,CAGF,IAAA6G,EAAA,CAAgBA,CAChB,KAAAC,EAAA,CAAaA,CACb,KAAAC,IAAA,CAAWA,CACX,KAAAhI,KAAA,CAAYA,CACZ,KAAAiI,EAAA,CAAe,CAAEA,CAAAA,CACjB,KAAAI,EAAA,CAAeH,CACf,KAAAP,EAAA,CAAgB,CAAA,CAChB,KAAAF,IAAA,CDyGO,EAAEJ,ECxGT,KAAAK,EAAA,CAAe,CAAA,CApBoD,CA6BrEF,EAAAY,YAAA,CAA6CE,QAAQ,CAACC,CAAD,CAAc,CACjE,MAAI,KAAAJ,EAAJ,CACS,IAAAL,EAAArI,KAAA,CAAmB,IAAA4I,EAAnB,EAAmC,IAAAL,IAAnC,CAA6CO,CAA7C,CADT,CAGO,IAAAT,EAAAM,YAAA3I,KAAA,CAA+B,IAAAqI,EAA/B,CAA8CS,CAA9C,CAJ0D,C,CCwC3CC,QAAQ,GAAA,CAACpI,CAAD,CAAM,CACpC,IAAIqI,EAAM,EAAV,CACIC,EAAI,CADR,CAESjB,CAAT,KAASA,CAAT,GAAgBrH,EAAhB,CACEqI,CAAA,CAAIC,CAAA,EAAJ,CAAA,CAAWtI,CAAA,CAAIqH,CAAJ,CAEb,OAAOgB,EAN6B,CAgBhBE,QAAQ,GAAA,CAACvI,CAAD,CAAM,CAClC,IAAIqI,EAAM,EAAV,CACIC,EAAI,CADR,CAESjB,CAAT,KAASA,CAAT,GAAgBrH,EAAhB,CACEqI,CAAA,CAAIC,CAAA,EAAJ,CAAA,CAAWjB,CAEb,OAAOgB,EAN2B,CA6RpC,IAAAG,GAAgC,+FAAA,MAAA,CAAA,GAAA,CAyBXC,SAAQ,GAAA,CAACC,CAAD,CAASlI,CAAT,CAAmB,CAE9C,IAF8C,IAC1C6G,CAD0C,CACrCsB,CADqC,CAErCL,EAAI,CAAb,CAAgBA,CAAhB,CAAoB3H,SAAArB,OAApB,CAAsCgJ,CAAA,EAAtC,CAA2C,CACzCK,CAAA,CAAShI,SAAA,CAAU2H,CAAV,CACT,KAAKjB,CAAL,GAAYsB,EAAZ,CACED,CAAA,CAAOrB,CAAP,CAAA,CAAcsB,CAAA,CAAOtB,CAAP,CAShB,KAAK,IAAIuB,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,EAAAvJ,OAApB,CAA0DsJ,CAAA,EAA1D,CACEvB,CACA,CADMmB,EAAA,CAA8BI,CAA9B,CACN,CAAI3J,MAAAE,UAAAwD,eAAAtD,KAAA,CAAqCsJ,CAArC,CAA6CtB,CAA7C,CAAJ,GACEqB,CAAA,CAAOrB,CAAP,CADF,CACgBsB,CAAA,CAAOtB,CAAP,CADhB,CAduC,CAFG,C,CC9evByB,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,INmgBvB,EMngBuBA,CNmgBhBxE,CMngBgBwE,EAAoDA,CAApDA,ENmgBKrC,EMngBLqC,CAAvBA,KAAAA,GAAuBA,EAAvBA,CAMAC,GAAiCzE,CAAjCyE,EACIA,CAACvD,CAAAuD,CAAyBA,GAAzBA,CAK2BvE,EAAAA,CAADwE,EAC3BxD,CAAAwD,CAAyBA,KAAzBA,CAMAzE,GAAA0E,EAAwBzD,CAAAyD,CAAyBA,MAAzBA,CAAxBA,EACA3E,CADA2E,EACqBzD,CAAAyD,CAAyBA,GAAzBA,CADrBA,EAEA5E,EAFA4E,EAEwBzD,CAAAyD,CAAyBA,KAAzBA,CAFxBA,EAGAzE,CAHAyE,EAGyBzD,CAAAyD,CAAyBA,KAAzBA,CAOzB1E,GAAA2E,EAAyBA,CAAA1D,CAAA0D,CAAyBA,GAAzBA,CAAzBA,EACA5E,CADA4E,EACsB1D,CAAA0D,CAAyBA,GAAzBA,C,CCL5B,IAAAC,EAA8BnK,KAAAG,UAA9B,CAsBAiK,GACqBC,CAAAjI,QAAA,CACjB,QAAQ,CAAC8D,CAAD,CAAMlF,CAAN,CAAWsJ,CAAX,CAA0B,CAGhC,MAAOC,EAAAnI,QAAA/B,KAAA,CAAyC6F,CAAzC,CAA8ClF,CAA9C,CAAmDsJ,CAAnD,CAHyB,CADjB,CAMjB,QAAQ,CAACpE,CAAD,CAAMlF,CAAN,CAAWsJ,CAAX,CAA0B,CAC5BE,CAAAA,CAA6B,IAAjB,EAAAF,CAAA,CACZ,CADY,CACS,CAAhB,CAAAA,CAAA,CACAnJ,IAAA2F,IAAA,CAAS,CAAT,CAAYZ,CAAA5F,OAAZ,CAAyBgK,CAAzB,CADA,CAC0CA,CAEnD,IAAIzJ,CAAA,CAAcqF,CAAd,CAAJ,CAEE,MAAKrF,EAAA,CAAcG,CAAd,CAAL,EAAyC,CAAzC,EAA2BA,CAAAV,OAA3B,CAGO4F,CAAA9D,QAAA,CAAYpB,CAAZ,CAAiBwJ,CAAjB,CAHP,CACU,EAKZ,KAAA,CAAwBlB,CAAxB,CAA4BpD,CAAA5F,OAA5B,CAAwCgJ,CAAA,EAAxC,CACE,GAAIA,CAAJ,GAASpD,EAAT,EAAgBA,CAAA,CAAIoD,CAAJ,CAAhB,GAA2BtI,CAA3B,CACE,MAAOsI,EAEX,OAAQ,EAjBwB,CA7BtC,CA2GAmB,GACqBC,CAAAC,QAAA,CACjB,QAAQ,CAACzE,CAAD,CAAM0E,CAAN,CAASC,CAAT,CAAkB,CAGxBC,CAAAH,QAAAtK,KAAA,CAAyC6F,CAAzC,CAA8C0E,CAA9C,CAAiDC,CAAjD,CAHwB,CADT,CAMjB,QAAQ,CAAC3E,CAAD,CAAM0E,CAAN,CAASC,CAAT,CAAkB,CAGxB,IAFA,IAAIE,EAAI7E,CAAA5F,OAAR,CACI0K,EAAOnK,CAAA,CAAcqF,CAAd,CAAA,CAAqBA,CAAA3G,MAAA,CAAU,EAAV,CAArB,CAAqC2G,CADhD,CAESoD,EAAI,CAAb,CAAgBA,CAAhB,CAAoByB,CAApB,CAAuBzB,CAAA,EAAvB,CACMA,CAAJ,GAAS0B,EAAT,EACEJ,CAAAvK,KAAA,CAAOwK,CAAP,CAAgBG,CAAA,CAAK1B,CAAL,CAAhB,CAAyBA,CAAzB,CAA4BpD,CAA5B,CALoB,CAkTZ+E;QAAQ,GAAA,CAAC/E,CAAD,CAAkB,CAC1C,IAAIoD,CAmB2C,EAAA,CAAA,CAnBbsB,CAAAA,CCsB9BM,EDAJ,KAFA,IAAIH,EApByB7E,CAoBrB5F,OAAR,CACI0K,EAAOnK,CAAA,CArBkBqF,CAqBlB,CAAA,CArBkBA,CAqBG3G,MAAA,CAAU,EAAV,CAArB,CArBkB2G,CAoB7B,CAESoD,EAAI,CAAb,CAAgBA,CAAhB,CAAoByB,CAApB,CAAuBzB,CAAA,EAAvB,CACE,GAAIA,CAAJ,GAAS0B,EAAT,EAAiBJ,CAAAvK,KAAA,CAxBcwK,IAAAA,EAwBd,CAAgBG,CAAA,CAAK1B,CAAL,CAAhB,CAAyBA,CAAzB,CAvBUpD,CAuBV,CAAjB,CAAmD,CACjD,CAAA,CAAOoD,CAAP,OAAA,CADiD,CAIrD,CAAA,CAAQ,EARuC,CAlB/C,MAAW,EAAJ,CAAAA,CAAA,CAAQ,IAAR,CAAezI,CAAA,CAAcqF,CAAd,CAAA,CAAqBA,CAAAiF,OAAA,CAAW7B,CAAX,CAArB,CAAqCpD,CAAA,CAAIoD,CAAJ,CAFjB,C,CElbxB8B,QAAQ,EAAA,CAACxK,CAAD,CAAOyK,CAAP,CAAmB,CAK7C,IAAAzK,KAAA,CAAYA,CAYZ,KAAA0K,cAAA,CANA,IAAA5B,OAMA,CANc2B,CAX+B,CA6C/CD,CAAAjL,UAAAoL,EAAA,CAAkD,CAAA,CAUlDH,EAAAjL,UAAAqL,iBAAA,CAA+C,CAAA,CAS/CJ,EAAAjL,UAAAsL,EAAA,CAA2C,CAAA,CAc3CL,EAAAjL,UAAAuL,eAAA,CAA6CC,QAAQ,EAAG,CACtD,IAAAH,iBAAA,CAAwB,CAAA,CACxB,KAAAC,EAAA,CAAoB,CAAA,CAFkC,C,CC/E/BG,QAAQ,GAAA,CAACC,CAAD,CAAI,CACnCD,EAAA,CAAuB,GAAvB,CAAA,CAA4BC,CAA5B,CACA,OAAOA,EAF4B,CAUrCD,EAAA,CAAuB,GAAvB,CAAA,CAA8BhM,E,CCOHkM,QAAQ,EAAA,CAACC,CAAD,CAAQC,CAAR,CAA2B,CACxDD,CAAJ,EACE,IAAAvD,EAAA,CAAUuD,CAAV,CAAiBC,CAAjB,CAF0D,CAK9DnJ,CAAA,CAAciJ,CAAd,CAAwCV,CAAxC,CA8BA,EAAA,CArGA,CAAAa,UAqGAC,EAAAxC,OAAA,CAA4C,IAe5CwC,EAAAC,cAAA,CAAmD,IAOnDD,EAAAE,QAAA,CAA6C,CAO7CF,EAAAG,QAAA,CAA6C,CAO7CH,EAAAI,QAAA,CAA6C,CAO7CJ,EAAAK,QAAA,CAA6C,CAO7CL,EAAAM,QAAA,CAA6C,CAO7CN,EAAAO,QAAA,CAA6C,CAO7CP,EAAAQ,OAAA,CAA4C,CAO5CR,EAAAS,QAAA,CAA6C,CAO7CT,EAAAU,SAAA,CAA8C,CAO9CV,EAAAW,QAAA,CAA6C,CAAA,CAO7CX,EAAAY,OAAA,CAA4C,CAAA,CAO5CZ,EAAAa,SAAA,CAA8C,CAAA,CAO9Cb,EAAAc,QAAA,CAA6C,CAAA,CAwB7Cd,EAAAe,EAAA,CAA4C,IAS5Cf;CAAA1D,EAAA,CAA0C0E,QAAQ,CAACC,CAAD,CAAInB,CAAJ,CAAuB,CACvE,IAAIpL,EAAO,IAAAA,KAAPA,CAAmBuM,CAAAvM,KACvBwM,EAAA/M,KAAA,CAAuB,IAAvB,CAA6BO,CAA7B,CAGA,KAAA8I,OAAA,CAAmCyD,CAAAzD,OAAnC,EAAgDyD,CAAAE,WAGhD,KAAA/B,cAAA,CAA0CU,CAE1C,KAAIG,EAAqCgB,CAAAhB,cACzC,IAAIA,CAAJ,CAKE,IAAI5G,EAAJ,CAAA,CACO,IAAA,CD5L0C,EAAA,CAAA,CAEnD,GAAI,CACFqG,EAAA,CCyLsCO,CDzLf,SAAvB,CACA,EAAA,CAAO,CAAA,CAAP,OAAA,CAFE,CAGF,MAAOgB,CAAP,CAAU,EACZ,CAAA,CAAO,CAAA,CAN4C,CC4L1C,CAAL,GACEhB,CADF,CACkB,IADlB,CADF,CAAA,CALF,ICtNWmB,WDkOJ,EAAI1M,CAAJ,CACLuL,CADK,CACWgB,CAAAI,YADX,CCjOGC,UDiOH,EAEI5M,CAFJ,GAGLuL,CAHK,CAGWgB,CAAAM,UAHX,CAMP,KAAAtB,cAAA,CAAqBA,CAIrB,KAAAC,QAAA,CAAgB5G,CAAD,EAAwC9E,IAAAA,EAAxC,GAA0ByM,CAAAf,QAA1B,CACXe,CAAAf,QADW,CACCe,CAAAO,OAChB,KAAArB,QAAA,CAAgB7G,CAAD,EAAwC9E,IAAAA,EAAxC,GAA0ByM,CAAAd,QAA1B,CACXc,CAAAd,QADW,CACCc,CAAAQ,OAEhB,KAAArB,QAAA,CAA6B5L,IAAAA,EAAd,GAAAyM,CAAAb,QAAA,CAA0Ba,CAAAb,QAA1B,CAAsCa,CAAAS,MACrD,KAAArB,QAAA,CAA6B7L,IAAAA,EAAd,GAAAyM,CAAAZ,QAAA,CAA0BY,CAAAZ,QAA1B;AAAsCY,CAAAU,MACrD,KAAArB,QAAA,CAAeW,CAAAX,QAAf,EAA4B,CAC5B,KAAAC,QAAA,CAAeU,CAAAV,QAAf,EAA4B,CAE5B,KAAAC,OAAA,CAAcS,CAAAT,OAEd,KAAAC,QAAA,CAAeQ,CAAAR,QAAf,EAA4B,CAC5B,KAAAC,SAAA,CAAgBO,CAAAP,SAAhB,GAAuC,UAAR,EAAAhM,CAAA,CAAqBuM,CAAAR,QAArB,CAAiC,CAAhE,CACA,KAAAE,QAAA,CAAeM,CAAAN,QACf,KAAAC,OAAA,CAAcK,CAAAL,OACd,KAAAC,SAAA,CAAgBI,CAAAJ,SAChB,KAAAC,QAAA,CAAeG,CAAAH,QAEf,KAAAc,MAAA,CAAaX,CAAAW,MACb,KAAAb,EAAA,CAAcE,CACVA,EAAA3B,iBAAJ,EACE,IAAAE,eAAA,EAEF,QAAO,IAAAH,EAzDgE,CA2HzEW;CAAAR,eAAA,CAAoDqC,QAAQ,EAAG,CAC7DC,CAAA/K,GAAAyI,eAAArL,KAAA,CAAyD,IAAzD,CACA,KAAI4N,EAAK,IAAAhB,EACT,IAAKgB,CAAAvC,eAAL,CA6BEuC,CAAAvC,eAAA,EA7BF,KAEE,IADAuC,CAAAC,YACIC,CADa,CAAA,CACbA,CAAAA,EAAJ,CAEE,GAAI,CAcF,GAAIF,CAAApB,QAAJ,EAFYuB,GAEZ,EAAkBH,CAAAtB,QAAlB,EADa0B,GACb,EAAyCJ,CAAAtB,QAAzC,CACEsB,CAAAtB,QAAA,CAAc,EAfd,CAiBF,MAAO2B,CAAP,CAAW,EAxB4C,C,CEzQ/D,IAAAC,GAAyB,EAAzB,CAQAC,EAA4B,EAR5B,CAgBAC,EAAuB,EAhBvB,CAkCAC,EAA2B,EA+BNC;QAAQ,GAAA,CAAC/F,CAAD,CAAMhI,CAAN,CAAY8H,CAAZ,CAAsBkG,CAAtB,CAAgC9F,CAAhC,CAA6C,CACxE,GjBkpB2B,OiBlpB3B,EjBkpBOjJ,CAAA,CiBlpBUe,CjBkpBV,CiBlpBP,CACE,IAAK,IAAI0I,EAAI,CAAb,CAAgBA,CAAhB,CAAoB1I,CAAAN,OAApB,CAAiCgJ,CAAA,EAAjC,CACEqF,EAAA,CAAmB/F,CAAnB,CAAwBhI,CAAA,CAAK0I,CAAL,CAAxB,CAAiCZ,CAAjC,CAA2CkG,CAA3C,CAAqD9F,CAArD,CAFJ,KAAA,CA0DwD,CAAA,CAAA,CACxD,GA3CMlI,CAAAA,CA2CN,CACE,KAAMiB,MAAA,CAAM,oBAAN,CAAN,CAGEgH,CAAAA,CAAU,CA/C8B+F,CAAAA,CAgD5C,KAAIC,EAAML,CAhDJ5N,EAkDN,GAAciO,EAAd,GACEA,CAAA,CAnDIjO,CAmDJ,CADF,CACc,GAAS,CAAT,GAAwB,CAAxB,CADd,CAGAiO,EAAA,CAAMA,CAAA,CArDAjO,CAqDA,CAEAiI,EAAN,GAAiBgG,EAAjB,GACEA,CAAA,CAAIhG,CAAJ,CACA,CADe,GAAS,CAAT,GAAwB,CAAxB,CACf,CAAAgG,CAAAC,EAAA,EAFF,CAIA,KAAAD,EAAMA,CAAA,CAAIhG,CAAJ,CAAN,CAEIkG,EAAShO,CAAA,CA9D6C6H,CA8D7C,CAFb,CAGIoG,CASJH,EAAAI,EAAA,EAIA,IAAKJ,CAAA,CAAIE,CAAJ,CAAL,CAGO,CACLC,CAAA,CAAgBH,CAAA,CAAIE,CAAJ,CAEhB,KAAK,IAAIzF,EAAI,CAAb,CAAgBA,CAAhB,CAAoB0F,CAAA1O,OAApB,CAA0CgJ,CAAA,EAA1C,CAEE,GADA4F,CACI,CADUF,CAAA,CAAc1F,CAAd,CACV,CAAA4F,CAAAxG,EAAA,EAnFIA,CAmFJ,EACAwG,CAAAjG,EADA,EAnF8CH,CAmFlD,CACwC,CAKtC,GAAIoG,CAAA5G,EAAJ,CACE,KAMA0G,EAAA,CAAc1F,CAAd,CAAAf,EAAA,CAA4B,CAAA,CAI9B,EAAA,CAAOyG,CAAA,CAAc1F,CAAd,CAAP,OAAA,CAhBsC,CANrC,CAHP,IACE0F,EACA,CADgBH,CAAA,CAAIE,CAAJ,CAChB,CAD8B,EAC9B,CAAAF,CAAAC,EAAA,EA4BEnG,EAAAA,CAAQwG,EAAA,EACZD,EAAA,CAAc,IAAIhH,EAClBgH,EAAA1G,EAAA,CA3GYE,CA2GZ,CAA2BC,CAA3B,CA5G0DC,CA4G1D,CA3GMhI,CA2GN,CAA6CiI,CAA7C,CA3GsDC,CA2GtD,CACAoG,EAAA3G,EAAA,CA5GqCA,CAAAA,CA8GrCI,EAAAC,IAAA,CA/G0DA,CAgH1DD,EAAAD,EAAA,CAAiBwG,CAEjBF,EAAApL,KAAA,CAAmBsL,CAAnB,CAEKT,EAAA,CAAqBM,CAArB,CAAL,GACEN,CAAA,CAAqBM,CAArB,CADF,CACiC,EADjC,CAGAN,EAAA,CAAqBM,CAArB,CAAAnL,KAAA,CAAkCsL,CAAlC,CAvH0DtG,EA0HtDwG,iBAAJ,CA1H0DxG,CA0H1D,EACazJ,CADb,EA1H0DyJ,CA2H7B,aAD7B,EA1H0DA,CA4HtDwG,iBAAA,CA3HExO,CA2HF;AAA2B+H,CAA3B,CAAkCE,CAAlC,CAFJ,CA1H0DD,CAsIxDyG,YAAA,CArIIzO,CAuqBN,GAAY8N,EAAZ,CACSA,CAAA,CAxqBH9N,CAwqBG,CADT,CAGO8N,CAAA,CA1qBD9N,CA0qBC,CAHP,CAhuBsB0O,IAguBtB,CAvqBM1O,CAqIJ,CAAgD+H,CAAhD,CAGF,EAAA,CAAOuG,CA9FiD,CAtCxDX,EAAA,CADUgB,CAAAlH,IACV,CAAA,CAA8BkH,CApB9B,CADwE,CAiKnDJ,QAAQ,GAAA,EAAG,CAChC,IAAIK,EAAwBC,EAA5B,CAEI7E,EAAI8E,EAAA,CACJ,QAAQ,CAACvG,CAAD,CAAc,CACpB,MAAOqG,EAAAnP,KAAA,CAA2BuK,CAAAhC,IAA3B,CAAkCgC,CAAAlC,EAAlC,CAA8CS,CAA9C,CADa,CADlB,CAIJ,QAAQ,CAACA,CAAD,CAAc,CAChBwG,CAAAA,CAAIH,CAAAnP,KAAA,CAA2BuK,CAAAhC,IAA3B,CAAkCgC,CAAAlC,EAAlC,CAA8CS,CAA9C,CAOR,IAAKwG,CAAAA,CAAL,CAAQ,MAAOA,EARK,CAU1B,OAAO/E,EAjByB,CAqGXgF,QAAQ,GAAA,CAAChH,CAAD,CAAMhI,CAAN,CAAY8H,CAAZ,CAAsBkG,CAAtB,CAAgC9F,CAAhC,CAA6C,CAC1E,GjB4Y2B,OiB5Y3B,EjB4YOjJ,CAAA,CiB5YUe,CjB4YV,CiB5YP,CACE,IAAK,IAAI0I,EAAI,CAAb,CAAgBA,CAAhB,CAAoB1I,CAAAN,OAApB,CAAiCgJ,CAAA,EAAjC,CACEsG,EAAA,CAAqBhH,CAArB,CAA0BhI,CAAA,CAAK0I,CAAL,CAA1B,CAAmCZ,CAAnC,CAA6CkG,CAA7C,CAAuD9F,CAAvD,CAFJ,KAAA,CAcID,CAAAA,CAAU,CAAE+F,CAAAA,CA6RuC,EAAA,CAAA,CACnDC,CAAAA,CAAML,CACV,IA7RmD5N,CA6RnD,GAAYiO,EAAZ,GACEA,CACI,CADEA,CAAA,CA9R2CjO,CA8R3C,CACF,CA/RmDiI,CA+RnD,GAAWgG,EAAX,GACFA,CAEI,CAFEA,CAAA,CAhS+ChG,CAgS/C,CAEF,CADAgH,CACA,CADS9O,CAAA,CAjS6B6H,CAiS7B,CACT,CAAAiG,CAAA,CAAIgB,CAAJ,CAHF,CAFN,EAKqB,CACf,CAAA,CAAOhB,CAAA,CAAIgB,CAAJ,CAAP,OAAA,CADe,CAMrB,CAAA,CAAO,IAbgD,CA1RvD,GAAKb,CAAL,CAIA,IAAS1F,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAAoB0F,CAAA1O,OAApB,CAA0CgJ,CAAA,EAA1C,CACE,GAAI0F,CAAA,CAAc1F,CAAd,CAAAZ,EAAJ,EAAiCA,CAAjC,EACIsG,CAAA,CAAc1F,CAAd,CAAAT,EADJ,EACgCA,CADhC,EAEImG,CAAA,CAAc1F,CAAd,CAAAL,EAFJ,EAEgCH,CAFhC,CAE6C,CACpCgH,EAAA,CAA0Bd,CAAA,CAAc1F,CAAd,CAAAjB,IAA1B,CAAP,MAD2C,CAxB/C,CAD0E;AA0ChDyH,QAAQ,GAAA,CAACzH,CAAD,CAAM,CAGxC,IAAIK,EAAW6F,EAAA,CAAuBlG,CAAvB,CAIf,IAHKK,CAGL,EAAIJ,CAAAI,CAAAJ,EAAJ,CAAA,CAIA,IAAIM,EAAMF,CAAAE,IAAV,CAMIhI,EAAO8H,CAAA9H,KANX,CAOI+H,EAAQD,CAAAC,EAPZ,CAQIE,EAAUH,CAAAG,EAEVD,EAAAmH,oBAAJ,CAMMnH,CANN,EAMazJ,CANb,EAM6ByJ,CAAA,aAN7B,EAOIA,CAAAmH,oBAAA,CAAwBnP,CAAxB,CAA8B+H,CAA9B,CAAqCE,CAArC,CAPJ,CASWD,CAAAoH,YATX,EAUEpH,CAAAoH,YAAA,CAAyCpP,CAyW3C,GAAY8N,EAAZ,CACSA,CAAA,CA1WkC9N,CA0WlC,CADT,CAGO8N,CAAA,CA5WoC9N,CA4WpC,CAHP,CAhuBsB0O,IAguBtB,CAzW2C1O,CAAzC,CAAgD+H,CAAhD,CAGEoG,EAAAA,CAAShO,CAAA,CAAY6H,CAAZ,CAQb,IAAI6F,CAAA,CAAqBM,CAArB,CAAJ,CAAkC,CAC5BkB,IAAAA,EAAexB,CAAA,CAAqBM,CAArB,CAAfkB,CNwJF3G,EAAIc,EAAA,CMvJY6F,CNuJZ,CMvJ0BvH,CNuJ1B,CAEO,EAAf,EAAUY,CAAV,EAoBO4G,CAAA3P,OAAAF,KAAAC,CM7Ka2P,CN6Kb3P,CAnBoBgJ,CAmBpBhJ,CAAgD,CAAhDA,CM5KsB,EAA3B,EAAI2P,CAAA3P,OAAJ,EACE,OAAOmO,CAAA,CAAqBM,CAArB,CAJuB,CAQlCrG,CAAAJ,EAAA,CAAmB,CAAA,CAUnB,IADI0G,CACJ,CADoBR,CAAA,CAA0B5N,CAA1B,CAAA,CAAgCiI,CAAhC,CAAA,CAAyCkG,CAAzC,CACpB,CACEC,CAAAmB,EACA,CAD8B,CAAA,CAC9B,CAAAC,EAAA,CAAqBxP,CAArB,CAA2BiI,CAA3B,CAAoCkG,CAApC,CAA4CC,CAA5C,CAGF,QAAOT,EAAA,CAAuBlG,CAAvB,CA1DP,CAPwC;AAkHnB+H,QAAQ,GAAA,CAACxP,CAAD,CAAOiI,CAAP,CAAgBkG,CAAhB,CAAwBC,CAAxB,CAAuC,CAKpE,GAAKqB,CAAArB,CAAAqB,EAAL,EACMrB,CAAAmB,EADN,CACmC,CAO/B,IAP+B,IAOtBG,EAAW,CAPW,CAORC,EAAW,CAAlC,CACKD,CADL,CACgBtB,CAAA1O,OADhB,CAEKgQ,CAAA,EAFL,CAGMtB,CAAA,CAAcsB,CAAd,CAAAhI,EAAJ,CACc0G,CAAA,CAAcsB,CAAd,CAAA3H,EACZC,IAFF,CAEc,IAFd,EAKI0H,CAGJ,EAHgBC,CAGhB,GAFEvB,CAAA,CAAcuB,CAAd,CAEF,CAF4BvB,CAAA,CAAcsB,CAAd,CAE5B,EAAAC,CAAA,EARA,CAUFvB,EAAA1O,OAAA,CAAuBiQ,CAEvBvB,EAAAmB,EAAA,CAA8B,CAAA,CAGd,EAAhB,EAAII,CAAJ,GACE,OAAO/B,CAAA,CAA0B5N,CAA1B,CAAA,CAAgCiI,CAAhC,CAAA,CAAyCkG,CAAzC,CAQP,CAPAP,CAAA,CAA0B5N,CAA1B,CAAA,CAAgCiI,CAAhC,CAAAiG,EAAA,EAOA,CALuD,CAKvD,EALIN,CAAA,CAA0B5N,CAA1B,CAAA,CAAgCiI,CAAhC,CAAAiG,EAKJ,GAJE,OAAON,CAAA,CAA0B5N,CAA1B,CAAA,CAAgCiI,CAAhC,CACP,CAAA2F,CAAA,CAA0B5N,CAA1B,CAAAkO,EAAA,EAGF,EAA8C,CAA9C,EAAIN,CAAA,CAA0B5N,CAA1B,CAAAkO,EAAJ,EACE,OAAON,CAAA,CAA0B5N,CAA1B,CAVX,CAzB+B,CANiC,CAmUzC4P,QAAQ,EAAA,CAAC3B,CAAD,CAAM7N,CAAN,CAAWJ,CAAX,CAAiBiI,CAAjB,CAA0BM,CAA1B,CAAuC,CAC1E,IAAIsH,EAAS,CAETZ,EAAAA,CAAS9O,CAAA,CAAYC,CAAZ,CACb,IAAI6N,CAAA,CAAIgB,CAAJ,CAAJ,CAAiB,CACf,IAAIa,EAAY,EAAE7B,CAAAI,EAAlB,CACID,EAAgBH,CAAA,CAAIgB,CAAJ,CAGfb,EAAAqB,EAAL,CAGErB,CAAAqB,EAAA,EAHF,CACErB,CAAAqB,EADF,CAC0B,CAK1B,IAAI,CAKF,IADA,IAAI/P,EAAS0O,CAAA1O,OAAb,CACSgJ,EAAI,CAAb,CAAgBA,CAAhB,CAAoBhJ,CAApB,CAA4BgJ,CAAA,EAA5B,CAAiC,CAC/B,IAAIZ,EAAWsG,CAAA,CAAc1F,CAAd,CAEXZ,EAAJ,EAAiBJ,CAAAI,CAAAJ,EAAjB,GACEmI,CADF,EAE0D,CAAA,CAF1D,GAEME,EAAA,CAAyBjI,CAAzB,CAAmCS,CAAnC,CAFN,CAH+B,CAL/B,CAAJ,OAaU,CAKR0F,CAAAI,EAEA,CAFiB9N,IAAA2F,IAAA,CAAS4J,CAAT,CAAoB7B,CAAAI,EAApB,CAEjB,CADAD,CAAAqB,EAAA,EACA,CAAAD,EAAA,CAAqBxP,CAArB,CAA2BiI,CAA3B,CAAoCgH,CAApC,CAA4Cb,CAA5C,CAPQ,CAxBK,CAmCjB,MAAO4B,QAAA,CAAQH,CAAR,CAvCmE;AAkDjDE,QAAQ,GAAA,CAACjI,CAAD,CAAWS,CAAX,CAAwB,CACrDT,CAAAH,EAAJ,EACEuH,EAAA,CAA0BpH,CAAAL,IAA1B,CAEF,OAAOK,EAAAM,YAAA,CAAqBG,CAArB,CAJkD;AA8JzBsG,QAAQ,GAAA,CAAC/G,CAAD,CAAWmI,CAAX,CAAoB,CAC5D,GAAInI,CAAAJ,EAAJ,CACE,MAAO,CAAA,CAGT,KAAI1H,EAAO8H,CAAA9H,KAAX,CACIiO,EAAML,CAEV,IAAM,EAAA5N,CAAA,GAAQiO,EAAR,CAAN,CACE,MAAO,CAAA,CAET,KAAAA,EAAMA,CAAA,CAAIjO,CAAJ,CAAN,CACI6P,CADJ,CACYK,CAGZ,IAAKpB,CAAAA,EAAL,CAAuD,CACjDqB,CAAAA,CAAUF,CAAVE,EACsB3R,EAAA,CAAqB,cAArB,CAG1B,KAAI4R,EAAa,CAAA,CAAbA,GAAqBnC,EAAzB,CACIoC,EAAY,CAAA,CAAZA,GAAqBpC,EAEzB,IAAImC,CAAJ,CAAgB,CACd,GAoHe,CApHf,CAAiCD,CAoH9BpE,QApHH,EAoHqCjM,IAAAA,EApHrC,EAAiCqQ,CAoHb7C,YApHpB,CACE,MAAO,CAAA,CA2EwB,EAAA,CAAA,CASrC,IAAIgD,EAAiB,CAAA,CAErB,IAAiB,CAAjB,EAnF6BH,CAmFzBpE,QAAJ,CAME,GAAI,CAzFuBoE,CA0FzBpE,QAAA,CAAa,EACb,OAAA,CAFE,CAGF,MAAO2B,CAAP,CAAW,CACX4C,CAAA,CAAiB,CAAA,CADN,CAKf,GAAIA,CAAJ,EACwDxQ,IAAAA,EADxD,EAjG6BqQ,CAkGS7C,YADtC,CAjG6B6C,CAmG3B7C,YAAA,CAAgB,CAAA,CA3BmB,CA7EnB,CAQZiD,CAAAA,CAAM,IAAIrF,CAEdqF,EAAA3I,EAAA,CAASuI,CAAT,CAA8C,IAA9C,CAEAN,EAAA,CAAS,CAAA,CACT,IAAI,CACF,GAAIO,CAAJ,CAAgB,CAGd,IAFA,IAAII,EAAY,EAAhB,CAESC,EAASF,CAAA7F,cAAlB,CACK+F,CADL,CAEKA,CAFL,CAEcA,CAAAC,WAFd,CAGEF,CAAAxN,KAAA,CAAeyN,CAAf,CAGFP,EAAA,CAAajC,CAAA,CAAI,CAAA,CAAJ,CACbiC,EAAA7B,EAAA,CAAwB6B,CAAAhC,EAGxB,KAAK,IAAIxF,EAAI8H,CAAA9Q,OAAJgJ,CAAuB,CAAhC,CACMiC,CAAA4F,CAAA5F,EADN,EACsC,CADtC,EACiCjC,CADjC,EAC2CwH,CAAA7B,EAD3C,CAEK3F,CAAA,EAFL,CAGE6H,CAAA7F,cACA,CADoB8F,CAAA,CAAU9H,CAAV,CACpB,CAAAmH,CAAA,EAAUD,CAAA,CAA2BM,CAA3B,CAAuCM,CAAA,CAAU9H,CAAV,CAAvC,CAAqD1I,CAArD,CAC2B,CAAA,CAD3B,CACiCuQ,CADjC,CAIZ,IAAIF,CAAJ,CAKE,IAJAH,CAIK;AAJQjC,CAAA,CAAI,CAAA,CAAJ,CAIR,CAHLiC,CAAA7B,EAGK,CAHmB6B,CAAAhC,EAGnB,CAAIxF,CAAJ,CAAQ,CAAb,CACMiC,CAAA4F,CAAA5F,EADN,EACiCjC,CADjC,CACqC8H,CAAA9Q,OADrC,EAEKwQ,CAAA7B,EAFL,CAGK3F,CAAA,EAHL,CAIE6H,CAAA7F,cACA,CADoB8F,CAAA,CAAU9H,CAAV,CACpB,CAAAmH,CAAA,EAAUD,CAAA,CAA2BM,CAA3B,CAAuCM,CAAA,CAAU9H,CAAV,CAAvC,CAAqD1I,CAArD,CAC2B,CAAA,CAD3B,CACkCuQ,CADlC,CA/BA,CAAhB,IAsCEV,EAAA,CAASE,EAAA,CAAyBjI,CAAzB,CAAmCyI,CAAnC,CAvCT,CAAJ,OA0CU,CACJC,CAAJ,GACEA,CAAA9Q,OADF,CACqB,CADrB,CADQ,CAKV,MAAOmQ,EApE8C,CAwEnDxC,CAAAA,CAAK,IAAInC,CAAJ,CACL+E,CADK,CACgC,IADhC,CAGT,OADAJ,EACA,CADSE,EAAA,CAAyBjI,CAAzB,CAAmCuF,CAAnC,CAzFmD,C,CCrgCpCsD,QAAQ,GAAA,EAAG,CACnCC,EAAAnR,KAAA,CAAqB,IAArB,CADmC,CAmBrCwC,CAAA,CAAc0O,EAAd,CAAuC1J,EAAvC,CAuBA0J,GAAApR,UAAA,aAAA,CAAmE,CAAA,CAQnE,EAAA,CArIA,EAAAsR,UAqIAC,EAAAC,GAAA,CAAuD,IASvDD,EAAAE,qBAAA,CAAyDC,QAAQ,EAAG,CAClE,MAAO,KAAAF,GAD2D,CAiCpED,EAAAtC,iBAAA,CAAqD0C,QAAQ,CACzDlR,CADyD,CACnDqI,CADmD,CAC1C8I,CAD0C,CAC7BC,CAD6B,CACX,CAChDrD,EAAA,CAAmB,IAAnB,CAAyB/N,CAAzB,CAA+BqI,CAA/B,CAAwC8I,CAAxC,CAAqDC,CAArD,CADgD,CAmBlDN,EAAA3B,oBAAA,CAAwDkC,QAAQ,CAC5DrR,CAD4D,CACtDqI,CADsD,CAC7C8I,CAD6C,CAChCC,CADgC,CACd,CAChDpC,EAAA,CAAqB,IAArB,CAA2BhP,CAA3B,CAAiCqI,CAAjC,CAA0C8I,CAA1C,CAAuDC,CAAvD,CADgD,CAMlDN;CAAAQ,cAAA,CAAkDC,QAAQ,CAAChF,CAAD,CAAI,CDqyB5D,IAAIvM,EAAOuM,CAAAvM,KAAPA,EAAiBuM,CAArB,CACI0B,EAAML,CACV,IAAM5N,CAAN,GAAciO,EAAd,CAAA,CAMA,GAAIhO,CAAA,CAAcsM,CAAd,CAAJ,CACEA,CAAA,CAAI,IAAI/B,CAAJ,CAAsB+B,CAAtB,CC3xB6BvE,ID2xB7B,CADN,KAEO,IAAMuE,CAAN,WAAmB/B,EAAnB,CAKL+B,CAAAzD,OAAA,CAAWyD,CAAAzD,OAAX,ECjyBiCd,ID4xB5B,KAAuC,CAC5C,IAAIwJ,EAAWjF,CACfA,EAAA,CAAI,IAAI/B,CAAJ,CAA6CxK,CAA7C,CC9xB6BgI,ID8xB7B,CACJa,GAAA,CAAmB0D,CAAnB,CAAsBiF,CAAtB,CAH4C,CAQ1CC,IAAAA,EAAK,CAALA,CAAQjB,CAARiB,CAEJxD,EAAMA,CAAA,CAAIjO,CAAJ,CAFFyR,CAGArB,EAAa,CAAA,CAAbA,GAAqBnC,EAHrBwD,CAIAvB,CAEJ,IAAIE,CAAJ,CAAgB,CAEdI,CAAA,CAAY,EACZ,KAASC,CAAT,CC7yBiCzI,ID6yBjC,CAAuByI,CAAvB,CAA+BA,CAA/B,CAAwCA,CAAAO,qBAAA,EAAxC,CACER,CAAAxN,KAAA,CAAeyN,CAAf,CAGFP,EAAA,CAAajC,CAAA,CAAI,CAAA,CAAJ,CACbiC,EAAA7B,EAAA,CAAwB6B,CAAAhC,EAGxB,KAAK,IAAIxF,EAAI8H,CAAA9Q,OAAJgJ,CAAuB,CAAhC,CACMiC,CAAA4B,CAAA5B,EADN,EACoC,CADpC,EAC+BjC,CAD/B,EACyCwH,CAAA7B,EADzC,CAEK3F,CAAA,EAFL,CAGE6D,CAAA7B,cACA,CADkB8F,CAAA,CAAU9H,CAAV,CAClB,CAAA+I,CAAA,EAAM7B,CAAA,CAA2BM,CAA3B,CAAuCM,CAAA,CAAU9H,CAAV,CAAvC,CAAqD6D,CAAAvM,KAArD,CAC2B,CAAA,CAD3B,CACiCuM,CADjC,CAAN,EAEwB,CAAA,CAFxB,EAEMA,CAAA1B,EAjBM,CAsBhB,GADgB,CAAA,CAChB,GADyBoD,EACzB,CAIE,GAHAiC,CAGIE,CAHSnC,CAAA,CAAI,CAAA,CAAJ,CAGTmC,CAFJF,CAAA7B,EAEI+B,CAFoBF,CAAAhC,EAEpBkC,CAAAA,CAAJ,CAGE,IAAS1H,CAAT,CAAa,CAAb,CAAiBiC,CAAA4B,CAAA5B,EAAjB,EAA0CjC,CAA1C,CAA8C8H,CAAA9Q,OAA9C,EACKwQ,CAAA7B,EADL,CAEK3F,CAAA,EAFL,CAGE6D,CAAA7B,cACA,CADkB8F,CAAA,CAAU9H,CAAV,CAClB,CAAA+I,CAAA,EAAM7B,CAAA,CAA2BM,CAA3B,CAAuCM,CAAA,CAAU9H,CAAV,CAAvC,CAAqD6D,CAAAvM,KAArD,CAC2B,CAAA,CAD3B,CACkCuM,CADlC,CAAN,EAEwB,CAAA,CAFxB,EAEMA,CAAA1B,EATV,KAeE,KAAS6G,CAAT;ACn1B+B1J,IDm1B/B,CACM2C,CAAA4B,CAAA5B,EADN,EAC+B+G,CAD/B,EAC0CxB,CAAA7B,EAD1C,CAEKqD,CAFL,CAEeA,CAAAV,qBAAA,EAFf,CAGEzE,CAAA7B,cACA,CADkBgH,CAClB,CAAAD,CAAA,EAAM7B,CAAA,CAA2BM,CAA3B,CAAuCwB,CAAvC,CAAgDnF,CAAAvM,KAAhD,CAC2B,CAAA,CAD3B,CACkCuM,CADlC,CAAN,EAEwB,CAAA,CAFxB,EAEMA,CAAA1B,EAKZ,EAAA,CAAOmF,OAAA,CAAQyB,CAAR,CA1EP,CAAA,IACE,EAAA,CAAO,CAAA,CCrxBP,OAAO,EAnBmD,C,CClJrCE,QAAQ,GAAA,CAACC,CAAD,CAAM,CACrC,GAA4B,UAA5B,EAAI,MAAOA,EAAAC,EAAX,CACE,MAAOD,EAAAC,EAAA,EAET,IAAI5R,CAAA,CAAc2R,CAAd,CAAJ,CACE,MAAOA,EAAAjT,MAAA,CAAU,EAAV,CAET,IAAIoB,EAAA,CAAiB6R,CAAjB,CAAJ,CAA2B,CAGzB,IAFA,IAAIH,EAAK,EAAT,CACItH,EAAIyH,CAAAlS,OADR,CAESgJ,EAAI,CAAb,CAAgBA,CAAhB,CAAoByB,CAApB,CAAuBzB,CAAA,EAAvB,CACE+I,CAAAzO,KAAA,CAAQ4O,CAAA,CAAIlJ,CAAJ,CAAR,CAEF,OAAO+I,EANkB,CAQ3B,MAAOjJ,GAAA,CAAsBoJ,CAAtB,CAf8B,CAoHhBE,QAAQ,GAAA,CAACF,CAAD,CAAM5H,CAAN,CAASC,CAAT,CAAkB,CAC/C,GAA0B,UAA1B,EAAI,MAAO2H,EAAA7H,QAAX,CACE6H,CAAA7H,QAAA,CAAYC,CAAZ,CAAeC,CAAf,CADF,KAEO,IAAIlK,EAAA,CAAiB6R,CAAjB,CAAJ,EAA6B3R,CAAA,CAAc2R,CAAd,CAA7B,CACL/H,EAAA,CAAyC+H,CAAzC,CAA+C5H,CAA/C,CAAkDC,CAAlD,CADK,KAEA,CACL,IAAI8H,CAhGN,IAA0B,UAA1B,EAAI,MAgG8BH,EAhGvBI,EAAX,CACE,CAAA,CA+FgCJ,CA/FzBI,EAAA,EADT,KAIA,IAA4B,UAA5B,EAAI,MA4F8BJ,EA5FvBC,EAAX,CAGA,GAAI9R,EAAA,CAyF8B6R,CAzF9B,CAAJ,EAA6B3R,CAAA,CAyFK2R,CAzFL,CAA7B,CAAiD,CAC3CH,CAAAA,CAAK,EAET,KADA,IAAItH,EAuF4ByH,CAvFxBlS,OAAR,CACSgJ,EAAI,CAAb,CAAgBA,CAAhB,CAAoByB,CAApB,CAAuBzB,CAAA,EAAvB,CACE+I,CAAAzO,KAAA,CAAQ0F,CAAR,CAJ6C,CAAjD,IASA,EAAA,CAAOC,EAAA,CAgF2BiJ,CAhF3B,CAZP,KALmC,EAAA,CAAA,IAAA,EAoGjC,KAFIK,IAAAA,EAASN,EAAA,CAAuBC,CAAvB,CAATK,CACA9H,EAAI8H,CAAAvS,OADJuS,CAEKvJ,EAAI,CAAb,CAAgBA,CAAhB,CAAoByB,CAApB,CAAuBzB,CAAA,EAAvB,CACEsB,CAAAvK,KAAA,CAAOwK,CAAP,CAAgBgI,CAAA,CAAOvJ,CAAP,CAAhB,CAA2BqJ,CAA3B,EAAmCA,CAAA,CAAKrJ,CAAL,CAAnC,CAA4CkJ,CAA5C,CALG,CALwC,C,CCjI9BM,QAAQ,GAAA,CAACC,CAAD,CAAUvR,CAAV,CAAoB,CAO7C,IAAAwR,EAAA,CAAY,EAgBZ,KAAAC,EAAA,CAAa,EAEb,KAAIC,EAAYvR,SAAArB,OAEhB,IAAgB,CAAhB,CAAI4S,CAAJ,CAAmB,CACjB,GAAIA,CAAJ,CAAgB,CAAhB,CACE,KAAMrR,MAAA,CAAM,4BAAN,CAAN,CAEF,IAAK,IAAIyH,EAAI,CAAb,CAAgBA,CAAhB,CAAoB4J,CAApB,CAA+B5J,CAA/B,EAAoC,CAApC,CACE,IAAA6J,IAAA,CAASxR,SAAA,CAAU2H,CAAV,CAAT,CAAuB3H,SAAA,CAAU2H,CAAV,CAAc,CAAd,CAAvB,CALe,CAAnB,IAOO,IAAIyJ,CAAJ,CAAA,CAC8BA,CAsPrC,WAAmBD,GAAnB,EACEH,CACA,CAxPmCI,CAuP5BH,EAAA,EACP,CAAAC,CAAA,CAxPmCE,CAwP1BN,EAAA,EAFX,GAIEE,CACA,CADOpJ,EAAA,CA1P4BwJ,CA0P5B,CACP,CAAAF,CAAA,CAASzJ,EAAA,CA3P0B2J,CA2P1B,CALX,CASA,KAAK,IAAIzJ,EAAI,CAAb,CAAgBA,CAAhB,CAAoBqJ,CAAArS,OAApB,CAAiCgJ,CAAA,EAAjC,CA/PE8J,IAgQAD,IAAA,CAASR,CAAA,CAAKrJ,CAAL,CAAT,CAAkBuJ,CAAA,CAAOvJ,CAAP,CAAlB,CAjQK,CAlCsC,CA6C/C,CAAA,CAxFA,EAAA+J,UAwFAC,EAAAxE,EAAA,CAAoC,CAuBpCwE,EAAAb,EAAA,CAAuCc,QAAQ,EAAG,CAChDC,EAAA,CAAAA,IAAA,CAGA,KADA,IAAInB,EAAK,EAAT,CACS/I,EAAI,CAAb,CAAgBA,CAAhB,CAAoB,IAAA2J,EAAA3S,OAApB,CAAuCgJ,CAAA,EAAvC,CAEE+I,CAAAzO,KAAA,CAAQ,IAAAoP,EAAA,CADE,IAAAC,EAAA5K,CAAWiB,CAAXjB,CACF,CAAR,CAEF,OAAOgK,EARyC,CAgBlDiB,EAAAV,EAAA,CAAqCa,QAAQ,EAAG,CAC9CD,EAAA,CAAAA,IAAA,CACA,OAAuC,KAAAP,EAAAS,OAAA,EAFO,CAyHDC;QAAQ,GAAA,CAARA,CAAQ,CAAG,CACxD,GAAI,CAAA7E,EAAJ,EAAmB,CAAAmE,EAAA3S,OAAnB,CAAsC,CAIpC,IAFA,IAAIsT,EAAW,CAAf,CACIC,EAAY,CAChB,CAAOD,CAAP,CAAkB,CAAAX,EAAA3S,OAAlB,CAAA,CAAqC,CACnC,IAAI+H,EAAM,CAAA4K,EAAA,CAAWW,CAAX,CAiMP3T,OAAAE,UAAAwD,eAAAtD,KAAA,CAhM0B,CAAA2S,EAgM1B,CAhMqC3K,CAgMrC,CAhMH,GACE,CAAA4K,EAAA,CAAWY,CAAA,EAAX,CADF,CAC4BxL,CAD5B,CAGAuL,EAAA,EALmC,CAOrC,CAAAX,EAAA3S,OAAA,CAAoBuT,CAXgB,CActC,GAAI,CAAA/E,EAAJ,EAAmB,CAAAmE,EAAA3S,OAAnB,CAAsC,CASpC,IAHA,IAAIwT,EAAO,EAAX,CAEID,EADAD,CACAC,CADW,CAEf,CAAOD,CAAP,CAAkB,CAAAX,EAAA3S,OAAlB,CAAA,CACM+H,CAKJ,CALU,CAAA4K,EAAA,CAAWW,CAAX,CAKV,CAyKG3T,MAAAE,UAAAwD,eAAAtD,KAAA,CA7K4ByT,CA6K5B,CA7KkCzL,CA6KlC,CAzKH,GAHE,CAAA4K,EAAA,CAAWY,CAAA,EAAX,CACA,CAD0BxL,CAC1B,CAAAyL,CAAA,CAAKzL,CAAL,CAAA,CAAY,CAEd,EAAAuL,CAAA,EAEF,EAAAX,EAAA3S,OAAA,CAAoBuT,CAjBgB,CAfkB,CA6C1DP,CAAAS,IAAA,CAAiCC,QAAQ,CAAC3L,CAAD,CAAM4L,CAAN,CAAe,CACtD,MAyJOhU,OAAAE,UAAAwD,eAAAtD,KAAA,CAzJsB,IAAA2S,EAyJtB,CAzJiC3K,CAyJjC,CAzJP,CACS,IAAA2K,EAAA,CAAU3K,CAAV,CADT,CAGO4L,CAJ+C,CAcxDX,EAAAH,IAAA,CAAiCe,QAAQ,CAAC7L,CAAD,CAAMvI,CAAN,CAAa,CA4I7CG,MAAAE,UAAAwD,eAAAtD,KAAA,CA3IwB,IAAA2S,EA2IxB,CA3ImC3K,CA2InC,CA3IP,GACE,IAAAyG,EAAA,EACA,CAAA,IAAAmE,EAAArP,KAAA,CAAgByE,CAAhB,CAFF,CAMA,KAAA2K,EAAA,CAAU3K,CAAV,CAAA,CAAiBvI,CAPmC,CAoCtDwT,EAAAa,MAAA,CAAmCC,QAAQ,EAAG,CAC5C,MAAO,KAAItB,EAAJ,CAAqB,IAArB,CADqC,C,CCpQ5BuB,QAAQ,GAAA,CAACtU,CAAD,CAAI,CACxBuU,CAAAA,CAAIhO,MAAA,CAAOvG,CAAP,CACR,IApDI,OAAAkE,KAAA,CAoDmBqQ,CApDnB,CAAJ,CACS,CADT,CAgCkBC,2BAEXtQ,KAAA,CAkBgBqQ,CAlBCpQ,QAAA,CANJsQ,kBAMI,CAAyB,GAAzB,CAAAtQ,QAAA,CAJpBuQ,gGAIoB,CACI,GADJ,CAAAvQ,QAAA,CAHHwQ,oCAGG,CAEI,EAFJ,CAAjB,CAkBP,CAEE,GAAI,CACF,MAA8BC,KAAA,CAAK,GAAL,CAAWL,CAAX,CAAe,GAAf,CAD5B,CAEF,MAAOhG,CAAP,CAAW,EAGf,KAAMzM,MAAA,CAAM,uBAAN,CAAgCyS,CAAhC,CAAN,CAT4B,C,CCvDJM,QAAQ,GAAA,EAAG,EASrCA,EAAAzU,UAAA0U,EAAA,CAAmD,IAanDD,GAAAzU,UAAA2U,WAAA,CAA+CC,QAAQ,EAAG,CACjD,IAAA,CAAA,EAAAF,CAAA,CAAAA,IAAAA,EAAA,ICmHHG,CDlHC,CCkHS,EDlHT,CCiHQC,EAAAC,CDjHRD,ICiHQC,CDjHR,GCoHHF,CAAA,CAxGiBG,CAwGjB,CACA,CADyD,CAAA,CACzD,CAAAH,CAAA,CAlGmBI,CAkGnB,CAAA,CAA2D,CAAA,CDrHxD,EAAA,CAAA,CAAA,IAAA,EAAA,CCuHEJ,CDxHA,CAAP,OAAO,EADiD,C,CCjB1D,IAAA,EAiHiCK,SAAQ,GAAA,EAAG,EAG5CxS,CAAA,CAAcwS,EAAd,CAA8CT,EAA9C,CAI0DU,SAAQ,GAAA,CAARA,CAAQ,CAAG,CAEnE,MAAA,CADIJ,CACJ,CADaD,EAAA,CAAAA,CAAA,CACb,EACS,IAAIM,aAAJ,CAAkBL,CAAlB,CADT,CAGS,IAAIM,cALsD,CAmCfC,QAAQ,GAAA,CAARA,CAAQ,CAAG,CAU/D,GAAKC,CAAA,CAAAA,EAAL,EAAgD,WAAhD,EAAuB,MAAOF,eAA9B,EAC4B,WAD5B,EACI,MAAOD,cADX,CACyC,CAIvC,IAFA,IAAII,EAAkB,CAAC,oBAAD,CAAuB,oBAAvB,CACC,gBADD,CACmB,mBADnB,CAAtB,CAESrM,EAAI,CAAb,CAAgBA,CAAhB,CAAoBqM,CAAArV,OAApB,CAA4CgJ,CAAA,EAA5C,CAAiD,CAC/C,IAAIsM,EAAYD,CAAA,CAAgBrM,CAAhB,CAEhB,IAAI,CAKF,MAJA,KAAIiM,aAAJ,CAAkBK,CAAlB,CAGAA,CAAA,CAAAF,EAAAE,CAAiBA,CAJf,CAMF,MAAOzI,CAAP,CAAU,EATmC,CAejD,KAAMtL,MAAA,CAAM,4FAAN,CAAN,CAnBuC,CAuBzC,MAA8B,EAAA6T,EAlCiC,CArD/DG,EAAA,CA4FgCC,IAAIT,E,CCkHXU,QAAQ,GAAA,CAACC,CAAD,CAAS,CAC1C,MAAOC,GAAA,CAAgCD,CAAhC,EAA0CrU,SAAAuU,OAAAC,OAA1C,CAAmE,EAAnE,CADmC;AAYVF,QAAQ,GAAA,CAAC3U,CAAD,CAAK8U,CAAL,CAAc,CACtD,IAAIC,EAAK,EAIT,IboNuC,CapNvC,EboNOjM,EAAA,CapNiBgM,CboNjB,CapN0B9U,CboN1B,CapNP,CACE+U,CAAAzS,KAAA,CAAQ,4BAAR,CADF,KAIO,IAAItC,CAAJ,EA/BoBgV,EA+BpB,CAAUF,CAAA9V,OAAV,CAAuD,CAC5D+V,CAAAzS,KAAA,CAAQ2S,EAAA,CAA2BjV,CAA3B,CAAR,CAAyC,GAAzC,CAEA,KADA,IAAIkV,EAAOlV,CAAAK,UAAX,CACS2H,EAAI,CAAb,CAAgBA,CAAhB,CAAoBkN,CAAAlW,OAApB,CAAiCgJ,CAAA,EAAjC,CAAsC,CAC5B,CAAR,CAAIA,CAAJ,EACE+M,CAAAzS,KAAA,CAAQ,IAAR,CAEF,KAAI6S,CACAC,EAAAA,CAAMF,CAAA,CAAKlN,CAAL,CACV,QAAQ,MAAOoN,EAAf,EACE,KAAK,QAAL,CACED,CAAA,CAAUC,CAAA,CAAM,QAAN,CAAiB,MAC3B,MAEF,MAAK,QAAL,CAEE,KAEF,MAAK,QAAL,CACED,CAAA,CAAUnQ,MAAA,CAAOoQ,CAAP,CACV,MAEF,MAAK,SAAL,CACED,CAAA,CAAUC,CAAA,CAAM,MAAN,CAAe,OACzB,MAEF,MAAK,UAAL,CAEED,CAAA,CAAU,CADVA,CACU,CADAF,EAAA,CAA2BG,CAA3B,CACA,EAAUD,CAAV,CAAoB,MAC9B,MAGF,SACEA,CAAA,CAAU,MAAOC,EAxBrB,CA4BqB,EAArB,CAAID,CAAAnW,OAAJ,GACEmW,CADF,CACYA,CAAAE,OAAA,CAAe,CAAf,CAAkB,EAAlB,CADZ,CACoC,KADpC,CAGAN,EAAAzS,KAAA,CAAQ6S,CAAR,CArCoC,CAuCtCL,CAAAxS,KAAA,CAAatC,CAAb,CACA+U,EAAAzS,KAAA,CAAQ,KAAR,CAEA,IAAI,CACFyS,CAAAzS,KAAA,CAAQqS,EAAA,CAAgC3U,CAAA6U,OAAhC,CAA2CC,CAA3C,CAAR,CADE,CAEF,MAAOjJ,CAAP,CAAU,CACVkJ,CAAAzS,KAAA,CAAQ,oCAAR,CADU,CA/CgD,CAAvD,IAmDItC,EAAJ;AACL+U,CAAAzS,KAAA,CAAQ,oBAAR,CADK,CAGLyS,CAAAzS,KAAA,CAAQ,OAAR,CAEF,OAAOyS,EAAAvS,KAAA,CAAQ,EAAR,CAjE+C,CAoF3ByS,QAAQ,GAAA,CAACjV,CAAD,CAAK,CACxC,GAAIsV,CAAA,CAAwBtV,CAAxB,CAAJ,CACE,MAAOsV,EAAA,CAAwBtV,CAAxB,CAWLuV,EAAAA,CAAiBvQ,MAAA,CAAOhF,CAAP,CACrB,IAAK,CAAAsV,CAAA,CAAwBC,CAAxB,CAAL,CAA8C,CAC5C,IAAIC,EAAU,mBAAA3Q,KAAA,CAAyB0Q,CAAzB,CAGZD,EAAA,CAAwBC,CAAxB,CAAA,CAFEC,CAAJ,CACeA,CAAAC,CAAQ,CAARA,CADf,CAI4C,aANA,CAU9C,MAAOH,EAAA,CAAwBC,CAAxB,CAxBiC,CAiD1C,IAAAD,EAA0B,E,CCjcHI,QAAQ,EAAA,CAACC,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAC3BC,CAD2B,CACjBC,CADiB,CACG,CAChC,IAAAC,MAAA,CAAWL,CAAX,CAAkBC,CAAlB,CAAuBC,CAAvB,CAAmCC,CAAnC,CAA6CC,CAA7C,CADgC,CAmDlCL,CAAA7W,UAAAoX,EAAA,CAA4C,IAQ5CP,EAAA7W,UAAAqX,EAAA,CAAgD,IAehD,KAAAC,GAA2C,CAa3CT,EAAA7W,UAAAmX,MAAA,CAAuCI,QAAQ,CAACT,CAAD,CAAQC,CAAR,CAAaC,CAAb,CAC3CC,CAD2C,CACjCC,CADiC,CACb,CAEsB,QAApD,EAAuB,MAAOA,EAA9B,EACyBI,EAAA,EAGdL,EAAb,EAAyB9U,EAAA,EACzB,KAAAqV,EAAA,CAAcV,CACd,KAAAW,GAAA,CAAYV,CAEZ,QAAO,IAAAK,EACP,QAAO,IAAAC,EAXyB,CAwFlCR,EAAA7W,UAAA0X,EAAA,CAA0CC,QAAQ,CAACb,CAAD,CAAQ,CACxD,IAAAU,EAAA,CAAcV,CAD0C,C,CCpKtCc,QAAQ,EAAA,CAAC1Y,CAAD,CAAO,CAMjC,IAAA2Y,GAAA,CAAa3Y,CANoB,CAenC0Y,CAAA5X,UAAA8X,EAAA,CAAsC,IAStCF,EAAA5X,UAAAwX,EAAA,CAAqC,IASrCI,EAAA5X,UAAA+X,EAAA,CAAwC,IAQxCH,EAAA5X,UAAAgY,EAAA,CAAwC,IAuDdC,SAAQ,EAAA,CAAC/Y,CAAD,CAAOS,CAAP,CAAc,CAK9C,IAAAT,KAAA,CAAYA,CAMZ,KAAAS,MAAA,CAAaA,CAXiC,CAmBhDsY,CAAAjY,UAAAC,SAAA,CAA6CiY,QAAQ,EAAG,CACtD,MAAO,KAAAhZ,KAD+C,CA2BxD,KAAAiZ,GAAiC,IAAIF,CAAJ,CAA4B,QAA5B,CAAsC,GAAtC,CAAjC,CAQAG,GAAkC,IAAIH,CAAJ,CAA4B,SAA5B,CAAuC,GAAvC,CARlC,CAwBAI,GAAiC,IAAIJ,CAAJ,CAA4B,QAA5B,CAAsC,GAAtC,CAxBjC,CAgCAK,GAA+B,IAAIL,CAAJ,CAA4B,MAA5B,CAAoC,GAApC,CAoM/BL,EAAA5X,UAAAuY,UAAA,CAAwCC,QAAQ,EAAG,CACjD,MAAO,KAAAV,EAD0C,CA2BnDF,EAAA5X,UAAA0X,EAAA,CAAuCe,QAAQ,CAAC3B,CAAD,CAAQ,CAEnD,IAAAU,EAAA,CAAcV,CAFqC,CA8BP4B,SAAQ,GAAA,CAARA,CAAQ,CAAG,CAIzD,MAAI,EAAAlB,EAAJ,CACS,CAAAA,EADT,CAGI,CAAAM,EAAJ,CACSa,EAAA,CAAA,CAAAb,EAAA,CADT,CAIO,IAXkD;AAoC3DF,CAAA5X,UAAA4Y,IAAA,CAAkCC,QAAQ,CAAC/B,CAAD,CAAQC,CAAR,CAAa+B,CAAb,CAA4B,CAEpE,GAAoBhC,CAfbnX,MAeP,EAfsBgZ,EAAA,CAelBI,IAfkB,CAAApZ,MAetB,CAoJE,IAnJkB,CAkJd4J,CAlJc,IAAAyP,GAAA,CAAkBlC,CAAlB,CAAyBC,CAAzB,CAA8B+B,CAA9B,CAkJdvP,CAF2B,CAE3BA,CAF2B,MAE3BA,CAFoC0P,CDnbnCxB,GCqbDlO,CAlTFvK,CAAA,QAkTEuK,GAjTAvK,CAAA,QAAA,UAAJ,CAEEA,CAAA,QAAA,UAAA,CAAoC+X,CAApC,CAFF,CAGW/X,CAAA,QAAA,aAHX,EAMEA,CAAA,QAAA,aAAA,CAAuC+X,CAAvC,CA2SExN,EAvSFvK,CAAA,oBAuSEuK,EArSJvK,CAAA,oBAAA,CAAmC+X,CAAnC,CAqSIxN,CAAAA,CAAAA,CAlJJ2P,IAmJA,CAAO3P,CAAP,CAAA,CAAe,CACbA,CAAAA,CAAAA,CAAoB0P,KAAAA,EAAAA,CAiBxB,IAAI,CAAAjB,EAAJ,CACE,IADkB,IACT7O,EAAI,CADK,CACFL,EAAAA,IAAAA,EAAhB,CAAyBA,CAAzB,CAAmC,CAAAkP,EAAA,CAAe7O,CAAf,CAAnC,CAAsDA,CAAA,EAAtD,CACEL,CAAA,CAAQmQ,CAAR,CAlBA1P,EAAA,CAASA,CAAAgP,UAAA,EAFI,CAtJmD,CAgBtEX;CAAA5X,UAAAgZ,GAAA,CAA2CG,QAAQ,CAACrC,CAAD,CAAQC,CAAR,CAAa+B,CAAb,CAA4B,CAE3E,IAAIG,EAGQ,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,GAAA,CAEd,IAAIH,CAAJ,CAAmB,CACjBG,CDlXF7B,EAAA,CCkXyB0B,CAEnB,KAAA,CAA0C9C,KAAAA,EAAAxU,SAAAuU,OAAAC,OFhWhD,IAAI,CACF,IAAIhJ,CAsBN,KAAIoM,EAAOna,EAAA,CAAqB,sBAArB,CACX,IAAIyB,CAAA,CEwU6BoY,CFxU7B,CAAJ,CACE,CAAA,CAAO,SEuUwBA,CFvUxB,MAEG,eAFH,YAGS,eAHT,UAIOM,CAJP,OAKI,eALJ,CADT,KAAA,CAF8C,IAY1CC,CAZ0C,CAY9BC,CAZ8B,CAa1CC,EAAa,CAAA,CAEjB,IAAI,CACFF,CAAA,CE0T+BP,CF1TlBO,WAAb,EE0T+BP,CF1TAU,GAA/B,EAA2C,eADzC,CAEF,MAAOxM,CAAP,CAAU,CAGVqM,CACA,CADa,eACb,CAAAE,CAAA,CAAa,CAAA,CAJH,CAOZ,GAAI,CACFD,CAAA,CEiT+BR,CFjTpBQ,SAAX,EEiT+BR,CFjTJW,SAA3B,EEiT+BX,CFjTYY,UAA3C,EAGI1a,CAAA,gBAHJ,EAGsCoa,CAJpC,CAKF,MAAOpM,CAAP,CAAU,CAEVsM,CACA,CADW,eACX,CAAAC,CAAA,CAAa,CAAA,CAHH,CAQZ,CAAA,CAAIA,CAAAA,CAAJ,EEqSiCT,CFrSdO,WAAnB,EEqSiCP,CFrSKQ,SAAtC,EEqSiCR,CFrSsBa,MAAvD,CEqSiCb,CFrSjC,CACS,SEoSwBA,CFnSlBc,QADN;KEoSwBd,CFlSrB5Z,KAFH,YAGSma,CAHT,UAIOC,CAJP,OEoSwBR,CF/RpBa,MALJ,EAKiB,eALjB,CApCT,CAdE,CAAA,CANY,WAMZ,CAN0B/V,EAAA,CAAuBoJ,CAAA4M,QAAvB,CAM1B,CALI,8BAKJ,CALqC5M,CAAAsM,SAKrC,CALkD,kBAKlD,CAJItM,CAAAsM,SAIJ,CAJiB,cAIjB,CAJkCtM,CAAAqM,WAIlC,CAJiD,sBAIjD,CAHIzV,EAAA,CAAuBoJ,CAAA2M,MAAvB,CAAiC,KAAjC,CAGJ,CAFI,gCAEJ,CAFuC/V,EAAA,CAC/BgS,EAAA,CAAyBC,CAAzB,CAD+B,CACI,KADJ,CARrC,CAWF,MAAOgE,EAAP,CAAW,CACX,CAAA,CAAO,0DAAP,CAAoEA,EADzD,CEoVXZ,CD/VF5B,EAAA,CCgWMyC,CAHa,CAKnB,MAAOb,EAZsE,CAmF5Cc,SAAQ,EAAA,CAARA,CAAQ,CAAChD,CAAD,CAAqB,CAC9D,CAAA6B,IAAA,CAASN,EAAT,CAAuCvB,CAAvC,CAD+C+B,IAAAA,EAC/C,CAD8D,CAgHhE,IAAAkB,GAAiC,EAAjC,CAQAC,GAAoC,IA4CFC;QAAQ,GAAA,CAAChb,CAAD,CAAO,CArC1C+a,EAAL,GACEA,EAEA,CAFoC,IAAIrC,CAAJ,CAAsB,EAAtB,CAEpC,CADAoC,EAAA,CAA+B,EAA/B,CACA,CADqCC,EACrC,CAAAE,EAAAzC,EAAA,CAA2CW,EAA3C,CAHF,CAwCO,KAAA,CAAA,IADG+B,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CACH,CAAA,CA6BHC,CAAAA,CAAS,IAAIzC,CAAJ,CA7BC1Y,CA6BD,CAEX,KAAIob,EA/BQpb,CA+BOqb,YAAA,CAAiB,GAAjB,CAAnB,CAEIC,EAjCQtb,CAiCGsX,OAAA,CAAY8D,CAAZ,CAA2B,CAA3B,CAFf,CAGIG,EAAeP,EAAA,CAlCPhb,CAgCKsX,OAAAkE,CAAY,CAAZA,CAAeJ,CAAfI,CAEE,CAGnBD,EAjYG1C,EAAL,GAiYE0C,CAhYA1C,EADF,CACmB,EADnB,CAiYE0C,EA9XK1C,EAgRP,CA8GyByC,CA9GzB,CAAA,CA8GmCH,CACjCA,EA1HFvC,EAAA,CA0HoB2C,CAGpBT,GAAA,CAzCc9a,CAyCd,CAAA,CAAuCmb,CAzChC,CAAP,MAAO,EAHwC,C,CdpsBhCM,QAAQ,GAAA,CAACC,CAAD,CAAqB,CMgB5CvJ,EAAAnR,KAAA,CAAqB,IAArB,CNRA,KAAA2a,QAAA,CAAe,IAAIlI,EAOnB,KAAAmI,EAAA,CAAuBF,CAAvB,EAA6C,IAfD,CAiB9ClY,CAAA,CAAciY,EAAd,CAA8BvJ,EAA9B,CAuBAuJ,GAAA3a,UAAA+a,EAAA,Cc4OSb,EAAA,Cd3OuBhb,gBc2OvB,Cd7NT,KAAA8b,GAAqC,WA0HrC,EAAA,CArPA,EAAAC,UAqPAC,EAAAC,EAAA,CAAmC,CAAA,CAQnCD,EAAAE,EAAA,CAAgC,IAQhCF,EAAAG,EAAA,CAAuC,IAQvCH,EAAAI,EAAA,CAAoC,EAQpCJ,EAAAK,EAAA,CAAuC,EAgBvCL,EAAAM,EAAA,CAAsC,EAWtCN,EAAAO,EAAA,CAA4C,CAAA,CAQ5CP,EAAAQ,EAAA,CAAmC,CAAA,CASnCR,EAAAS,EAAA,CAAmC,CAAA,CASnCT,EAAAU,EAAA,CAAoC,CAAA,CASpCV,EAAAW,EAAA,CAA4C,CAS5CX,EAAAY,EAAA,CAAsC,IAStCZ,EAAAa,EAAA,CAvQWC,EAqRXd,EAAAe,GAAA,CAA4C,CAAA,CA+E5Cf;CAAAgB,KAAA,CAAgCC,QAAQ,CAACC,CAAD,CAAMC,CAAN,CAAkBC,CAAlB,CACCC,CADD,CACc,CACpD,GAAI,IAAAnB,EAAJ,CACE,KAAM1Z,MAAA,CAAM,yDAAN,CACF,IAAA4Z,EADE,CACc,WADd,CAC4Bc,CAD5B,CAAN,CAIExF,CAAAA,CAASyF,CAAA,CAAaA,CAAAG,YAAA,EAAb,CAAwC,KAErD,KAAAlB,EAAA,CAAgBc,CAChB,KAAAZ,EAAA,CAAkB,EAElB,KAAAD,EAAA,CAAmB3E,CACnB,KAAA6E,EAAA,CAAwB,CAAA,CACxB,KAAAN,EAAA,CAAe,CAAA,CAGf,KAAAC,EAAA,CAAYqB,IAiHL3B,EAAA,CACH4B,EAAA,CAlHQD,IAkHR3B,EAAA,CADG,CWliBA4B,EAAA,CAAAC,EAAA,CXkbP,KAAAtB,EAAA,CAAmB,IAAAP,EAAA,CACf,IAAAA,EAAAnG,WAAA,EADe,CWjaZiI,EAAAjI,WAAA,EXqaP,KAAAyG,EAAAyB,mBAAA,CAA+B9a,CAAA,CAAU,IAAA+a,EAAV,CAAoC,IAApC,CAO/B,IAAI,CACFC,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,aAAhB,CAAlB,CAGA,CAFA,IAAArB,EAEA,CAFe,CAAA,CAEf,CADA,IAAAP,EAAA6B,KAAA,CAAerG,CAAf,CAAuBwF,CAAvB,CAA4B,CAAA,CAA5B,CACA,CAAA,IAAAT,EAAA,CAAe,CAAA,CAJb,CAKF,MAAOuB,CAAP,CAAY,CACZH,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,qBAAhB,CAAwCE,CAAAtD,QAAxC,CAAlB,CACAuD,GAAA,CAAAA,IAAA,CAA0CD,CAA1C,CACA,OAHY,CAQVE,CAAAA,CAAUd,CAAVc,EAAyB,EAE7B,KAAIvC,EAAU,IAAAA,QAAA7G,MAAA,EAGVuI;CAAJ,EACEhK,EAAA,CAAqBgK,CAArB,CAAkC,QAAQ,CAAC5c,CAAD,CAAQuI,CAAR,CAAa,CACrD2S,CAAA7H,IAAA,CAAY9K,CAAZ,CAAiBvI,CAAjB,CADqD,CAAvD,CAQE0d,EAAAA,CAAiBvS,EAAA,CAAgB+P,CAAApI,EAAA,EAAhB,CAGjB6K,EAAAA,CAAqBte,CAAA,SAArBse,EACCF,CADDE,WACoBte,EAAA,SACV,OAAd,EAAI4X,CAAJ,EAAyByG,CAAzB,EAA4CC,CAA5C,EAKEzC,CAAA7H,IAAA,CAhZiCuK,cAgZjC,CAjYAC,iDAiYA,CAKFjL,GAAA,CAAqBsI,CAArB,CAA8B,QAAQ,CAAClb,CAAD,CAAQuI,CAAR,CAAa,CACjD,IAAAkT,EAAAqC,iBAAA,CAA2BvV,CAA3B,CAAgCvI,CAAhC,CADiD,CAAnD,CAEG,IAFH,CAII,KAAAoc,EAAJ,GACE,IAAAX,EAAAsC,aADF,CAC2B,IAAA3B,EAD3B,CAIuC7T,kBAAvC,EAA4B,KAAAkT,EAA5B,GACE,IAAAA,EAAAuC,gBADF,CAC8B,IAAA1B,GAD9B,CAQA,IAAI,CACE,IAAAH,EAeJ,Ge9b4B8B,Cfkb1BC,aAAA,CAA2C,IAAA/B,EAA3C,CACA,CAAA,IAAAA,EAAA,CAAkB,IAWpB,EAT4B,CAS5B,CATI,IAAAD,EASJ,GAREkB,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,mBAAhB,CACd,IAAAnB,EADc,CACU,kBADV,CAAlB,CAEA,CAAA,IAAAC,EAAA,Cexb0BgC,CfwbRC,WAAA,CACdhc,CAAA,CAAU,IAAAic,GAAV,CAAyB,IAAzB,CADc,CACkB,IAAAnC,EADlB,CAMpB,EAHAkB,CAAA,CAAA,IAAAhC,EAAA;AAAkBiC,CAAA,CAAAA,IAAA,CAAgB,iBAAhB,CAAlB,CAGA,CAFA,IAAAtB,EAEA,CAFe,CAAA,CAEf,CADA,IAAAN,EAAAc,KAAA,CAAekB,CAAf,CACA,CAAA,IAAA1B,EAAA,CAAe,CAAA,CAhBb,CAkBF,MAAOwB,CAAP,CAAY,CACZH,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,cAAhB,CAAiCE,CAAAtD,QAAjC,CAAlB,CACA,CAAAuD,EAAA,CAAAA,IAAA,CAA0CD,CAA1C,CAFY,CAxGsC,CAqHhBnS,SAAQ,GAAA,CAACkT,CAAD,CAAS,CACrD,MT7dO,cS6dP,EACwCA,CT9dXC,YAAA,ES4dwB,CAuBvDhD,CAAA8C,GAAA,CAAoCG,QAAQ,EAAG,CAC1B,WAAnB,EAAI,MAAOpf,GAAX,EAGW,IAAAqc,EAHX,GAIE,IAAAI,EAKA,CALkB,kBAKlB,CALuC,IAAAK,EAKvC,CAJkB,cAIlB,CAFAkB,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,IAAAxB,EAAhB,CAAlB,CAEA,CADA,IAAAzJ,cAAA,CgBvjBOqM,ShBujBP,CACA,CAAA,IAAAC,MAAA,CiB1gBOD,CjB0gBP,CATF,CAD6C,CAqBbE,SAAQ,GAAA,CAARA,CAAQ,CAAYpB,CAAZ,CAAiB,CACzD,CAAA/B,EAAA,CAAe,CAAA,CACX,EAAAC,EAAJ,GACE,CAAAQ,EAEA,CAFgB,CAAA,CAEhB,CADA,CAAAR,EAAAiD,MAAA,EACA,CAAA,CAAAzC,EAAA,CAAgB,CAAA,CAHlB,CAKA,EAAAJ,EAAA,CAAkB0B,CAElBqB,GAAA,CAAAA,CAAA,CACAC,GAAA,CAAAA,CAAA,CAVyD;AAmBhBC,QAAQ,GAAA,CAARA,CAAQ,CAAG,CAC/C,CAAAhD,EAAL,GACE,CAAAA,EAEA,CAFwB,CAAA,CAExB,CADA,CAAA1J,cAAA,CgB/lBQ2M,UhB+lBR,CACA,CAAA,CAAA3M,cAAA,CgB9lBK4M,OhB8lBL,CAHF,CADoD,CActDzD,CAAAmD,MAAA,CAAiCO,QAAQ,EAAkB,CACrD,IAAAxD,EAAJ,EAAiB,IAAAD,EAAjB,GACE4B,CAAA,CAAA,IAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,IAAA,CAAgB,UAAhB,CAAlB,CAQA,CAPA,IAAA7B,EAOA,CAPe,CAAA,CAOf,CANA,IAAAS,EAMA,CANgB,CAAA,CAMhB,CALA,IAAAR,EAAAiD,MAAA,EAKA,CAJA,IAAAzC,EAIA,CAJgB,CAAA,CAIhB,CAFA,IAAA7J,cAAA,CgBlnBQ2M,UhBknBR,CAEA,CADA,IAAA3M,cAAA,CgBhnBK8M,OhBgnBL,CACA,CAAAL,EAAA,CAAAA,IAAA,CATF,CADyD,CA+C3DtD,EAAA4B,EAAA,CAA+CgC,QAAQ,EAAG,CACnD,IAAAnD,EAAL,EAAsB,IAAAD,EAAtB,EAAuC,IAAAE,EAAvC,CAKEmD,EAAA,CAAAA,IAAA,CALF,CAGE,IAAAC,GAAA,EAJsD,CAmB1D9D,EAAA8D,GAAA,CAAyDC,QAAQ,EAAG,CAClEF,EAAA,CAAAA,IAAA,CADkE,CAWfG;QAAQ,GAAA,CAARA,CAAQ,CAAG,CAC9D,GAAK,CAAA/D,EAAL,EAKmB,WALnB,EAKI,MAAOpc,GALX,CASO,GACH,CAAAsc,EAAA,CWtpBiBpG,CXspBjB,CADG,EWnnBGyJ,CXmnBH,EAEHS,CAAA,CAAAA,CAAA,CAFG,EAGiB,CAHjB,EAGHC,EAAA,CAAAA,CAAA,CAHG,CAOLrC,CAAA,CAAA,CAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,CAAA,CACd,0CADc,CAAlB,CAPK,KAgBL,IAAI,CAAAtB,EAAJ,EWnoBQgD,CXmoBR,EACIS,CAAA,CAAAA,CAAA,CADJ,CejoB4BrB,CfmoB1BC,WAAA,CACIhc,CAAA,CAAU,CAAA+a,EAAV,CAAoC,CAApC,CADJ,CAC+C,CAD/C,CAFF,KAUA,IAHA,CAAA/K,cAAA,CgBntBkBsN,kBhBmtBlB,CAqFK,CW/tBGX,CX+tBH,EAAAS,CAAA,CAlFDG,CAkFC,CAlFL,CAAuB,CACrBvC,CAAA,CAAA,CAAAhC,EAAA,CAAkBiC,CAAA,CAAAA,CAAA,CAAgB,kBAAhB,CAAlB,CAEA,EAAA7B,EAAA,CAAe,CAAA,CAEf,IAAI,CAGF,GAAIoE,EAAA,CAAAA,CAAA,CAAJ,CACE,CAAAxN,cAAA,CgBpuBE2M,UhBouBF,CACA,CAAA,CAAA3M,cAAA,CgBpuBCyN,ShBouBD,CAFF,KAGO,CAGD,IAAA,CA4IZ,IAAI,CACF,CAAA,CWlzBMC,CXkzBC,CAAAN,CAAA,CA7IGO,CA6IH,CAAA,CA7IGA,CA8INtE,EAAAuE,WADG,CACoB,EAFzB,CAGF,MAAO3S,CAAP,CAAU,CACV+P,CAAA,CAhJU2C,CAgJV3E,EAAA,CAAkB,sBAAlB,CAA2C/N,CAAA4M,QAA3C,CACA,CAAA,CAAA,CAAO,EAFG,CAhJJ,CAAA4B,EAAA,CACI,CADJ,CAC2B,IAD3B,CACkC4D,EAAA,CAAAA,CAAA,CADlC,CACqD,GACrDb,GAAA,CAAAA,CAAA,CAJK,CANL,CAAJ,OAYU,CACRC,EAAA,CAAAA,CAAA,CADQ,CAjBW,CApCqC;AAoEzBoB,QAAQ,GAAA,CAARA,CAAQ,CAAkB,CAC/D,GAAI,CAAAxE,EAAJ,CAAe,CAGb,IAAIyE,EAAM,CAAAzE,EAAV,CACI0E,EACA,CAAAzE,EAAA,CW5tBarG,CX4tBb,CAAA,CACIvV,EADJ,CACwB,IAC5B,EAAA2b,EAAA,CAAY,IACZ,EAAAC,EAAA,CAAmB,IAEf,EAAAS,EAAJ,GetrB4B8B,CfwrB1BC,aAAA,CAA2C,CAAA/B,EAA3C,CACA,CAAA,CAAAA,EAAA,CAAkB,IAHpB,CAOE,EAAA/J,cAAA,CgBzwBGgO,OhBywBH,CAGF,IAAI,CAKFF,CAAAhD,mBAAA,CAAyBiD,CALvB,CAMF,MAAO9S,CAAP,CAAU,CAIV,CAAA+N,EchQJnC,IAAA,CAAST,EAAT,CdgQwB,oDchQxB,CdiQwBnL,CAAA4M,QcjQxB,CADiDd,IAAAA,EACjD,Cd4Pc,CA1BC,CADgD;AAyD5BkH,QAAQ,GAAA,CAARA,CAAQ,CAAG,CAC9C,IAAIC,EAASb,EAAA,CAAAA,CAAA,CAAb,CAEO,CkBlvBwC,EAAA,CAC/C,OlBivBOa,CkBjvBP,EACE,KAlEEC,GAkEF,CACA,KAlEOC,GAkEP,CACA,KAlEQC,GAkER,CACA,KAjEUC,GAiEV,CACA,KAhEeC,GAgEf,CACA,KA1DYC,GA0DZ,CACA,KAtBmBC,IAsBnB,CACE,CAAA,CAAO,CAAA,CAAP,OAAA,CAEF,SACE,CAAA,CAAO,CAAA,CAXX,ClBivBO,GAAA,CAAA,CAAA,CAAA,CACH,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CP9iBAC,CO8iBA,CAU2Cta,MAAAua,CAV3C,CAUkDpF,EAAPoF,CP5mB3CC,MAAA,CAAUnZ,EAAV,CA8BG,CA3DCoZ,CA2DD,COokBH,EPpkBgD,IOokBhD,CP7iBCH,CAAAA,CO6iBD,EP7iBWI,IAAAC,SO6iBX,GP5iBEC,CACJ,CADeF,IAAAC,SAAAC,SACf,CAAAN,CAAA,CAASM,CAAAvK,OAAA,CAAgB,CAAhB,CAAmBuK,CAAA5gB,OAAnB,CAAqC,CAArC,CO2iBP,EAAA,CAAA,CAAA,CAWG6gB,EAAAld,KAAA,CPljBA2c,CAAAA,CAASA,CAAAvC,YAAA,EAATuC,CAAgC,EOkjBhC,CAXH,EAAA,CAAA,CADG,CAAP,MAAO,EAHuC,CAwBPQ,QAAQ,EAAA,CAARA,CAAQ,CAAG,CAClD,MAAO,EAAA7F,EAAA,CACyC,CAAAA,EAAA8F,WADzC,CWnxBQC,CXkxBmC,CAYfC,QAAQ,GAAA,CAARA,CAAQ,CAAG,CAO9C,GAAI,CACF,MW5xBM3B,EX4xBC,CAAAN,CAAA,CAAAA,CAAA,CAAA,CACH,CAAA/D,EAAA6E,OADG,CACiB,EAFtB,CAGF,MAAOjT,CAAP,CAAU,CAEV,MADA,EAAA+N,Ec7TFnC,IAAA,CAASR,EAAT,Cd6TuB,sBc7TvB,Cd6TgDpL,CAAA4M,Qc7ThD,CADkDd,IAAAA,EAClD,Cd8TU,CAAA,EAFE,CAVkC;AAwPVuI,QAAQ,EAAA,CAARA,CAAQ,CAACtK,CAAD,CAAM,CAClD,MAAOA,EAAP,CAAa,IAAb,CAAoB,CAAAwE,EAApB,CAAuC,GAAvC,CAA6C,CAAAD,EAA7C,CAA6D,GAA7D,CACI8D,EAAA,CAAAA,CAAA,CADJ,CACuB,GAF2B,C,CmBhmC1BkC,QAAQ,GAAA,CAAClF,CAAD,CAAMmF,CAAN,CAAYC,CAAZ,CAAuBC,CAAvB,CAAgC,CAChE,IAAIC,EAAU,IAAI/G,EAClBnM,GAAA,CAAmBkT,CAAnB,CHcUhD,UGdV,CAAyD,QAAQ,CAAC6C,CAAD,CAAO,CACtE,GAAIhC,EAAA,CAAAmC,CAAA,CAAJ,CAAA,CACa,IAAA,CAAA,IAAAnY,CAAA,CAAAA,CAAAA,OAAA,CAAe,CnB2+B9B,CmB3+B8B,CAAA,OnB2+B9B,CAAA,CAAA,CATK,CAAA6R,EAAL,CASOlH,EAAA,CALY,CAAAkH,EAAAuG,aAKZ,CATP,CADkE,IAAA,EmBj+B9DH,EAAA,CAAW,CAAX,EAA4D,EAA5D,CADF,CAAA,IAGEC,EAAA,CAAQF,CAAR,CAJoE,CAAxE,CAOAG,EAAAxF,KAAA,CAAaE,CAAb,CAAkB,MAAlB,CAA0BwF,IAAAC,UAAA,CAAeN,CAAf,CAA1B,CAAgD,CAAC,cAAD,CAAkB,kBAAlB,QAAgD,KAAhD,CAAhD,CATgE,C,CCE3BO,QAAQ,GAAA,CAACjhB,CAAD,CAAsB,CAYnE,MAVakhB,KACAC,QAAQ,CAAC1gB,CAAD,CAAQ,CAAE,MAAO2gB,GAAA,CAA0CphB,CAA1C,CCScqhB,MDTd,CAA+D5gB,CAA/D,CAAT,CADhBygB,MAECI,QAAQ,EAAG,CACvB,IAAIC,EAAO,EACXH,GAAA,CAA0CphB,CAA1C,CCMkDqhB,MDNlD,CAA+D,QAAQ,CAACrhB,CAAD,CAAM,CAC3EuhB,CAAA3e,KAAA,CAAU5C,CAAV,CACA,OAAOA,EAFoE,CAA7E,CAIA,OAAOuhB,EANgB,CAFZL,CAFsD,CAuBzBE,QAAQ,GAAA,CAACphB,CAAD,CAAMqhB,CAAN,CAAsB5gB,CAAtB,CAA6B,CAE/E,GhCgxB2B,OgChxB3B,EhCgxBO5B,CAAA,CgChxBUmB,ChCgxBV,CgChxBP,CACEA,CAAA2J,QAAA,CAAY,QAAQ,CAAC6X,CAAD,CAAOC,CAAP,CAAc,CAChCzhB,CAAA,CAAIyhB,CAAJ,CAAA,CAAaL,EAAA,CAA0CI,CAA1C,CAAgDH,CAAhD,CAAgE5gB,CAAhE,CADmB,CAAlC,CADF,KAIO,IAAIX,EAAA,CAAcE,CAAd,CAAJ,CACL,IAAK0hB,IAAIA,CAAT,GAAqB1hB,EAArB,CACMA,CAAA2C,eAAA,CAAmB+e,CAAnB,CAAJ,GACML,CAAJ,EAAsBK,CAAtB,CACE1hB,CADF,CACQS,CAAA,CAAMT,CAAN,CADR,CAGEA,CAAA,CAAI0hB,CAAJ,CAHF,CAGkBN,EAAA,CAA0CphB,CAAA,CAAI0hB,CAAJ,CAA1C,CAAyDL,CAAzD,CAAyE5gB,CAAzE,CAJpB,CASJ,OAAOT,EAjBwE,CA2BpD2hB,QAAQ,GAAA,CAACC,CAAD,CAAOC,CAAP,CAAa,CAChD,IAAIC,EAAO,EAAX,CACSJ,CAAT,KAASA,CAAT,GAAqBE,EAArB,CACMA,CAAAjf,eAAA,CAAoB+e,CAApB,CAAJ,GACEI,CAAA,CAAKJ,CAAL,CADF,CACmBE,CAAA,CAAKF,CAAL,CADnB,CAIF,KAASA,CAAT,GAAqBG,EAArB,CACMA,CAAAlf,eAAA,CAAoB+e,CAApB,CAAJ,GACEI,CAAA,CAAKJ,CAAL,CADF,CACmBG,CAAA,CAAKH,CAAL,CADnB,CAIF,OAAOI,EAZyC,C,CC/CrBC,QAAQ,GAAA,CAACpgB,CAAD,CAASqgB,CAAT,CAAkB,CACrD,GAAK,CAAAviB,CAAA,CAAWkC,CAAX,CAAL,CACE,MAAOA,EAGT,IAAK,CAAAlC,CAAA,CAAWuiB,CAAX,CAAL,CACE,KAAUnhB,MAAJ,CAAU,SAAU,+CAAV,CAAV,CAAN,CAGF,MAAOogB,GAAA,CAAqCtf,CAArC,CAAAkM,IAAA,CACH,QAAQ,CAAC7N,CAAD,CAAM,CACZ,IAAIiiB,EAAOjiB,CACU,OAArB,EAAIA,CAAA,OAAJ,CjC0xBqB,OiC1xBrB,EjC0xBCnB,CAAA,CiCxxBkBmB,CAAArB,OjCwxBlB,CiC1xBD,EtB8hBiC,CsB9hBjC,EtB8hBCyK,EAAA,CsB5hBwDpJ,CAAAkF,OtB4hBxD,CsB5hBuElF,2BtB4hBvE,CsB9hBD,GAGIiiB,CAHJ,CAGW,IAAIC,CAAJ,CAA4BliB,CAA5B,CAHX,EAMEiiB,CANF,CAMS,IAAIE,CAAJ,CAA2BniB,CAA3B,CAAgCgiB,CAAhC,CAET,OAAOC,EAVK,CADX,CAT8C,CAwC9BE,QAAQ,EAAA,CAACniB,CAAD,CAAMgiB,CAAN,CAAe,CAE9C,GAAK,CAAAviB,CAAA,CAAWO,CAAX,CAAL,CACE,KAAUa,MAAJ,CAAU,SAAU,2CAAV,CAAV,CAAN,CAGF,GAAK,CAAApB,CAAA,CAAWuiB,CAAX,CAAL,CACE,KAAUnhB,MAAJ,CAAU,SAAU,+CAAV,CAAV,CAAN,CAGF,IAAA,SAAA,CAAmBmhB,CACnBvZ,GAAA,CAAmB,IAAnB,CAAyBzI,CAAzB,CACA,OAAO,KAZuC;AAAhDyB,CAxDA,0BAwDA0gB,CAxDA,CAgFAA,EAAAhjB,UAAAijB,OAAA,CAA0CC,QAAQ,CAACC,CAAD,CAAW1B,CAAX,CAAoB2B,CAApB,CAAiC,CACjF,IAAIC,EAAO,IACP,KAAA,KAAJ,CACE,IAAA,SAAA,OAAA,CAA2BpgB,EAAA,CAA2B,IAAA,KAA3B,CAAyCmgB,CAAzC,CAA3B,CAAkF,QAAQ,CAACrB,CAAD,CAAS,CACjGoB,CAAA,CAASP,EAAA,CAA2Bb,CAA3B,CAAmCsB,CAAA,SAAnC,CAAT,CADiG,CAAnG,CAEG5B,CAFH,CADF,CAKEA,CAAA,CAAQ,SAAY,4DAAZ,CAAR,CAP+E,CAAnFuB,EAAAM,UjC60CE,OAAA,CiC70CFN,CAAA,UAAAM,OAwB0BP,SAAQ,EAAA,CAACliB,CAAD,CAAM,CACtC,GAAK,CAAAP,CAAA,CAAWO,CAAX,CAAL,CACE,KAAUa,MAAJ,CAAU,SAAU,2CAAV,CAAV,CAAN,CAEF4H,EAAA,CAAmB,IAAnB,CAAyBzI,CAAzB,CACA,OAAO,KAL+B,CAAxCyB,CAxGA,2BAwGAygB,CAxGA,CA0HAA,EAAA/iB,UAAAujB,GAAA,CAAyCC,QAAQ,CAACC,CAAD,CAAON,CAAP,CAAiB1B,CAAjB,CAA0B2B,CAA1B,CAAuC,CAClF,IAAA,KAAJ,CACE9B,EAAA,CAAwBre,EAAA,CAA2B,IAAA,KAA3B,CAAyCmgB,CAAzC,CAAxB,CAA+EK,CAA/E,CAAqFN,CAArF,CAA+F1B,CAA/F,CADF,CAGEA,CAAA,CAAQ,SAAY,0DAAZ,CAAR,CAJoF,CAAxFsB;CAAAO,UjCmyCE,KAAA,CiCnyCFP,CAAA,UAAAO,G,CCxG2BI,QAAQ,EAAA,CAACC,CAAD,CAAYd,CAAZ,CAAqB,CAEtD,GAAK,CAAAviB,CAAA,CAAWuiB,CAAX,CAAL,CACE,KAAUnhB,MAAJ,CAAU,SAAU,mBAAV,CAAV,CAAN,CAGF,GAAK,CAAAf,EAAA,CAAcgjB,CAAd,CAAL,CACE,KAAUjiB,MAAJ,CAAU,SAAU,qBAAV,CAAV,CAAN,CAGF,IAAAkiB,EAAA,CAAgBf,CAChBvZ,GAAA,CAAmB,IAAnB,CAAyBqa,CAAzB,CACA,OAAO,KAZ+C,CAAxDrhB,CAlBA,4BAkBAohB,CAlBA,CA4CAA,EAAA1jB,UAAA6jB,GAAA,CAA+CC,QAAQ,CAACX,CAAD,CAAW1B,CAAX,CAAoB,CACpEnhB,CAAA,CAAW,IAAA,KAAX,CAAL,EACEmhB,CAAA,CAAQ,SAAU,0BAAV,CAAR,CAEF,KAAI4B,EAAO,IACX,KAAAO,EAAA,OAAA,CACIP,CAAA,KADJ,CAEI,QAAQ,CAACtB,CAAD,CAAS,CACfA,CAAA,CAAS,IAAI2B,CAAJ,CAA6B3B,CAA7B,CAAqCsB,CAAAO,EAArC,CACL7gB,GAAA,CAAwCgf,CAAxC,CAAJ,CACEoB,CAAA,CAASpB,CAAT,CADF,CAGEN,CAAA,CAAQM,CAAR,CALa,CAFrB,CAUIN,CAVJ,CALyE,CAA3EiC,EAAAJ,UlCi3CE,UAAA,CkCj3CFI,CAAA,UAAAJ,GA8BAI;CAAA1jB,UAAA+jB,GAAA,CAAmDC,QAAQ,CAACb,CAAD,CAAW1B,CAAX,CAAoB,CACxEnhB,CAAA,CAAW,IAAA,SAAX,CAAL,EACEmhB,CAAA,CAAQ,SAAU,8BAAV,CAAR,CAEF,KAAI4B,EAAO,IACX,KAAAO,EAAA,OAAA,CAAwB,IAAA,SAAxB,CAA0C,QAAQ,CAAC7B,CAAD,CAAS,CACzDA,CAAA,CAAS,IAAI2B,CAAJ,CAA6B3B,CAA7B,CAAqCsB,CAAAO,EAArC,CACTT,EAAA,CAASpB,CAAT,CAFyD,CAA3D,CAGGN,CAHH,CAL6E,CAA/EiC,EAAAJ,UlCm1CE,cAAA,CkCn1CFI,CAAA,UAAAJ,G,CCxD0BW,QAAQ,EAAA,CAACpB,CAAD,CAAUqB,CAAV,CAAwB,CACxD,IAAAA,EAAA,CAAoBA,CACpB,KAAArB,QAAA,CAAeA,CAFyC,CAA1DvgB,CAlBA,2BAkBA2hB,CAlBA,CAiCAA,EAAAjkB,UAAA0hB,QAAA,CAA4CyC,QAAQ,CAACC,CAAD,CAASvJ,CAAT,CAAkBsI,CAAlB,CAA4B1B,CAA5B,CAAqC,CAEvF,IAAI4B,EAAO,IACX,KAAAR,QAAA,CAAa,IAAAqB,EAAb,CAAA,CAAgC1B,EAAA,CAA2B4B,CAA3B,CAAmCvJ,CAAnC,CAAhC,CAA6E,QAAQ,CAACkH,CAAD,CAAS,CACxFhf,EAAA,CAAwCgf,CAAxC,CAAJ,CACEsB,CAAAgB,EAAA,CAAmBtC,CAAnB,CAA2BoB,CAA3B,CADF,CAGE1B,CAAA,CAAQM,CAAR,CAJ0F,CAA9F,CAMG,QAAQ,CAAC/U,CAAD,CAAI,CAAEyU,CAAA,CAAQzU,CAAR,CAAF,CANf,CAHuF,CAAzFiX,EAAAX,UnC43CE,QAAA,CmC53CFW,CAAA,UAAAX,QAmBAW,EAAAjkB,UAAAskB,EAAA,CAAsDC,QAAQ,CAACljB,CAAD,CAAW,CACvE,IAAImjB,EAAQhjB,SAAZ,CACI6hB,EAAO,IACX,OAAO,SAAQ,EAAG,CAEhB,IADA,IAAIhN,EAAO7U,SAAX,CACS2H,EAAIqb,CAAArkB,OAAb,CAAgC,CAAhC,CAA2BgJ,CAAA,EAA3B,CAAA,CACEkN,CAAA,CAAO,CAACmO,CAAA,CAAMrb,CAAN,CAAA7H,MAAA,CAAe+hB,CAAf,CAAqBhN,CAArB,CAAD,CAET,OAAOA,EAAA,CAAK,CAAL,CALS,CAHqD,CAmBzE4N,EAAAjkB,UAAAqkB,EAAA,CAAkDI,QAAQ,CAAC1C,CAAD,CAASoB,CAAT,CAAmB,CAC3EpB,CAAA,CAAS,IAAAuC,EAAA,CAAuB,IAAAI,GAAvB,CAAyC,IAAAC,EAAzC,CAAA,CAAsD5C,CAAtD,CACToB,EAAA,CAASpB,CAAT,CAF2E,CAW7EkC;CAAAjkB,UAAA0kB,GAAA,CAAgDE,QAAQ,CAAC7C,CAAD,CAAS,CAE/DA,CAAA,QAAA,CAAoB,IAAI2B,CAAJ,CAChB3B,CAAA,QADgB,CACG,IAAAc,QADH,CAEpB,OAAOd,EAJwD,CAajEkC,EAAAjkB,UAAA2kB,EAAA,CAA2CE,QAAQ,CAAC9C,CAAD,CAAS,CAG1D,MADAA,EACA,CADSa,EAAA,CAA2Bb,CAA3B,CAAmC,IAAAc,QAAnC,CAFiD,CAqBzCiC,SAAQ,GAAA,CAACjC,CAAD,CAAU,CAEnCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,SAA5C,CAFmC,CAIrCngB,CAAA,CAAcoiB,EAAd,CAAgCb,CAAhC,CAJA3hB,EApHA,oBAoHAwiB,EApHA,CAuIkBE,SAAQ,GAAA,CAACnC,CAAD,CAAU,CAElCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,QAA5C,CAFkC,CAIpCngB,CAAA,CAAcsiB,EAAd,CAA+Bf,CAA/B,CAJA3hB,EAvIA,mBAuIA0iB,EAvIA,CA4JgBC,SAAQ,GAAA,CAACpC,CAAD,CAAU,CAEhCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,MAA5C,CAFgC,CAIlCngB,CAAA,CAAcuiB,EAAd,CAA6BhB,CAA7B,CAJA3hB,EA5JA,iBA4JA2iB,EA5JA,CAmLkBC,SAAQ,GAAA,CAACrC,CAAD,CAAU,CAElCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,QAA5C,CAFkC,CAIpCngB,CAAA,CAAcwiB,EAAd,CAA+BjB,CAA/B,CAJA3hB,EAnLA,mBAmLA4iB,EAnLA,CAyMsBC,SAAQ,GAAA,CAACtC,CAAD,CAAU,CAEtCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,YAA5C,CAFsC,CAIxCngB,CAAA,CAAcyiB,EAAd,CAAmClB,CAAnC,CAJA3hB,EAzMA,uBAyMA6iB,EAzMA,CAuNAA;EAAAnlB,UAAAqkB,EAAA,CAA8Ce,QAAQ,CAACrD,CAAD,CAASoB,CAAT,CAAmB,CAEvEA,CAAA,CAAS,IAAAmB,EAAA,CAAuB,IAAAK,EAAvB,CAAA,CAAoC5C,CAApC,CAAT,CAFuE,CAmBtDsD,SAAQ,EAAA,CAACxC,CAAD,CAAU,CAEnCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,SAA5C,CAFmC,CAIrCngB,CAAA,CAAc2iB,CAAd,CAAgCpB,CAAhC,CAJA3hB,EA1OA,oBA0OA+iB,CA1OA,CAyPAA,EAAArlB,UAAAqkB,EAAA,CAA2CiB,QAAQ,CAACvD,CAAD,CAASoB,CAAT,CAAmB,CAEpEA,CAAA,CAASpB,CAAT,CAFoE,CAAtEsD,EAAA/B,UnCoqCE,cAAA,CmCpqCF+B,CAAA,UAAA/B,EAiBkBiC,SAAQ,EAAA,CAAC1C,CAAD,CAAU,CAElCkC,CAAA7kB,KAAA,CAA6B,IAA7B,CAAmC2iB,CAAnC,CAA4C,QAA5C,CAFkC,CAIpCngB,CAAA,CAAc6iB,CAAd,CAA+BtB,CAA/B,CAJA3hB,EA1QA,mBA0QAijB,CA1QA,CA2RAA,EAAAvlB,UAAA0hB,QAAA,CAAoC8D,QAAQ,CAACpB,CAAD,CAASvJ,CAAT,CAAkBsI,CAAlB,CAA4B1B,CAA5B,CAAqC,CAE/E,IAAI4B,EAAO,IACX,KAAAR,QAAA,QAAA,CAAwB,eAAxB,CAAyCL,EAAA,CAA2B4B,CAA3B,CAAmCvJ,CAAnC,CAAzC,CAAsF,QAAQ,CAACkH,CAAD,CAAS,CACjGhf,EAAA,CAAwCgf,CAAxC,CAAJ,CAEEsB,CAAAgB,EAAA,CAAmBtC,CAAnB,CAA2BoB,CAA3B,CAFF,CAKE1B,CAAA,CAAQM,CAAR,CANmG,CAAvG,CAQG,QAAQ,CAAC/U,CAAD,CAAI,CAAEyU,CAAA,CAAQzU,CAAR,CAAF,CARf,CAH+E,CAAjFuY,EAAAjC,UnCkoCE,QAAA,CmCloCFiC,CAAA,UAAAjC,QAsBAiC,EAAAvlB,UAAAqkB,EAAA,CAA0CoB,QAAQ,CAAC1D,CAAD,CAASoB,CAAT,CAAmB,CAEnEA,CAAA,CAAS,IAAAmB,EAAA,CAAuB,IAAAK,EAAvB,CAAA,CAAoC5C,CAApC,CAAT,CAFmE,C,CC3SrE,IAAI2D,EAAIA,CAAJA,EAAS,EAyCbpjB,EA/CA,sBA+CqBqjB,QAAQ,EAAG,CAE9B,MAAOD,EAAAE,KAAAC,UAAAjS,IAAA,CAAqB,cAArB,CAAqC,iBAArC,CAAwD,kBAAxD,CAFuB,CA/ChC;",
	"sources": [
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/base.js",
		"out/tmp/src/places/util/Validator.js",
		"out/tmp/src/places/util/Url.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/string/string.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/useragent/useragent.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/uri/utils.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/disposable/disposable.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/listenable.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/listener.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/object/object.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/browserfeature.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/array/array.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/xhrio.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/event.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/reflect/reflect.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/browserevent.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/eventtype.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/events.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/events/eventtarget.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/structs/structs.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/structs/map.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/json/json.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/xmlhttpfactory.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/xmlhttp.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/debug/debug.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/debug/logrecord.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/debug/logger.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/timer/timer.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/eventtype.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/errorcode.js",
		"/home/here/repo/ext-places/dev/node_modules/closure-library/closure/goog/net/httpstatus.js",
		"out/tmp/src/places/util/Ajax.js",
		"out/tmp/src/places/util/Object.js",
		"out/tmp/src/places/model/Link.js",
		"out/tmp/src/places/model/ResultSet.js",
		"out/tmp/src/places/PlacesEndpoint.js",
		"out/tmp/src/places/namespace.js"
	],
	"names": [
		"goog",
		"goog.global",
		"goog.getObjectByName",
		"name",
		"parts",
		"split",
		"cur",
		"part",
		"shift",
		"val",
		"goog.nullFunction",
		"goog.typeOf",
		"value",
		"s",
		"Array",
		"Object",
		"className",
		"prototype",
		"toString",
		"call",
		"length",
		"splice",
		"propertyIsEnumerable",
		"goog.isDef",
		"undefined",
		"goog.isArrayLike",
		"type",
		"goog.isString",
		"goog.isObject",
		"goog.getUid",
		"obj",
		"goog.UID_PROPERTY_",
		"goog.uidCounter_",
		"Math",
		"random",
		"goog.bindNative_",
		"fn",
		"selfObj",
		"var_args",
		"apply",
		"bind",
		"arguments",
		"goog.bindJs_",
		"Error",
		"boundArgs",
		"slice",
		"newArgs",
		"unshift",
		"goog.bind",
		"Function",
		"indexOf",
		"goog.bind.apply",
		"goog.now",
		"Date",
		"now",
		"goog.exportSymbol",
		"publicPath",
		"object",
		"execScript",
		"goog.inherits",
		"childCtor",
		"parentCtor",
		"tempCtor",
		"superClass_",
		"H.places.util.ResponseValidator.isValid",
		"response",
		"H.places.util.Url.BuildUrl",
		"baseUrl",
		"paramsMap",
		"queryString",
		"q",
		"str",
		"p",
		"hasOwnProperty",
		"push",
		"encodeURIComponent",
		"join",
		"goog.string.htmlEscape",
		"goog.string.allRe_.test",
		"test",
		"replace",
		"goog.string.amperRe_",
		"goog.string.ltRe_",
		"goog.string.gtRe_",
		"goog.string.quotRe_",
		"goog.string.allRe_",
		"goog.string.compareElements_",
		"left",
		"right",
		"goog.userAgent.getUserAgentString",
		"userAgent",
		"goog.userAgent.getNavigator",
		"goog.userAgent.detectedGecko_",
		"goog.userAgent.detectedWebkit_",
		"goog.userAgent.detectedIe_",
		"goog.userAgent.detectedOpera_",
		"ua",
		"navigator",
		"product",
		"goog.userAgent.OPERA",
		"goog.userAgent.IE",
		"goog.userAgent.GECKO",
		"goog.userAgent.WEBKIT",
		"goog.userAgent.PLATFORM",
		"platform",
		"ss",
		"goog.userAgent.getDocumentMode_",
		"doc",
		"goog.userAgent.VERSION",
		"version",
		"re",
		"operaVersion",
		"arr",
		"exec",
		"docMode",
		"parseFloat",
		"String",
		"goog.userAgent.isVersionCache_",
		"goog.userAgent.isVersion",
		"order",
		"v1Subs",
		"v2Subs",
		"version2",
		"subCount",
		"max",
		"subIdx",
		"v1Sub",
		"v2Sub",
		"v1CompParser",
		"v2CompParser",
		"v1Comp",
		"v2Comp",
		"v1CompNum",
		"parseInt",
		"v2CompNum",
		"goog.userAgent.DOCUMENT_MODE",
		"mode",
		"goog.uri.utils.splitRe_",
		"RegExp",
		"goog.Disposable",
		"goog.Disposable.MONITORING_MODE",
		"goog.Disposable.MonitoringMode.OFF",
		"OFF",
		"goog.events.ListenableKey.counter_",
		"goog.events.Listener",
		"goog$events$Listener.prototype",
		"goog.events.Listener.prototype",
		"key",
		"removed",
		"callOnce",
		"init",
		"goog.events.Listener.prototype.init",
		"listener",
		"proxy",
		"src",
		"capture",
		"opt_handler",
		"isFunctionListener_",
		"handleEvent",
		"handler",
		"goog.events.Listener.prototype.handleEvent",
		"eventObject",
		"goog.object.getValues",
		"res",
		"i",
		"goog.object.getKeys",
		"goog.object.PROTOTYPE_FIELDS_",
		"goog.object.extend",
		"target",
		"source",
		"j",
		"goog.object.PROTOTYPE_FIELDS_.length",
		"HAS_W3C_EVENT_SUPPORT",
		"SET_KEY_CODE_TO_PREVENT_DEFAULT",
		"HAS_NAVIGATOR_ONLINE_PROPERTY",
		"HAS_HTML5_NETWORK_EVENT_SUPPORT",
		"HTML5_NETWORK_EVENTS_FIRE_ON_BODY",
		"goog.array.ARRAY_PROTOTYPE_",
		"goog.array.indexOf",
		"goog.array.ARRAY_PROTOTYPE_.indexOf",
		"opt_fromIndex",
		"goog.array.ARRAY_PROTOTYPE_.indexOf.call",
		"fromIndex",
		"goog.array.forEach",
		"goog.array.ARRAY_PROTOTYPE_.forEach",
		"forEach",
		"f",
		"opt_obj",
		"goog.array.ARRAY_PROTOTYPE_.forEach.call",
		"l",
		"arr2",
		"goog.array.find",
		"goog.net.XhrIo.isContentTypeHeader_",
		"charAt",
		"goog.events.Event",
		"opt_target",
		"currentTarget",
		"propagationStopped_",
		"defaultPrevented",
		"returnValue_",
		"preventDefault",
		"goog.events.Event.prototype.preventDefault",
		"goog.reflect.sinkValue",
		"x",
		"goog.events.BrowserEvent",
		"opt_e",
		"opt_currentTarget",
		"goog$events$BrowserEvent.prototype",
		"goog.events.BrowserEvent.prototype",
		"relatedTarget",
		"offsetX",
		"offsetY",
		"clientX",
		"clientY",
		"screenX",
		"screenY",
		"button",
		"keyCode",
		"charCode",
		"ctrlKey",
		"altKey",
		"shiftKey",
		"metaKey",
		"event_",
		"goog.events.BrowserEvent.prototype.init",
		"e",
		"goog.events.Event.call",
		"srcElement",
		"MOUSEOVER",
		"fromElement",
		"MOUSEOUT",
		"toElement",
		"layerX",
		"layerY",
		"pageX",
		"pageY",
		"state",
		"goog.events.BrowserEvent.prototype.preventDefault",
		"goog.events.BrowserEvent.superClass_.preventDefault.call",
		"be",
		"returnValue",
		"goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT",
		"VK_F1",
		"VK_F12",
		"ex",
		"goog.events.listeners_",
		"goog.events.listenerTree_",
		"goog.events.sources_",
		"goog.events.onStringMap_",
		"goog.events.listen",
		"opt_capt",
		"map",
		"count_",
		"srcUid",
		"listenerArray",
		"remaining_",
		"listenerObj",
		"goog.events.getProxy",
		"addEventListener",
		"attachEvent",
		"goog.events.onString_",
		"listenableKey",
		"proxyCallbackFunction",
		"goog.events.handleBrowserEvent_",
		"goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT",
		"v",
		"goog.events.unlisten",
		"objUid",
		"goog.events.unlistenByKey",
		"removeEventListener",
		"detachEvent",
		"sourcesArray",
		"goog.array.ARRAY_PROTOTYPE_.splice.call",
		"needsCleanup_",
		"goog.events.cleanUp_",
		"locked_",
		"oldIndex",
		"newIndex",
		"goog.events.fireListeners_",
		"retval",
		"remaining",
		"goog.events.fireListener",
		"Boolean",
		"opt_evt",
		"targetsMap",
		"ieEvent",
		"hasCapture",
		"hasBubble",
		"useReturnValue",
		"evt",
		"ancestors",
		"parent",
		"parentNode",
		"goog.events.EventTarget",
		"goog.Disposable.call",
		"goog$events$EventTarget.prototype",
		"goog.events.EventTarget.prototype",
		"parentEventTarget_",
		"getParentEventTarget",
		"goog.events.EventTarget.prototype.getParentEventTarget",
		"goog.events.EventTarget.prototype.addEventListener",
		"opt_capture",
		"opt_handlerScope",
		"goog.events.EventTarget.prototype.removeEventListener",
		"dispatchEvent",
		"goog.events.EventTarget.prototype.dispatchEvent",
		"oldEvent",
		"rv",
		"current",
		"goog.structs.getValues",
		"col",
		"getValues",
		"goog.structs.forEach",
		"keys",
		"getKeys",
		"values",
		"goog.structs.Map",
		"opt_map",
		"map_",
		"keys_",
		"argLength",
		"set",
		"addAll",
		"goog$structs$Map.prototype",
		"goog.structs.Map.prototype",
		"goog.structs.Map.prototype.getValues",
		"cleanupKeysArray_",
		"goog.structs.Map.prototype.getKeys",
		"concat",
		"goog.structs.Map.prototype.cleanupKeysArray_",
		"srcIndex",
		"destIndex",
		"seen",
		"get",
		"goog.structs.Map.prototype.get",
		"opt_val",
		"goog.structs.Map.prototype.set",
		"clone",
		"goog.structs.Map.prototype.clone",
		"goog.json.parse",
		"o",
		"remainderRe",
		"backslashesRe",
		"simpleValuesRe",
		"openBracketsRe",
		"eval",
		"goog.net.XmlHttpFactory",
		"cachedOptions_",
		"getOptions",
		"goog.net.XmlHttpFactory.prototype.getOptions",
		"options",
		"getProgId_",
		"progId",
		"USE_NULL_FUNCTION",
		"LOCAL_REQUEST_ERROR",
		"goog.net.DefaultXmlHttpFactory",
		"goog.net.DefaultXmlHttpFactory.prototype.createInstance",
		"ActiveXObject",
		"XMLHttpRequest",
		"goog.net.DefaultXmlHttpFactory.prototype.getProgId_",
		"ieProgId_",
		"ACTIVE_X_IDENTS",
		"candidate",
		"goog.net.XmlHttp.factory_",
		"factory",
		"goog.debug.getStacktrace",
		"opt_fn",
		"goog.debug.getStacktraceHelper_",
		"callee",
		"caller",
		"visited",
		"sb",
		"goog.debug.MAX_STACK_DEPTH",
		"goog.debug.getFunctionName",
		"args",
		"argDesc",
		"arg",
		"substr",
		"goog.debug.fnNameCache_",
		"functionSource",
		"matches",
		"method",
		"goog.debug.LogRecord",
		"level",
		"msg",
		"loggerName",
		"opt_time",
		"opt_sequenceNumber",
		"reset",
		"exception_",
		"exceptionText_",
		"goog.debug.LogRecord.nextSequenceNumber_",
		"goog.debug.LogRecord.prototype.reset",
		"level_",
		"msg_",
		"setLevel",
		"goog.debug.LogRecord.prototype.setLevel",
		"goog.debug.Logger",
		"name_",
		"parent_",
		"children_",
		"handlers_",
		"goog.debug.Logger.Level",
		"goog.debug.Logger.Level.prototype.toString",
		"goog.debug.Logger.Level.SEVERE",
		"goog.debug.Logger.Level.WARNING",
		"goog.debug.Logger.Level.CONFIG",
		"goog.debug.Logger.Level.FINE",
		"getParent",
		"goog.debug.Logger.prototype.getParent",
		"goog.debug.Logger.prototype.setLevel",
		"goog.debug.Logger.prototype.getEffectiveLevel",
		"getEffectiveLevel",
		"log",
		"goog.debug.Logger.prototype.log",
		"opt_exception",
		"isLoggable",
		"getLogRecord",
		"logRecord",
		"doLogRecord_",
		"goog.debug.Logger.prototype.getLogRecord",
		"href",
		"lineNumber",
		"fileName",
		"threwError",
		"line",
		"filename",
		"sourceURL",
		"stack",
		"message",
		"e2",
		"text",
		"goog.debug.Logger.prototype.fine",
		"goog.debug.LogManager.loggers_",
		"goog.debug.LogManager.rootLogger_",
		"goog.debug.LogManager.getLogger",
		"goog.debug.LogManager.rootLogger_.setLevel",
		"ret",
		"logger",
		"lastDotIndex",
		"lastIndexOf",
		"leafName",
		"parentLogger",
		"parentName",
		"goog.net.XhrIo",
		"opt_xmlHttpFactory",
		"headers",
		"xmlHttpFactory_",
		"logger_",
		"goog.net.XhrIo.HTTP_SCHEME_PATTERN",
		"goog$net$XhrIo.prototype",
		"goog.net.XhrIo.prototype",
		"active_",
		"xhr_",
		"xhrOptions_",
		"lastUri_",
		"lastMethod_",
		"lastError_",
		"errorDispatched_",
		"inSend_",
		"inOpen_",
		"inAbort_",
		"timeoutInterval_",
		"timeoutId_",
		"responseType_",
		"DEFAULT",
		"withCredentials_",
		"send",
		"goog.net.XhrIo.prototype.send",
		"url",
		"opt_method",
		"opt_content",
		"opt_headers",
		"toUpperCase",
		"createXhr",
		"createInstance",
		"goog.net.XmlHttp.factory_.createInstance",
		"goog.net.XmlHttp.factory_.getOptions",
		"onreadystatechange",
		"onReadyStateChange_",
		"fine",
		"formatMsg_",
		"open",
		"err",
		"error_",
		"content",
		"contentTypeKey",
		"contentIsFormData",
		"goog.net.XhrIo.CONTENT_TYPE_HEADER",
		"goog.net.XhrIo.FORM_CONTENT_TYPE",
		"setRequestHeader",
		"responseType",
		"withCredentials",
		"goog.global.clearTimeout",
		"clearTimeout",
		"goog.global.setTimeout",
		"setTimeout",
		"timeout_",
		"header",
		"toLowerCase",
		"goog.net.XhrIo.prototype.timeout_",
		"TIMEOUT",
		"abort",
		"goog.net.XhrIo.prototype.error_",
		"dispatchErrors_",
		"cleanUpXhr_",
		"goog.net.XhrIo.prototype.dispatchErrors_",
		"COMPLETE",
		"ERROR",
		"goog.net.XhrIo.prototype.abort",
		"ABORT",
		"goog.net.XhrIo.prototype.onReadyStateChange_",
		"onReadyStateChangeHelper_",
		"onReadyStateChangeEntryPoint_",
		"goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_",
		"goog.net.XhrIo.prototype.onReadyStateChangeHelper_",
		"getReadyState",
		"getStatus",
		"READY_STATE_CHANGE",
		"isComplete",
		"isSuccess",
		"SUCCESS",
		"LOADED",
		"getStatusText",
		"statusText",
		"goog.net.XhrIo.prototype.cleanUpXhr_",
		"xhr",
		"clearedOnReadyStateChange",
		"READY",
		"goog.net.XhrIo.prototype.isSuccess",
		"status",
		"OK",
		"CREATED",
		"ACCEPTED",
		"NO_CONTENT",
		"PARTIAL_CONTENT",
		"NOT_MODIFIED",
		"QUIRK_IE_NO_CONTENT",
		"scheme",
		"uri",
		"match",
		"SCHEME",
		"self",
		"location",
		"protocol",
		"goog.net.XhrIo.HTTP_SCHEME_PATTERN.test",
		"goog.net.XhrIo.prototype.getReadyState",
		"readyState",
		"UNINITIALIZED",
		"goog.net.XhrIo.prototype.getStatus",
		"goog.net.XhrIo.prototype.formatMsg_",
		"H.places.util.Ajax.Post",
		"data",
		"onSuccess",
		"onError",
		"request",
		"responseText",
		"JSON",
		"stringify",
		"H.places.util.Object.forEachProperty",
		"result",
		"result.map",
		"H.places.util.Object.forEachPropertyApply",
		"lookupProperty",
		"result.list",
		"list",
		"item",
		"index",
		"property",
		"H.places.util.Object.merge",
		"obj1",
		"obj2",
		"obj3",
		"H.places.model.LinkFactory",
		"service",
		"link",
		"H.places.model.PostLink",
		"H.places.model.GetLink",
		"follow",
		"H.places.model.GetLink.prototype.follow",
		"onResult",
		"queryParams",
		"that",
		"goog.exportProperty",
		"post",
		"H.places.model.PostLink.prototype.post",
		"body",
		"H.places.model.ResultSet",
		"resultSet",
		"service_",
		"fetchNext",
		"H.places.model.ResultSet.prototype.fetchNext",
		"fetchPrevious",
		"H.places.model.ResultSet.prototype.fetchPrevious",
		"H.places.PlacesEndpoint",
		"endpointName",
		"H.places.PlacesEndpoint.prototype.request",
		"params",
		"renderSuccess",
		"processResponseFn",
		"H.places.PlacesEndpoint.prototype.processResponseFn",
		"funcs",
		"H.places.PlacesEndpoint.prototype.renderSuccess",
		"toResultSet",
		"toLink",
		"H.places.PlacesEndpoint.prototype.toResultSet",
		"H.places.PlacesEndpoint.prototype.toLink",
		"H.places.Explore",
		"H.places.PlacesEndpoint.call",
		"H.places.Search",
		"H.places.Here",
		"H.places.Around",
		"H.places.Categories",
		"H.places.Categories.prototype.renderSuccess",
		"H.places.Suggest",
		"H.places.Suggest.prototype.renderSuccess",
		"H.places.Lookup",
		"H.places.Lookup.prototype.request",
		"H.places.Lookup.prototype.renderSuccess",
		"H",
		"H.places.buildInfo",
		"util",
		"BuildInfo"
	],
	"sourcesContent": [
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is\n * already defined in the current scope before assigning to prevent\n * clobbering if base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {}; // Identifies this file as the Closure base.\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.DEBUG = true;\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.LOCALE = 'en';  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.TRUSTED_SITE = true;\n\n\n/**\n * Creates object stubs for a namespace.  The presence of one or more\n * goog.provide() calls indicate that the file defines the given\n * objects/namespaces.  Build tools also scan for provide/require statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n * @see goog.require\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice. This is intended\n    // to teach new developers that 'goog.provide' is effectively a variable\n    // declaration. And when JSCompiler transforms goog.provide into a real\n    // variable declaration, the compiled JS should work the same as the raw\n    // JS--even when the raw JS uses goog.provide incorrectly.\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name);\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact\n * namespace for the test (e.g. 'goog.stringTest'). The linter will then\n * ignore the extra provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (COMPILED && !goog.DEBUG) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                opt_message ? ': ' + opt_message : '.');\n  }\n};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return !goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares\n   * that 'goog' and 'goog.events' must be namespaces.\n   *\n   * @type {Object}\n   * @private\n   */\n  goog.implicitNamespaces_ = {};\n}\n\n\n/**\n * Builds an object structure for the provided namespace path,\n * ensuring that names that already exist are not overwritten. For\n * example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Returns an object based on its fully qualified external name.  If you are\n * using a compilation pass that renames property names beware that using this\n * function will not find renamed properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {Array} provides An array of strings with the names of the objects\n *                         this file provides.\n * @param {Array} requires An array of strings with the names of the objects\n *                         this file requires.\n */\ngoog.addDependency = function(relPath, provides, requires) {\n  if (!COMPILED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      if (!(path in deps.pathToNames)) {\n        deps.pathToNames[path] = {};\n      }\n      deps.pathToNames[path][provide] = true;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an orignal\n// way to do \"debug-mode\" development.  The dependency system can sometimes\n// be confusing, as can the debug DOM loader's asyncronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the\n// script will not load until some point after the current script.  If a\n// namespace is needed at runtime, it needs to be defined in a previous\n// script, or loaded via require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// http://code.google.com/closure/library/docs/depswriter.html\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.ENABLE_DEBUG_LOADER = true;\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies\n * that works in parallel with the BUILD system. Note that all calls\n * to goog.require will be stripped by the JSCompiler when the\n * --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide())\n *     in the form \"goog.package.part\".\n */\ngoog.require = function(name) {\n\n  // if the object already exists we do not need do do anything\n  // TODO(arv): If we start to support require based on file name this has\n  //            to change\n  // TODO(arv): If we allow goog.foo.* this has to change\n  // TODO(arv): If we implement dynamic load after page load we should probably\n  //            not remove this code for the compiled output\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      return;\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    if (goog.global.console) {\n      goog.global.console['error'](errorMessage);\n    }\n\n\n      throw Error(errorMessage);\n\n  }\n};\n\n\n/**\n * Path for included scripts\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default,\n * the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n/**\n * The identity function. Returns its first argument.\n *\n * @param {*=} opt_returnValue The single value that will be returned.\n * @param {...*} var_args Optional trailing arguments. These are ignored.\n * @return {?} The first argument. We can't know the type -- just pass it along\n *      without type.\n * @deprecated Use goog.functions.identity instead.\n */\ngoog.identityFunction = function(opt_returnValue, var_args) {\n  return opt_returnValue;\n};\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n *\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error\n * will be thrown when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as\n * an argument because that would make it more difficult to obfuscate\n * our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be\n *   overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always return the same instance\n * object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array.<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\nif (!COMPILED && goog.ENABLE_DEBUG_LOADER) {\n  /**\n   * Object used to keep track of urls that have already been added. This\n   * record allows the prevention of circular dependencies.\n   * @type {Object}\n   * @private\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts\n   * @private\n   * @type {Object}\n   */\n  goog.dependencies_ = {\n    pathToNames: {}, // 1 to many\n    nameToPath: {}, // 1 to 1\n    requires: {}, // 1 to many\n    // used when resolving dependencies to prevent us from\n    // visiting the file twice\n    visited: {},\n    written: {} // used to keep track of script files we have written\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of the base.js script that bootstraps Closure\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('script');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var src = scripts[i].src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @private\n   */\n  goog.importScript_ = function(src) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (!goog.dependencies_.written[src] && importScript(src)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script source.\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page.\n      if (doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      doc.write(\n          '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    // the scripts we need to write this time\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // we have already visited this one. We can get here if we have cyclic\n      // dependencies\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    for (var i = 0; i < scripts.length; i++) {\n      if (scripts[i]) {\n        goog.importScript_(goog.basePath + scripts[i]);\n      } else {\n        throw Error('Undefined script input');\n      }\n    }\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox\n    // typeof behaves similarly for HTML{Applet,Embed,Object}Elements\n    // and RegExps.  We would like to return object for those and we can\n    // detect an invalid function by making sure that the function\n    // object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is not |undefined|.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.  Additionally, this function assumes that the global\n * undefined variable has not been redefined.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  return val !== undefined;\n};\n\n\n/**\n * Returns true if the specified value is |null|\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like\n * the value needs to be an object and have a getFullYear() function.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays\n * and functions.\n * @param {*} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further\n * calls with the same object as a parameter returns the same value. The unique\n * ID is guaranteed to be unique across the current session amongst objects that\n * are passed into {@code getUid}. There is no guarantee that the ID is unique\n * or consistent across sessions. It is unsafe to generate unique ID for\n * function prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // DOM nodes in IE are not instance of Object and throws exception\n  // for delete. Instead we try to use removeAttribute\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure javascript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which |this| should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially\n *     applied to the function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind\n *     is deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which |this| should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially\n *     applied to the function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of |this| 'pre-specified'.<br><br>\n *\n * Remaining arguments specified at call-time are appended to the pre-\n * specified ones.<br><br>\n *\n * Also see: {@link #partial}.<br><br>\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which |this| should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially\n *     applied to the function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default\n      // Chrome extension environment. This means that for Chrome extensions,\n      // they get the implementation of Function.prototype.bind that\n      // calls goog.bind instead of the native one. Even worse, we don't want\n      // to introduce a circular dependency between goog.bind and\n      // Function.prototype.bind, so we have to hack this to make sure it\n      // works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially\n *     applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Prepend the bound arguments to the current arguments.\n    var newArgs = Array.prototype.slice.call(arguments);\n    newArgs.unshift.apply(newArgs, args);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals javascript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('script');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @type {Object|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a\n * hyphen and passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which\n * these mappings are used. In the BY_PART style, each part (i.e. in\n * between hyphens) of the passed in css name is rewritten according\n * to the map. In the BY_WHOLE style, the full css name is looked up in\n * the map directly. If a rewrite is not specified by the map, the\n * compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls\n * to goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed\n * only the modifier will be processed, as it is assumed the first\n * argument was generated as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {Object|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object=} opt_values Map of place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  var values = opt_values || {};\n  for (var key in values) {\n    var value = ('' + values[key]).replace(/\\$/g, '$$$$');\n    str = str.replace(new RegExp('\\\\{\\\\$' + key + '\\\\}', 'gi'), value);\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primtive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated,\n * unless they are exported in turn via this function or\n * goog.exportProperty\n *\n * <p>Also handy for making public items that are defined in anonymous\n * closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction',\n *                       Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { }\n *\n * function ChildClass(a, b, c) {\n *   goog.base(this, a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // works\n * </pre>\n *\n * In addition, a superclass' implementation of a method can be invoked\n * as follows:\n *\n * <pre>\n * ChildClass.prototype.foo = function(a) {\n *   ChildClass.superClass_.foo.call(this, a);\n *   // other code\n * };\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * contructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass\n * the name of the method as the second argument to this function. If\n * you do not, you will get a runtime error. This calls the superclass'\n * method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express\n * inheritance relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the\n * compiler will do macro expansion to remove a lot of\n * the extra overhead that this function introduces. The compiler\n * will also enforce a lot of the assumptions that this function\n * makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n  if (caller.superClass_) {\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(\n        me, Array.prototype.slice.call(arguments, 1));\n  }\n\n  var args = Array.prototype.slice.call(arguments, 2);\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain,\n  // then one of two things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the\n * aliases applied.  In uncompiled code the function is simply run since the\n * aliases as written are valid JavaScript.\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *    (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n",
		"goog.provide('H.places.util.ResponseValidator');\n\n\n/**\n * Checks if response is valid\n * @param {Object} response\n * @return {boolean} valid response doesn't contain status field\n */\nH.places.util.ResponseValidator.isValid = function(response) {\n  return !(goog.isDefAndNotNull(response['status']) && response['status'] !== 200);\n};\n\n",
		"goog.provide('H.places.util.Url');\n\n\n/**\n * Creates query string from the key, value map.\n * @param {string} baseUrl\n * @param {Object} paramsMap\n * @return {string} composed url built from the baseUrl and paramsMap\n */\nH.places.util.Url.BuildUrl = function(baseUrl, paramsMap) {\n  if (!goog.isDefAndNotNull(baseUrl)) {\n    throw new Error({message: 'baseUrl can not be empty'});\n  }\n  function toQueryString_(paramsMap) {\n    var q = '';\n    if (goog.isDefAndNotNull(paramsMap)) {\n      var str = [];\n      for (var p in paramsMap)\n        if (paramsMap.hasOwnProperty(p)) {\n          str.push(encodeURIComponent(p) + '=' + encodeURIComponent(paramsMap[p]));\n        }\n        q = str.join('&');\n    }\n    return q;\n  }\n  var queryString = toQueryString_(paramsMap);\n  if (queryString.length > 0) {\n    if (baseUrl.indexOf('?') < 0) {\n      baseUrl = baseUrl + '?';\n    } else {\n      baseUrl = baseUrl + '&';\n    }\n  }\n  return baseUrl + queryString;\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for string manipulation.\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string');\ngoog.provide('goog.string.Unicode');\n\n\n/**\n * Common Unicode string characters.\n * @enum {string}\n */\ngoog.string.Unicode = {\n  NBSP: '\\xa0'\n};\n\n\n/**\n * Fast prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix A string to look for at the start of {@code str}.\n * @return {boolean} True if {@code str} begins with {@code prefix}.\n */\ngoog.string.startsWith = function(str, prefix) {\n  return str.lastIndexOf(prefix, 0) == 0;\n};\n\n\n/**\n * Fast suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of {@code str}.\n * @return {boolean} True if {@code str} ends with {@code suffix}.\n */\ngoog.string.endsWith = function(str, suffix) {\n  var l = str.length - suffix.length;\n  return l >= 0 && str.indexOf(suffix, l) == l;\n};\n\n\n/**\n * Case-insensitive prefix-checker.\n * @param {string} str The string to check.\n * @param {string} prefix  A string to look for at the end of {@code str}.\n * @return {boolean} True if {@code str} begins with {@code prefix} (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveStartsWith = function(str, prefix) {\n  return goog.string.caseInsensitiveCompare(\n      prefix, str.substr(0, prefix.length)) == 0;\n};\n\n\n/**\n * Case-insensitive suffix-checker.\n * @param {string} str The string to check.\n * @param {string} suffix A string to look for at the end of {@code str}.\n * @return {boolean} True if {@code str} ends with {@code suffix} (ignoring\n *     case).\n */\ngoog.string.caseInsensitiveEndsWith = function(str, suffix) {\n  return goog.string.caseInsensitiveCompare(\n      suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;\n};\n\n\n/**\n * Case-insensitive equality checker.\n * @param {string} str1 First string to check.\n * @param {string} str2 Second string to check.\n * @return {boolean} True if {@code str1} and {@code str2} are the same string,\n *     ignoring case.\n */\ngoog.string.caseInsensitiveEquals = function(str1, str2) {\n  return str1.toLowerCase() == str2.toLowerCase();\n};\n\n\n/**\n * Does simple python-style string substitution.\n * subs(\"foo%s hot%s\", \"bar\", \"dog\") becomes \"foobar hotdog\".\n * @param {string} str The string containing the pattern.\n * @param {...*} var_args The items to substitute into the pattern.\n * @return {string} A copy of {@code str} in which each occurrence of\n *     {@code %s} has been replaced an argument from {@code var_args}.\n */\ngoog.string.subs = function(str, var_args) {\n  // This appears to be slow, but testing shows it compares more or less\n  // equivalent to the regex.exec method.\n  for (var i = 1; i < arguments.length; i++) {\n    // We cast to String in case an argument is a Function.  Replacing $&, for\n    // example, with $$$& stops the replace from subsituting the whole match\n    // into the resultant string.  $$$& in the first replace becomes $$& in the\n    //  second, which leaves $& in the resultant string.  Also:\n    // $$, $`, $', $n $nn\n    var replacement = String(arguments[i]).replace(/\\$/g, '$$$$');\n    str = str.replace(/\\%s/, replacement);\n  }\n  return str;\n};\n\n\n/**\n * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\n * and tabs) to a single space, and strips leading and trailing whitespace.\n * @param {string} str Input string.\n * @return {string} A copy of {@code str} with collapsed whitespace.\n */\ngoog.string.collapseWhitespace = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n};\n\n\n/**\n * Checks if a string is empty or contains only whitespaces.\n * @param {string} str The string to check.\n * @return {boolean} True if {@code str} is empty or whitespace only.\n */\ngoog.string.isEmpty = function(str) {\n  // testing length == 0 first is actually slower in all browsers (about the\n  // same in Opera).\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return /^[\\s\\xa0]*$/.test(str);\n};\n\n\n/**\n * Checks if a string is null, undefined, empty or contains only whitespaces.\n * @param {*} str The string to check.\n * @return {boolean} True if{@code str} is null, undefined, empty, or\n *     whitespace only.\n */\ngoog.string.isEmptySafe = function(str) {\n  return goog.string.isEmpty(goog.string.makeSafe(str));\n};\n\n\n/**\n * Checks if a string is all breaking whitespace.\n * @param {string} str The string to check.\n * @return {boolean} Whether the string is all breaking whitespace.\n */\ngoog.string.isBreakingWhitespace = function(str) {\n  return !/[^\\t\\n\\r ]/.test(str);\n};\n\n\n/**\n * Checks if a string contains all letters.\n * @param {string} str string to check.\n * @return {boolean} True if {@code str} consists entirely of letters.\n */\ngoog.string.isAlpha = function(str) {\n  return !/[^a-zA-Z]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers.\n * @param {*} str string to check. If not a string, it will be\n *     casted to one.\n * @return {boolean} True if {@code str} is numeric.\n */\ngoog.string.isNumeric = function(str) {\n  return !/[^0-9]/.test(str);\n};\n\n\n/**\n * Checks if a string contains only numbers or letters.\n * @param {string} str string to check.\n * @return {boolean} True if {@code str} is alphanumeric.\n */\ngoog.string.isAlphaNumeric = function(str) {\n  return !/[^a-zA-Z0-9]/.test(str);\n};\n\n\n/**\n * Checks if a character is a space character.\n * @param {string} ch Character to check.\n * @return {boolean} True if {code ch} is a space.\n */\ngoog.string.isSpace = function(ch) {\n  return ch == ' ';\n};\n\n\n/**\n * Checks if a character is a valid unicode character.\n * @param {string} ch Character to check.\n * @return {boolean} True if {code ch} is a valid unicode character.\n */\ngoog.string.isUnicodeChar = function(ch) {\n  return ch.length == 1 && ch >= ' ' && ch <= '~' ||\n         ch >= '\\u0080' && ch <= '\\uFFFD';\n};\n\n\n/**\n * Takes a string and replaces newlines with a space. Multiple lines are\n * replaced with a single space.\n * @param {string} str The string from which to strip newlines.\n * @return {string} A copy of {@code str} stripped of newlines.\n */\ngoog.string.stripNewlines = function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)+/g, ' ');\n};\n\n\n/**\n * Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.\n * @param {string} str The string to in which to canonicalize newlines.\n * @return {string} {@code str} A copy of {@code} with canonicalized newlines.\n */\ngoog.string.canonicalizeNewlines = function(str) {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, '\\n');\n};\n\n\n/**\n * Normalizes whitespace in a string, replacing all whitespace chars with\n * a space.\n * @param {string} str The string in which to normalize whitespace.\n * @return {string} A copy of {@code str} with all whitespace normalized.\n */\ngoog.string.normalizeWhitespace = function(str) {\n  return str.replace(/\\xa0|\\s/g, ' ');\n};\n\n\n/**\n * Normalizes spaces in a string, replacing all consecutive spaces and tabs\n * with a single space. Replaces non-breaking space with a space.\n * @param {string} str The string in which to normalize spaces.\n * @return {string} A copy of {@code str} with all consecutive spaces and tabs\n *    replaced with a single space.\n */\ngoog.string.normalizeSpaces = function(str) {\n  return str.replace(/\\xa0|[ \\t]+/g, ' ');\n};\n\n\n/**\n * Removes the breaking spaces from the left and right of the string and\n * collapses the sequences of breaking spaces in the middle into single spaces.\n * The original and the result strings render the same way in HTML.\n * @param {string} str A string in which to collapse spaces.\n * @return {string} Copy of the string with normalized breaking spaces.\n */\ngoog.string.collapseBreakingSpaces = function(str) {\n  return str.replace(/[\\t\\r\\n ]+/g, ' ').replace(\n      /^[\\t\\r\\n ]+|[\\t\\r\\n ]+$/g, '');\n};\n\n\n/**\n * Trims white spaces to the left and right of a string.\n * @param {string} str The string to trim.\n * @return {string} A trimmed copy of {@code str}.\n */\ngoog.string.trim = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\n};\n\n\n/**\n * Trims whitespaces at the left end of a string.\n * @param {string} str The string to left trim.\n * @return {string} A trimmed copy of {@code str}.\n */\ngoog.string.trimLeft = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/^[\\s\\xa0]+/, '');\n};\n\n\n/**\n * Trims whitespaces at the right end of a string.\n * @param {string} str The string to right trim.\n * @return {string} A trimmed copy of {@code str}.\n */\ngoog.string.trimRight = function(str) {\n  // Since IE doesn't include non-breaking-space (0xa0) in their \\s character\n  // class (as required by section 7.2 of the ECMAScript spec), we explicitly\n  // include it in the regexp to enforce consistent cross-browser behavior.\n  return str.replace(/[\\s\\xa0]+$/, '');\n};\n\n\n/**\n * A string comparator that ignores case.\n * -1 = str1 less than str2\n *  0 = str1 equals str2\n *  1 = str1 greater than str2\n *\n * @param {string} str1 The string to compare.\n * @param {string} str2 The string to compare {@code str1} to.\n * @return {number} The comparator result, as described above.\n */\ngoog.string.caseInsensitiveCompare = function(str1, str2) {\n  var test1 = String(str1).toLowerCase();\n  var test2 = String(str2).toLowerCase();\n\n  if (test1 < test2) {\n    return -1;\n  } else if (test1 == test2) {\n    return 0;\n  } else {\n    return 1;\n  }\n};\n\n\n/**\n * Regular expression used for splitting a string into substrings of fractional\n * numbers, integers, and non-numeric characters.\n * @type {RegExp}\n * @private\n */\ngoog.string.numerateCompareRegExp_ = /(\\.\\d+)|(\\d+)|(\\D+)/g;\n\n\n/**\n * String comparison function that handles numbers in a way humans might expect.\n * Using this function, the string \"File 2.jpg\" sorts before \"File 10.jpg\". The\n * comparison is mostly case-insensitive, though strings that are identical\n * except for case are sorted with the upper-case strings before lower-case.\n *\n * This comparison function is significantly slower (about 500x) than either\n * the default or the case-insensitive compare. It should not be used in\n * time-critical code, but should be fast enough to sort several hundred short\n * strings (like filenames) with a reasonable delay.\n *\n * @param {string} str1 The string to compare in a numerically sensitive way.\n * @param {string} str2 The string to compare {@code str1} to.\n * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than\n *     0 if str1 > str2.\n */\ngoog.string.numerateCompare = function(str1, str2) {\n  if (str1 == str2) {\n    return 0;\n  }\n  if (!str1) {\n    return -1;\n  }\n  if (!str2) {\n    return 1;\n  }\n\n  // Using match to split the entire string ahead of time turns out to be faster\n  // for most inputs than using RegExp.exec or iterating over each character.\n  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);\n  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);\n\n  var count = Math.min(tokens1.length, tokens2.length);\n\n  for (var i = 0; i < count; i++) {\n    var a = tokens1[i];\n    var b = tokens2[i];\n\n    // Compare pairs of tokens, returning if one token sorts before the other.\n    if (a != b) {\n\n      // Only if both tokens are integers is a special comparison required.\n      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').\n      var num1 = parseInt(a, 10);\n      if (!isNaN(num1)) {\n        var num2 = parseInt(b, 10);\n        if (!isNaN(num2) && num1 - num2) {\n          return num1 - num2;\n        }\n      }\n      return a < b ? -1 : 1;\n    }\n  }\n\n  // If one string is a substring of the other, the shorter string sorts first.\n  if (tokens1.length != tokens2.length) {\n    return tokens1.length - tokens2.length;\n  }\n\n  // The two strings must be equivalent except for case (perfect equality is\n  // tested at the head of the function.) Revert to default ASCII-betical string\n  // comparison to stablize the sort.\n  return str1 < str2 ? -1 : 1;\n};\n\n\n/**\n * URL-encodes a string\n * @param {*} str The string to url-encode.\n * @return {string} An encoded copy of {@code str} that is safe for urls.\n *     Note that '#', ':', and other characters used to delimit portions\n *     of URLs *will* be encoded.\n */\ngoog.string.urlEncode = function(str) {\n  return encodeURIComponent(String(str));\n};\n\n\n/**\n * URL-decodes the string. We need to specially handle '+'s because\n * the javascript library doesn't convert them to spaces.\n * @param {string} str The string to url decode.\n * @return {string} The decoded {@code str}.\n */\ngoog.string.urlDecode = function(str) {\n  return decodeURIComponent(str.replace(/\\+/g, ' '));\n};\n\n\n/**\n * Converts \\n to <br>s or <br />s.\n * @param {string} str The string in which to convert newlines.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} A copy of {@code str} with converted newlines.\n */\ngoog.string.newLineToBr = function(str, opt_xml) {\n  return str.replace(/(\\r\\n|\\r|\\n)/g, opt_xml ? '<br />' : '<br>');\n};\n\n\n/**\n * Escape double quote '\"' characters in addition to '&', '<', and '>' so that a\n * string can be included in an HTML tag attribute value within double quotes.\n *\n * It should be noted that > doesn't need to be escaped for the HTML or XML to\n * be valid, but it has been decided to escape it for consistency with other\n * implementations.\n *\n * NOTE(user):\n * HtmlEscape is often called during the generation of large blocks of HTML.\n * Using statics for the regular expressions and strings is an optimization\n * that can more than half the amount of time IE spends in this function for\n * large apps, since strings and regexes both contribute to GC allocations.\n *\n * Testing for the presence of a character before escaping increases the number\n * of function calls, but actually provides a speed increase for the average\n * case -- since the average case often doesn't require the escaping of all 4\n * characters and indexOf() is much cheaper than replace().\n * The worst case does suffer slightly from the additional calls, therefore the\n * opt_isLikelyToContainHtmlChars option has been included for situations\n * where all 4 HTML entities are very likely to be present and need escaping.\n *\n * Some benchmarks (times tended to fluctuate +-0.05ms):\n *                                     FireFox                     IE6\n * (no chars / average (mix of cases) / all 4 chars)\n * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\n * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\n * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85\n *\n * An additional advantage of checking if replace actually needs to be called\n * is a reduction in the number of object allocations, so as the size of the\n * application grows the difference between the various methods would increase.\n *\n * @param {string} str string to be escaped.\n * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see\n *     if the character needs replacing - use this option if you expect each of\n *     the characters to appear often. Leave false if you expect few html\n *     characters to occur in your strings, such as if you are escaping HTML.\n * @return {string} An escaped copy of {@code str}.\n */\ngoog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {\n\n  if (opt_isLikelyToContainHtmlChars) {\n    return str.replace(goog.string.amperRe_, '&amp;')\n          .replace(goog.string.ltRe_, '&lt;')\n          .replace(goog.string.gtRe_, '&gt;')\n          .replace(goog.string.quotRe_, '&quot;');\n\n  } else {\n    // quick test helps in the case when there are no chars to replace, in\n    // worst case this makes barely a difference to the time taken\n    if (!goog.string.allRe_.test(str)) return str;\n\n    // str.indexOf is faster than regex.test in this case\n    if (str.indexOf('&') != -1) {\n      str = str.replace(goog.string.amperRe_, '&amp;');\n    }\n    if (str.indexOf('<') != -1) {\n      str = str.replace(goog.string.ltRe_, '&lt;');\n    }\n    if (str.indexOf('>') != -1) {\n      str = str.replace(goog.string.gtRe_, '&gt;');\n    }\n    if (str.indexOf('\"') != -1) {\n      str = str.replace(goog.string.quotRe_, '&quot;');\n    }\n    return str;\n  }\n};\n\n\n/**\n * Regular expression that matches an ampersand, for use in escaping.\n * @type {RegExp}\n * @private\n */\ngoog.string.amperRe_ = /&/g;\n\n\n/**\n * Regular expression that matches a less than sign, for use in escaping.\n * @type {RegExp}\n * @private\n */\ngoog.string.ltRe_ = /</g;\n\n\n/**\n * Regular expression that matches a greater than sign, for use in escaping.\n * @type {RegExp}\n * @private\n */\ngoog.string.gtRe_ = />/g;\n\n\n/**\n * Regular expression that matches a double quote, for use in escaping.\n * @type {RegExp}\n * @private\n */\ngoog.string.quotRe_ = /\\\"/g;\n\n\n/**\n * Regular expression that matches any character that needs to be escaped.\n * @type {RegExp}\n * @private\n */\ngoog.string.allRe_ = /[&<>\\\"]/;\n\n\n/**\n * Unescapes an HTML string.\n *\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of {@code str}.\n */\ngoog.string.unescapeEntities = function(str) {\n  if (goog.string.contains(str, '&')) {\n    // We are careful not to use a DOM if we do not have one. We use the []\n    // notation so that the JSCompiler will not complain about these objects and\n    // fields in the case where we have no DOM.\n    if ('document' in goog.global) {\n      return goog.string.unescapeEntitiesUsingDom_(str);\n    } else {\n      // Fall back on pure XML entities\n      return goog.string.unescapePureXmlEntities_(str);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric\n * entities. This function is XSS-safe and whitespace-preserving.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} The unescaped {@code str} string.\n */\ngoog.string.unescapeEntitiesUsingDom_ = function(str) {\n  var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"'};\n  var div = document.createElement('div');\n  // Match as many valid entity characters as possible. If the actual entity\n  // happens to be shorter, it will still work as innerHTML will return the\n  // trailing characters unchanged. Since the entity characters do not include\n  // open angle bracket, there is no chance of XSS from the innerHTML use.\n  // Since no whitespace is passed to innerHTML, whitespace is preserved.\n  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {\n    // Check for cached entity.\n    var value = seen[s];\n    if (value) {\n      return value;\n    }\n    // Check for numeric entity.\n    if (entity.charAt(0) == '#') {\n      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.\n      var n = Number('0' + entity.substr(1));\n      if (!isNaN(n)) {\n        value = String.fromCharCode(n);\n      }\n    }\n    // Fall back to innerHTML otherwise.\n    if (!value) {\n      // Append a non-entity character to avoid a bug in Webkit that parses\n      // an invalid entity at the end of innerHTML text as the empty string.\n      div.innerHTML = s + ' ';\n      // Then remove the trailing character from the result.\n      value = div.firstChild.nodeValue.slice(0, -1);\n    }\n    // Cache and return.\n    return seen[s] = value;\n  });\n};\n\n\n/**\n * Unescapes XML entities.\n * @private\n * @param {string} str The string to unescape.\n * @return {string} An unescaped copy of {@code str}.\n */\ngoog.string.unescapePureXmlEntities_ = function(str) {\n  return str.replace(/&([^;]+);/g, function(s, entity) {\n    switch (entity) {\n      case 'amp':\n        return '&';\n      case 'lt':\n        return '<';\n      case 'gt':\n        return '>';\n      case 'quot':\n        return '\"';\n      default:\n        if (entity.charAt(0) == '#') {\n          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.\n          var n = Number('0' + entity.substr(1));\n          if (!isNaN(n)) {\n            return String.fromCharCode(n);\n          }\n        }\n        // For invalid entities we just return the entity\n        return s;\n    }\n  });\n};\n\n\n/**\n * Regular expression that matches an HTML entity.\n * See also HTML5: Tokenization / Tokenizing character references.\n * @private\n * @type {!RegExp}\n */\ngoog.string.HTML_ENTITY_PATTERN_ = /&([^;\\s<&]+);?/g;\n\n\n/**\n * Do escaping of whitespace to preserve spatial formatting. We use character\n * entity #160 to make it safer for xml.\n * @param {string} str The string in which to escape whitespace.\n * @param {boolean=} opt_xml Whether to use XML compatible tags.\n * @return {string} An escaped copy of {@code str}.\n */\ngoog.string.whitespaceEscape = function(str, opt_xml) {\n  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);\n};\n\n\n/**\n * Strip quote characters around a string.  The second argument is a string of\n * characters to treat as quotes.  This can be a single character or a string of\n * multiple character and in that case each of those are treated as possible\n * quote characters. For example:\n *\n * <pre>\n * goog.string.stripQuotes('\"abc\"', '\"`') --> 'abc'\n * goog.string.stripQuotes('`abc`', '\"`') --> 'abc'\n * </pre>\n *\n * @param {string} str The string to strip.\n * @param {string} quoteChars The quote characters to strip.\n * @return {string} A copy of {@code str} without the quotes.\n */\ngoog.string.stripQuotes = function(str, quoteChars) {\n  var length = quoteChars.length;\n  for (var i = 0; i < length; i++) {\n    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);\n    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {\n      return str.substring(1, str.length - 1);\n    }\n  }\n  return str;\n};\n\n\n/**\n * Truncates a string to a certain length and adds '...' if necessary.  The\n * length also accounts for the ellipsis, so a maximum length of 10 and a string\n * 'Hello World!' produces 'Hello W...'.\n * @param {string} str The string to truncate.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cut off in the middle.\n * @return {string} The truncated {@code str} string.\n */\ngoog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (str.length > chars) {\n    str = str.substring(0, chars - 3) + '...';\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Truncate a string in the middle, adding \"...\" if necessary,\n * and favoring the beginning of the string.\n * @param {string} str The string to truncate the middle of.\n * @param {number} chars Max number of characters.\n * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped\n *     characters from being cutoff in the middle.\n * @param {number=} opt_trailingChars Optional number of trailing characters to\n *     leave at the end of the string, instead of truncating as close to the\n *     middle as possible.\n * @return {string} A truncated copy of {@code str}.\n */\ngoog.string.truncateMiddle = function(str, chars,\n    opt_protectEscapedCharacters, opt_trailingChars) {\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.unescapeEntities(str);\n  }\n\n  if (opt_trailingChars && str.length > chars) {\n    if (opt_trailingChars > chars) {\n      opt_trailingChars = chars;\n    }\n    var endPoint = str.length - opt_trailingChars;\n    var startPoint = chars - opt_trailingChars;\n    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);\n  } else if (str.length > chars) {\n    // Favor the beginning of the string:\n    var half = Math.floor(chars / 2);\n    var endPos = str.length - half;\n    half += chars % 2;\n    str = str.substring(0, half) + '...' + str.substring(endPos);\n  }\n\n  if (opt_protectEscapedCharacters) {\n    str = goog.string.htmlEscape(str);\n  }\n\n  return str;\n};\n\n\n/**\n * Special chars that need to be escaped for goog.string.quote.\n * @private\n * @type {Object}\n */\ngoog.string.specialEscapeChars_ = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  '\\x0B': '\\\\x0B', // '\\v' is not supported in JScript\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\'\n};\n\n\n/**\n * Character mappings used internally for goog.string.escapeChar.\n * @private\n * @type {Object}\n */\ngoog.string.jsEscapeCache_ = {\n  '\\'': '\\\\\\''\n};\n\n\n/**\n * Encloses a string in double quotes and escapes characters so that the\n * string is a valid JS string.\n * @param {string} s The string to quote.\n * @return {string} A copy of {@code s} surrounded by double quotes.\n */\ngoog.string.quote = function(s) {\n  s = String(s);\n  if (s.quote) {\n    return s.quote();\n  } else {\n    var sb = ['\"'];\n    for (var i = 0; i < s.length; i++) {\n      var ch = s.charAt(i);\n      var cc = ch.charCodeAt(0);\n      sb[i + 1] = goog.string.specialEscapeChars_[ch] ||\n          ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));\n    }\n    sb.push('\"');\n    return sb.join('');\n  }\n};\n\n\n/**\n * Takes a string and returns the escaped string for that character.\n * @param {string} str The string to escape.\n * @return {string} An escaped string representing {@code str}.\n */\ngoog.string.escapeString = function(str) {\n  var sb = [];\n  for (var i = 0; i < str.length; i++) {\n    sb[i] = goog.string.escapeChar(str.charAt(i));\n  }\n  return sb.join('');\n};\n\n\n/**\n * Takes a character and returns the escaped string for that character. For\n * example escapeChar(String.fromCharCode(15)) -> \"\\\\x0E\".\n * @param {string} c The character to escape.\n * @return {string} An escaped string representing {@code c}.\n */\ngoog.string.escapeChar = function(c) {\n  if (c in goog.string.jsEscapeCache_) {\n    return goog.string.jsEscapeCache_[c];\n  }\n\n  if (c in goog.string.specialEscapeChars_) {\n    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];\n  }\n\n  var rv = c;\n  var cc = c.charCodeAt(0);\n  if (cc > 31 && cc < 127) {\n    rv = c;\n  } else {\n    // tab is 9 but handled above\n    if (cc < 256) {\n      rv = '\\\\x';\n      if (cc < 16 || cc > 256) {\n        rv += '0';\n      }\n    } else {\n      rv = '\\\\u';\n      if (cc < 4096) { // \\u1000\n        rv += '0';\n      }\n    }\n    rv += cc.toString(16).toUpperCase();\n  }\n\n  return goog.string.jsEscapeCache_[c] = rv;\n};\n\n\n/**\n * Takes a string and creates a map (Object) in which the keys are the\n * characters in the string. The value for the key is set to true. You can\n * then use goog.object.map or goog.array.map to change the values.\n * @param {string} s The string to build the map from.\n * @return {Object} The map of characters used.\n */\n// TODO(arv): It seems like we should have a generic goog.array.toMap. But do\n//            we want a dependency on goog.array in goog.string?\ngoog.string.toMap = function(s) {\n  var rv = {};\n  for (var i = 0; i < s.length; i++) {\n    rv[s.charAt(i)] = true;\n  }\n  return rv;\n};\n\n\n/**\n * Checks whether a string contains a given substring.\n * @param {string} s The string to test.\n * @param {string} ss The substring to test for.\n * @return {boolean} True if {@code s} contains {@code ss}.\n */\ngoog.string.contains = function(s, ss) {\n  return s.indexOf(ss) != -1;\n};\n\n\n/**\n * Returns the non-overlapping occurrences of ss in s.\n * If either s or ss evalutes to false, then returns zero.\n * @param {string} s The string to look in.\n * @param {string} ss The string to look for.\n * @return {number} Number of occurrences of ss in s.\n */\ngoog.string.countOf = function(s, ss) {\n  return s && ss ? s.split(ss).length - 1 : 0;\n};\n\n\n/**\n * Removes a substring of a specified length at a specific\n * index in a string.\n * @param {string} s The base string from which to remove.\n * @param {number} index The index at which to remove the substring.\n * @param {number} stringLength The length of the substring to remove.\n * @return {string} A copy of {@code s} with the substring removed or the full\n *     string if nothing is removed or the input is invalid.\n */\ngoog.string.removeAt = function(s, index, stringLength) {\n  var resultStr = s;\n  // If the index is greater or equal to 0 then remove substring\n  if (index >= 0 && index < s.length && stringLength > 0) {\n    resultStr = s.substr(0, index) +\n        s.substr(index + stringLength, s.length - index - stringLength);\n  }\n  return resultStr;\n};\n\n\n/**\n *  Removes the first occurrence of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of {@code s} with {@code ss} removed or the full\n *      string if nothing is removed.\n */\ngoog.string.remove = function(s, ss) {\n  var re = new RegExp(goog.string.regExpEscape(ss), '');\n  return s.replace(re, '');\n};\n\n\n/**\n *  Removes all occurrences of a substring from a string.\n *  @param {string} s The base string from which to remove.\n *  @param {string} ss The string to remove.\n *  @return {string} A copy of {@code s} with {@code ss} removed or the full\n *      string if nothing is removed.\n */\ngoog.string.removeAll = function(s, ss) {\n  var re = new RegExp(goog.string.regExpEscape(ss), 'g');\n  return s.replace(re, '');\n};\n\n\n/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of {@code s}.\n */\ngoog.string.regExpEscape = function(s) {\n  return String(s).replace(/([-()\\[\\]{}+?*.$\\^|,:#<!\\\\])/g, '\\\\$1').\n      replace(/\\x08/g, '\\\\x08');\n};\n\n\n/**\n * Repeats a string n times.\n * @param {string} string The string to repeat.\n * @param {number} length The number of times to repeat.\n * @return {string} A string containing {@code length} repetitions of\n *     {@code string}.\n */\ngoog.string.repeat = function(string, length) {\n  return new Array(length + 1).join(string);\n};\n\n\n/**\n * Pads number to given length and optionally rounds it to a given precision.\n * For example:\n * <pre>padNumber(1.25, 2, 3) -> '01.250'\n * padNumber(1.25, 2) -> '01.25'\n * padNumber(1.25, 2, 1) -> '01.3'\n * padNumber(1.25, 0) -> '1.25'</pre>\n *\n * @param {number} num The number to pad.\n * @param {number} length The desired length.\n * @param {number=} opt_precision The desired precision.\n * @return {string} {@code num} as a string with the given options.\n */\ngoog.string.padNumber = function(num, length, opt_precision) {\n  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);\n  var index = s.indexOf('.');\n  if (index == -1) {\n    index = s.length;\n  }\n  return goog.string.repeat('0', Math.max(0, length - index)) + s;\n};\n\n\n/**\n * Returns a string representation of the given object, with\n * null and undefined being returned as the empty string.\n *\n * @param {*} obj The object to convert.\n * @return {string} A string representation of the {@code obj}.\n */\ngoog.string.makeSafe = function(obj) {\n  return obj == null ? '' : String(obj);\n};\n\n\n/**\n * Concatenates string expressions. This is useful\n * since some browsers are very inefficient when it comes to using plus to\n * concat strings. Be careful when using null and undefined here since\n * these will not be included in the result. If you need to represent these\n * be sure to cast the argument to a String first.\n * For example:\n * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'\n * buildString(null, undefined) -> ''\n * </pre>\n * @param {...*} var_args A list of strings to concatenate. If not a string,\n *     it will be casted to one.\n * @return {string} The concatenation of {@code var_args}.\n */\ngoog.string.buildString = function(var_args) {\n  return Array.prototype.join.call(arguments, '');\n};\n\n\n/**\n * Returns a string with at least 64-bits of randomness.\n *\n * Doesn't trust Javascript's random function entirely. Uses a combination of\n * random and current timestamp, and then encodes the string in base-36 to\n * make it shorter.\n *\n * @return {string} A random string, e.g. sn1s7vb4gcic.\n */\ngoog.string.getRandomString = function() {\n  var x = 2147483648;\n  return Math.floor(Math.random() * x).toString(36) +\n         Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);\n};\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string|number} version1 Version of first item.\n * @param {string|number} version2 Version of second item.\n *\n * @return {number}  1 if {@code version1} is higher.\n *                   0 if arguments are equal.\n *                  -1 if {@code version2} is higher.\n */\ngoog.string.compareVersions = function(version1, version2) {\n  var order = 0;\n  // Trim leading and trailing whitespace and split the versions into\n  // subversions.\n  var v1Subs = goog.string.trim(String(version1)).split('.');\n  var v2Subs = goog.string.trim(String(version2)).split('.');\n  var subCount = Math.max(v1Subs.length, v2Subs.length);\n\n  // Iterate over the subversions, as long as they appear to be equivalent.\n  for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {\n    var v1Sub = v1Subs[subIdx] || '';\n    var v2Sub = v2Subs[subIdx] || '';\n\n    // Split the subversions into pairs of numbers and qualifiers (like 'b').\n    // Two different RegExp objects are needed because they are both using\n    // the 'g' flag.\n    var v1CompParser = new RegExp('(\\\\d*)(\\\\D*)', 'g');\n    var v2CompParser = new RegExp('(\\\\d*)(\\\\D*)', 'g');\n    do {\n      var v1Comp = v1CompParser.exec(v1Sub) || ['', '', ''];\n      var v2Comp = v2CompParser.exec(v2Sub) || ['', '', ''];\n      // Break if there are no more matches.\n      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {\n        break;\n      }\n\n      // Parse the numeric part of the subversion. A missing number is\n      // equivalent to 0.\n      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);\n      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);\n\n      // Compare the subversion components. The number has the highest\n      // precedence. Next, if the numbers are equal, a subversion without any\n      // qualifier is always higher than a subversion with any qualifier. Next,\n      // the qualifiers are compared as strings.\n      order = goog.string.compareElements_(v1CompNum, v2CompNum) ||\n          goog.string.compareElements_(v1Comp[2].length == 0,\n              v2Comp[2].length == 0) ||\n          goog.string.compareElements_(v1Comp[2], v2Comp[2]);\n      // Stop as soon as an inequality is discovered.\n    } while (order == 0);\n  }\n\n  return order;\n};\n\n\n/**\n * Compares elements of a version number.\n *\n * @param {string|number|boolean} left An element from a version number.\n * @param {string|number|boolean} right An element from a version number.\n *\n * @return {number}  1 if {@code left} is higher.\n *                   0 if arguments are equal.\n *                  -1 if {@code right} is higher.\n * @private\n */\ngoog.string.compareElements_ = function(left, right) {\n  if (left < right) {\n    return -1;\n  } else if (left > right) {\n    return 1;\n  }\n  return 0;\n};\n\n\n/**\n * Maximum value of #goog.string.hashCode, exclusive. 2^32.\n * @type {number}\n * @private\n */\ngoog.string.HASHCODE_MAX_ = 0x100000000;\n\n\n/**\n * String hash function similar to java.lang.String.hashCode().\n * The hash code for a string is computed as\n * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n * where s[i] is the ith character of the string and n is the length of\n * the string. We mod the result to make it between 0 (inclusive) and 2^32\n * (exclusive).\n * @param {string} str A string.\n * @return {number} Hash value for {@code str}, between 0 (inclusive) and 2^32\n *  (exclusive). The empty string returns 0.\n */\ngoog.string.hashCode = function(str) {\n  var result = 0;\n  for (var i = 0; i < str.length; ++i) {\n    result = 31 * result + str.charCodeAt(i);\n    // Normalize to 4 byte range, 0 ... 2^32.\n    result %= goog.string.HASHCODE_MAX_;\n  }\n  return result;\n};\n\n\n/**\n * The most recent unique ID. |0 is equivalent to Math.floor in this case.\n * @type {number}\n * @private\n */\ngoog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;\n\n\n/**\n * Generates and returns a string which is unique in the current document.\n * This is useful, for example, to create unique IDs for DOM elements.\n * @return {string} A unique id.\n */\ngoog.string.createUniqueString = function() {\n  return 'goog_' + goog.string.uniqueStringCounter_++;\n};\n\n\n/**\n * Converts the supplied string to a number, which may be Ininity or NaN.\n * This function strips whitespace: (toNumber(' 123') === 123)\n * This function accepts scientific notation: (toNumber('1e1') === 10)\n *\n * This is better than Javascript's built-in conversions because, sadly:\n *     (Number(' ') === 0) and (parseFloat('123a') === 123)\n *\n * @param {string} str The string to convert.\n * @return {number} The number the supplied string represents, or NaN.\n */\ngoog.string.toNumber = function(str) {\n  var num = Number(str);\n  if (num == 0 && goog.string.isEmpty(str)) {\n    return NaN;\n  }\n  return num;\n};\n\n\n/**\n * Converts a string from selector-case to camelCase (e.g. from\n * \"multi-part-string\" to \"multiPartString\"), useful for converting\n * CSS selectors and HTML dataset keys to their equivalent JS properties.\n * @param {string} str The string in selector-case form.\n * @return {string} The string in camelCase form.\n */\ngoog.string.toCamelCase = function(str) {\n  return String(str).replace(/\\-([a-z])/g, function(all, match) {\n    return match.toUpperCase();\n  });\n};\n\n\n/**\n * Converts a string from camelCase to selector-case (e.g. from\n * \"multiPartString\" to \"multi-part-string\"), useful for converting JS\n * style and dataset properties to equivalent CSS selectors and HTML keys.\n * @param {string} str The string in camelCase form.\n * @return {string} The string in selector-case form.\n */\ngoog.string.toSelectorCase = function(str) {\n  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n\n\n/**\n * Converts a string into TitleCase. First character of the string is always\n * capitalized in addition to the first letter of every subsequent word.\n * Words are delimited by one or more whitespaces by default. Custom delimiters\n * can optionally be specified to replace the default, which doesn't preserve\n * whitespace delimiters and instead must be explicitly included if needed.\n *\n * Default delimiter => \" \":\n *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three')  => 'One Two Three'\n *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '\n *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'\n *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'\n *\n * Custom delimiter => \"_-.\":\n *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'\n *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'\n *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '\n *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'\n *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'\n *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'\n *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'\n *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'\n *\n * @param {string} str String value in camelCase form.\n * @param {string=} opt_delimiters Custom delimiter character set used to\n *      distinguish words in the string value. Each character represents a\n *      single delimiter. When provided, default whitespace delimiter is\n *      overridden and must be explicitly included if needed.\n * @return {string} String value in TitleCase form.\n */\ngoog.string.toTitleCase = function(str, opt_delimiters) {\n  var delimiters = goog.isString(opt_delimiters) ?\n      goog.string.regExpEscape(opt_delimiters) : '\\\\s';\n\n  // For IE8, we need to prevent using an empty character set. Otherwise,\n  // incorrect matching will occur.\n  delimiters = delimiters ? '|[' + delimiters + ']+' : '';\n\n  var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');\n  return str.replace(regexp, function(all, p1, p2) {\n    return p1 + p2.toUpperCase();\n  });\n};\n\n\n/**\n * Parse a string in decimal or hexidecimal ('0xFFFF') form.\n *\n * To parse a particular radix, please use parseInt(string, radix) directly. See\n * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\n *\n * This is a wrapper for the built-in parseInt function that will only parse\n * numbers as base 10 or base 16.  Some JS implementations assume strings\n * starting with \"0\" are intended to be octal. ES3 allowed but discouraged\n * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.\n *\n * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj\n *\n * @param {string|number|null|undefined} value The value to be parsed.\n * @return {number} The number, parsed. If the string failed to parse, this\n *     will be NaN.\n */\ngoog.string.parseInt = function(value) {\n  // Force finite numbers to strings.\n  if (isFinite(value)) {\n    value = String(value);\n  }\n\n  if (goog.isString(value)) {\n    // If the string starts with '0x' or '-0x', parse as hex.\n    return /^\\s*-?0x/i.test(value) ?\n        parseInt(value, 16) : parseInt(value, 10);\n  }\n\n  return NaN;\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Rendering engine detection.\n * @see <a href=\"http://www.useragentstring.com/\">User agent strings</a>\n * For information on the browser brand (such as Safari versus Chrome), see\n * goog.userAgent.product.\n * @see ../demos/useragent.html\n */\n\ngoog.provide('goog.userAgent');\n\ngoog.require('goog.string');\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is IE.\n */\ngoog.userAgent.ASSUME_IE = false;\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is GECKO.\n */\ngoog.userAgent.ASSUME_GECKO = false;\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is WEBKIT.\n */\ngoog.userAgent.ASSUME_WEBKIT = false;\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is a\n *     mobile device running WebKit e.g. iPhone or Android.\n */\ngoog.userAgent.ASSUME_MOBILE_WEBKIT = false;\n\n\n/**\n * @define {boolean} Whether we know at compile-time that the browser is OPERA.\n */\ngoog.userAgent.ASSUME_OPERA = false;\n\n\n/**\n * @define {boolean} Whether the {@code goog.userAgent.isVersion} function will\n *     return true for any version.\n */\ngoog.userAgent.ASSUME_ANY_VERSION = false;\n\n\n/**\n * Whether we know the browser engine at compile-time.\n * @type {boolean}\n * @private\n */\ngoog.userAgent.BROWSER_KNOWN_ =\n    goog.userAgent.ASSUME_IE ||\n    goog.userAgent.ASSUME_GECKO ||\n    goog.userAgent.ASSUME_MOBILE_WEBKIT ||\n    goog.userAgent.ASSUME_WEBKIT ||\n    goog.userAgent.ASSUME_OPERA;\n\n\n/**\n * Returns the userAgent string for the current browser.\n * Some user agents (I'm thinking of you, Gears WorkerPool) do not expose a\n * navigator object off the global scope.  In that case we return null.\n *\n * @return {?string} The userAgent string or null if there is none.\n */\ngoog.userAgent.getUserAgentString = function() {\n  return goog.global['navigator'] ? goog.global['navigator'].userAgent : null;\n};\n\n\n/**\n * @return {Object} The native navigator object.\n */\ngoog.userAgent.getNavigator = function() {\n  // Need a local navigator reference instead of using the global one,\n  // to avoid the rare case where they reference different objects.\n  // (in a WorkerPool, for example).\n  return goog.global['navigator'];\n};\n\n\n/**\n * Initializer for goog.userAgent.\n *\n * This is a named function so that it can be stripped via the jscompiler\n * option for stripping types.\n * @private\n */\ngoog.userAgent.init_ = function() {\n  /**\n   * Whether the user agent string denotes Opera.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedOpera_ = false;\n\n  /**\n   * Whether the user agent string denotes Internet Explorer. This includes\n   * other browsers using Trident as its rendering engine. For example AOL\n   * and Netscape 8\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedIe_ = false;\n\n  /**\n   * Whether the user agent string denotes WebKit. WebKit is the rendering\n   * engine that Safari, Android and others use.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedWebkit_ = false;\n\n  /**\n   * Whether the user agent string denotes a mobile device.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedMobile_ = false;\n\n  /**\n   * Whether the user agent string denotes Gecko. Gecko is the rendering\n   * engine used by Mozilla, Mozilla Firefox, Camino and many more.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedGecko_ = false;\n\n  var ua;\n  if (!goog.userAgent.BROWSER_KNOWN_ &&\n      (ua = goog.userAgent.getUserAgentString())) {\n    var navigator = goog.userAgent.getNavigator();\n    goog.userAgent.detectedOpera_ = ua.indexOf('Opera') == 0;\n    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ &&\n        ua.indexOf('MSIE') != -1;\n    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ &&\n        ua.indexOf('WebKit') != -1;\n    // WebKit also gives navigator.product string equal to 'Gecko'.\n    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ &&\n        ua.indexOf('Mobile') != -1;\n    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ &&\n        !goog.userAgent.detectedWebkit_ && navigator.product == 'Gecko';\n  }\n};\n\n\nif (!goog.userAgent.BROWSER_KNOWN_) {\n  goog.userAgent.init_();\n}\n\n\n/**\n * Whether the user agent is Opera.\n * @type {boolean}\n */\ngoog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;\n\n\n/**\n * Whether the user agent is Internet Explorer. This includes other browsers\n * using Trident as its rendering engine. For example AOL and Netscape 8\n * @type {boolean}\n */\ngoog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;\n\n\n/**\n * Whether the user agent is Gecko. Gecko is the rendering engine used by\n * Mozilla, Mozilla Firefox, Camino and many more.\n * @type {boolean}\n */\ngoog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_GECKO :\n    goog.userAgent.detectedGecko_;\n\n\n/**\n * Whether the user agent is WebKit. WebKit is the rendering engine that\n * Safari, Android and others use.\n * @type {boolean}\n */\ngoog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?\n    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :\n    goog.userAgent.detectedWebkit_;\n\n\n/**\n * Whether the user agent is running on a mobile device.\n * @type {boolean}\n */\ngoog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT ||\n                        goog.userAgent.detectedMobile_;\n\n\n/**\n * Used while transitioning code to use WEBKIT instead.\n * @type {boolean}\n * @deprecated Use {@link goog.userAgent.product.SAFARI} instead.\n * TODO(nicksantos): Delete this from goog.userAgent.\n */\ngoog.userAgent.SAFARI = goog.userAgent.WEBKIT;\n\n\n/**\n * @return {string} the platform (operating system) the user agent is running\n *     on. Default to empty string because navigator.platform may not be defined\n *     (on Rhino, for example).\n * @private\n */\ngoog.userAgent.determinePlatform_ = function() {\n  var navigator = goog.userAgent.getNavigator();\n  return navigator && navigator.platform || '';\n};\n\n\n/**\n * The platform (operating system) the user agent is running on. Default to\n * empty string because navigator.platform may not be defined (on Rhino, for\n * example).\n * @type {string}\n */\ngoog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Macintosh operating\n *     system.\n */\ngoog.userAgent.ASSUME_MAC = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Windows operating\n *     system.\n */\ngoog.userAgent.ASSUME_WINDOWS = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on a Linux operating\n *     system.\n */\ngoog.userAgent.ASSUME_LINUX = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on a X11 windowing\n *     system.\n */\ngoog.userAgent.ASSUME_X11 = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on Android.\n */\ngoog.userAgent.ASSUME_ANDROID = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPhone.\n */\ngoog.userAgent.ASSUME_IPHONE = false;\n\n\n/**\n * @define {boolean} Whether the user agent is running on an iPad.\n */\ngoog.userAgent.ASSUME_IPAD = false;\n\n\n/**\n * @type {boolean}\n * @private\n */\ngoog.userAgent.PLATFORM_KNOWN_ =\n    goog.userAgent.ASSUME_MAC ||\n    goog.userAgent.ASSUME_WINDOWS ||\n    goog.userAgent.ASSUME_LINUX ||\n    goog.userAgent.ASSUME_X11 ||\n    goog.userAgent.ASSUME_ANDROID ||\n    goog.userAgent.ASSUME_IPHONE ||\n    goog.userAgent.ASSUME_IPAD;\n\n\n/**\n * Initialize the goog.userAgent constants that define which platform the user\n * agent is running on.\n * @private\n */\ngoog.userAgent.initPlatform_ = function() {\n  /**\n   * Whether the user agent is running on a Macintosh operating system.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM,\n      'Mac');\n\n  /**\n   * Whether the user agent is running on a Windows operating system.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedWindows_ = goog.string.contains(\n      goog.userAgent.PLATFORM, 'Win');\n\n  /**\n   * Whether the user agent is running on a Linux operating system.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM,\n      'Linux');\n\n  /**\n   * Whether the user agent is running on a X11 windowing system.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() &&\n      goog.string.contains(goog.userAgent.getNavigator()['appVersion'] || '',\n          'X11');\n\n  // Need user agent string for Android/IOS detection\n  var ua = goog.userAgent.getUserAgentString();\n\n  /**\n   * Whether the user agent is running on Android.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedAndroid_ = !!ua && ua.indexOf('Android') >= 0;\n\n  /**\n   * Whether the user agent is running on an iPhone.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedIPhone_ = !!ua && ua.indexOf('iPhone') >= 0;\n\n  /**\n   * Whether the user agent is running on an iPad.\n   * @type {boolean}\n   * @private\n   */\n  goog.userAgent.detectedIPad_ = !!ua && ua.indexOf('iPad') >= 0;\n};\n\n\nif (!goog.userAgent.PLATFORM_KNOWN_) {\n  goog.userAgent.initPlatform_();\n}\n\n\n/**\n * Whether the user agent is running on a Macintosh operating system.\n * @type {boolean}\n */\ngoog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;\n\n\n/**\n * Whether the user agent is running on a Windows operating system.\n * @type {boolean}\n */\ngoog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;\n\n\n/**\n * Whether the user agent is running on a Linux operating system.\n * @type {boolean}\n */\ngoog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;\n\n\n/**\n * Whether the user agent is running on a X11 windowing system.\n * @type {boolean}\n */\ngoog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;\n\n\n/**\n * Whether the user agent is running on Android.\n * @type {boolean}\n */\ngoog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;\n\n\n/**\n * Whether the user agent is running on an iPhone.\n * @type {boolean}\n */\ngoog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;\n\n\n/**\n * Whether the user agent is running on an iPad.\n * @type {boolean}\n */\ngoog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?\n    goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;\n\n\n/**\n * @return {string} The string that describes the version number of the user\n *     agent.\n * @private\n */\ngoog.userAgent.determineVersion_ = function() {\n  // All browsers have different ways to detect the version and they all have\n  // different naming schemes.\n\n  // version is a string rather than a number because it may contain 'b', 'a',\n  // and so on.\n  var version = '', re;\n\n  if (goog.userAgent.OPERA && goog.global['opera']) {\n    var operaVersion = goog.global['opera'].version;\n    version = typeof operaVersion == 'function' ? operaVersion() : operaVersion;\n  } else {\n    if (goog.userAgent.GECKO) {\n      re = /rv\\:([^\\);]+)(\\)|;)/;\n    } else if (goog.userAgent.IE) {\n      re = /MSIE\\s+([^\\);]+)(\\)|;)/;\n    } else if (goog.userAgent.WEBKIT) {\n      // WebKit/125.4\n      re = /WebKit\\/(\\S+)/;\n    }\n    if (re) {\n      var arr = re.exec(goog.userAgent.getUserAgentString());\n      version = arr ? arr[1] : '';\n    }\n  }\n  if (goog.userAgent.IE) {\n    // IE9 can be in document mode 9 but be reporting an inconsistent user agent\n    // version.  If it is identifying as a version lower than 9 we take the\n    // documentMode as the version instead.  IE8 has similar behavior.\n    // It is recommended to set the X-UA-Compatible header to ensure that IE9\n    // uses documentMode 9.\n    var docMode = goog.userAgent.getDocumentMode_();\n    if (docMode > parseFloat(version)) {\n      return String(docMode);\n    }\n  }\n  return version;\n};\n\n\n/**\n * @return {number|undefined} Returns the document mode (for testing).\n * @private\n */\ngoog.userAgent.getDocumentMode_ = function() {\n  // NOTE(user): goog.userAgent may be used in context where there is no DOM.\n  var doc = goog.global['document'];\n  return doc ? doc['documentMode'] : undefined;\n};\n\n\n/**\n * The version of the user agent. This is a string because it might contain\n * 'b' (as in beta) as well as multiple dots.\n * @type {string}\n */\ngoog.userAgent.VERSION = goog.userAgent.determineVersion_();\n\n\n/**\n * Compares two version numbers.\n *\n * @param {string} v1 Version of first item.\n * @param {string} v2 Version of second item.\n *\n * @return {number}  1 if first argument is higher\n *                   0 if arguments are equal\n *                  -1 if second argument is higher.\n * @deprecated Use goog.string.compareVersions.\n */\ngoog.userAgent.compare = function(v1, v2) {\n  return goog.string.compareVersions(v1, v2);\n};\n\n\n/**\n * Cache for {@link goog.userAgent.isVersion}. Calls to compareVersions are\n * surprisingly expensive and as a browsers version number is unlikely to change\n * during a session we cache the results.\n * @type {Object}\n * @private\n */\ngoog.userAgent.isVersionCache_ = {};\n\n\n/**\n * Whether the user agent version is higher or the same as the given version.\n * NOTE: When checking the version numbers for Firefox and Safari, be sure to\n * use the engine's version, not the browser's version number.  For example,\n * Firefox 3.0 corresponds to Gecko 1.9 and Safari 3.0 to Webkit 522.11.\n * Opera and Internet Explorer versions match the product release number.<br>\n * @see <a href=\"http://en.wikipedia.org/wiki/Safari_version_history\">\n *     Webkit</a>\n * @see <a href=\"http://en.wikipedia.org/wiki/Gecko_engine\">Gecko</a>\n *\n * @param {string|number} version The version to check.\n * @return {boolean} Whether the user agent version is higher or the same as\n *     the given version.\n */\ngoog.userAgent.isVersion = function(version) {\n  return goog.userAgent.ASSUME_ANY_VERSION ||\n      goog.userAgent.isVersionCache_[version] ||\n      (goog.userAgent.isVersionCache_[version] =\n          goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);\n};\n\n\n/**\n * Whether the IE effective document mode is higher or the same as the given\n * document mode version.\n * NOTE: Only for IE, return false for another browser.\n *\n * @param {number} documentMode The document mode version to check.\n * @return {boolean} Whether the IE effective document mode is higher or the\n *     same as the given version.\n */\ngoog.userAgent.isDocumentMode = function(documentMode) {\n  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;\n};\n\n\n/**\n * For IE version < 7, documentMode is undefined, so attempt to use the\n * CSS1Compat property to see if we are in standards mode. If we are in\n * standards mode, treat the browser version as the document mode. Otherwise,\n * IE is emulating version 5.\n * @type {number|undefined}\n * @const\n */\ngoog.userAgent.DOCUMENT_MODE = (function() {\n  var doc = goog.global['document'];\n  if (!doc || !goog.userAgent.IE) {\n    return undefined;\n  }\n  var mode = goog.userAgent.getDocumentMode_();\n  return mode || (doc['compatMode'] == 'CSS1Compat' ?\n      parseInt(goog.userAgent.VERSION, 10) : 5);\n})();\n",
		"// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Simple utilities for dealing with URI strings.\n *\n * This is intended to be a lightweight alternative to constructing goog.Uri\n * objects.  Whereas goog.Uri adds several kilobytes to the binary regardless\n * of how much of its functionality you use, this is designed to be a set of\n * mostly-independent utilities so that the compiler includes only what is\n * necessary for the task.  Estimated savings of porting is 5k pre-gzip and\n * 1.5k post-gzip.  To ensure the savings remain, future developers should\n * avoid adding new functionality to existing functions, but instead create\n * new ones and factor out shared code.\n *\n * Many of these utilities have limited functionality, tailored to common\n * cases.  The query parameter utilities assume that the parameter keys are\n * already encoded, since most keys are compile-time alphanumeric strings.  The\n * query parameter mutation utilities also do not tolerate fragment identifiers.\n *\n * By design, these functions can be slower than goog.Uri equivalents.\n * Repeated calls to some of functions may be quadratic in behavior for IE,\n * although the effect is somewhat limited given the 2kb limit.\n *\n * One advantage of the limited functionality here is that this approach is\n * less sensitive to differences in URI encodings than goog.Uri, since these\n * functions modify the strings in place, rather than decoding and\n * re-encoding.\n *\n * Uses features of RFC 3986 for parsing/formatting URIs:\n *   http://gbiv.com/protocols/uri/rfc/rfc3986.html\n *\n * @author gboyer@google.com (Garrett Boyer) - The \"lightened\" design.\n * @author msamuel@google.com (Mike Samuel) - Domain knowledge and regexes.\n */\n\ngoog.provide('goog.uri.utils');\ngoog.provide('goog.uri.utils.ComponentIndex');\ngoog.provide('goog.uri.utils.QueryArray');\ngoog.provide('goog.uri.utils.QueryValue');\ngoog.provide('goog.uri.utils.StandardQueryParam');\n\ngoog.require('goog.asserts');\ngoog.require('goog.string');\ngoog.require('goog.userAgent');\n\n\n/**\n * Character codes inlined to avoid object allocations due to charCode.\n * @enum {number}\n * @private\n */\ngoog.uri.utils.CharCode_ = {\n  AMPERSAND: 38,\n  EQUAL: 61,\n  HASH: 35,\n  QUESTION: 63\n};\n\n\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?string=} opt_scheme The scheme such as 'http'.\n * @param {?string=} opt_userInfo The user name before the '@'.\n * @param {?string=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {(string|number|null)=} opt_port The port number.\n * @param {?string=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?string=} opt_queryData The URI-encoded query data.\n * @param {?string=} opt_fragment The URI-encoded fragment identifier.\n * @return {string} The fully combined URI.\n */\ngoog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo,\n    opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n  var out = '';\n\n  if (opt_scheme) {\n    out += opt_scheme + ':';\n  }\n\n  if (opt_domain) {\n    out += '//';\n\n    if (opt_userInfo) {\n      out += opt_userInfo + '@';\n    }\n\n    out += opt_domain;\n\n    if (opt_port) {\n      out += ':' + opt_port;\n    }\n  }\n\n  if (opt_path) {\n    out += opt_path;\n  }\n\n  if (opt_queryData) {\n    out += '?' + opt_queryData;\n  }\n\n  if (opt_fragment) {\n    out += '#' + opt_fragment;\n  }\n\n  return out;\n};\n\n\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * @type {!RegExp}\n * @private\n */\ngoog.uri.utils.splitRe_ = new RegExp(\n    '^' +\n    '(?:' +\n      '([^:/?#.]+)' +                     // scheme - ignore special characters\n                                          // used by other URL parts such as :,\n                                          // ?, /, #, and .\n    ':)?' +\n    '(?://' +\n      '(?:([^/?#]*)@)?' +                 // userInfo\n      '([^/#?]*?)' +                      // domain\n      '(?::([0-9]+))?' +                  // port\n      '(?=[/#?]|$)' +                     // authority-terminating character\n    ')?' +\n    '([^?#]+)?' +                         // path\n    '(?:\\\\?([^#]*))?' +                   // query\n    '(?:#(.*))?' +                        // fragment\n    '$');\n\n\n/**\n * The index of each URI component in the return value of goog.uri.utils.split.\n * @enum {number}\n */\ngoog.uri.utils.ComponentIndex = {\n  SCHEME: 1,\n  USER_INFO: 2,\n  DOMAIN: 3,\n  PORT: 4,\n  PATH: 5,\n  QUERY_DATA: 6,\n  FRAGMENT: 7\n};\n\n\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param {string} uri The URI string to examine.\n * @return {!Array.<string|undefined>} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\ngoog.uri.utils.split = function(uri) {\n\n  // See @return comment -- never null.\n  return /** @type {!Array.<string|undefined>} */ (\n      uri.match(goog.uri.utils.splitRe_));\n};\n\n\n\n\n/**\n * @param {?string} uri A possibly null string.\n * @return {?string} The string URI-decoded, or null if uri is null.\n * @private\n */\ngoog.uri.utils.decodeIfPossible_ = function(uri) {\n  return uri && decodeURIComponent(uri);\n};\n\n\n/**\n * Gets a URI component by index.\n *\n * It is preferred to use the getPathEncoded() variety of functions ahead,\n * since they are more readable.\n *\n * @param {goog.uri.utils.ComponentIndex} componentIndex The component index.\n * @param {string} uri The URI to examine.\n * @return {?string} The still-encoded component, or null if the component\n *     is not present.\n * @private\n */\ngoog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {\n  // Convert undefined, null, and empty string into null.\n  return goog.uri.utils.split(uri)[componentIndex] || null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The protocol or scheme, or null if none.  Does not\n *     include trailing colons or slashes.\n */\ngoog.uri.utils.getScheme = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.SCHEME, uri);\n};\n\n\n/**\n * Gets the effective scheme for the URL.  If the URL is relative then the\n * scheme is derived from the page's location.\n * @param {string} uri The URI to examine.\n * @return {string} The protocol or scheme, always lower case.\n */\ngoog.uri.utils.getEffectiveScheme = function(uri) {\n  var scheme = goog.uri.utils.getScheme(uri);\n  if (!scheme && self.location) {\n    var protocol = self.location.protocol;\n    scheme = protocol.substr(0, protocol.length - 1);\n  }\n  // NOTE: When called from a web worker in Firefox 3.5, location maybe null.\n  // All other browsers with web workers support self.location from the worker.\n  return scheme ? scheme.toLowerCase() : '';\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The user name still encoded, or null if none.\n */\ngoog.uri.utils.getUserInfoEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.USER_INFO, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded user info, or null if none.\n */\ngoog.uri.utils.getUserInfo = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getUserInfoEncoded(uri));\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The domain name still encoded, or null if none.\n */\ngoog.uri.utils.getDomainEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.DOMAIN, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded domain, or null if none.\n */\ngoog.uri.utils.getDomain = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?number} The port number, or null if none.\n */\ngoog.uri.utils.getPort = function(uri) {\n  // Coerce to a number.  If the result of getComponentByIndex_ is null or\n  // non-numeric, the number coersion yields NaN.  This will then return\n  // null for all non-numeric cases (though also zero, which isn't a relevant\n  // port number).\n  return Number(goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.PORT, uri)) || null;\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The path still encoded, or null if none. Includes the\n *     leading slash, if any.\n */\ngoog.uri.utils.getPathEncoded = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.PATH, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded path, or null if none.  Includes the leading\n *     slash, if any.\n */\ngoog.uri.utils.getPath = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The query data still encoded, or null if none.  Does not\n *     include the question mark itself.\n */\ngoog.uri.utils.getQueryData = function(uri) {\n  return goog.uri.utils.getComponentByIndex_(\n      goog.uri.utils.ComponentIndex.QUERY_DATA, uri);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The fragment identifier, or null if none.  Does not\n *     include the hash mark itself.\n */\ngoog.uri.utils.getFragmentEncoded = function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @param {?string} fragment The encoded fragment identifier, or null if none.\n *     Does not include the hash mark itself.\n * @return {string} The URI with the fragment set.\n */\ngoog.uri.utils.setFragmentEncoded = function(uri, fragment) {\n  return goog.uri.utils.removeFragment(uri) + (fragment ? '#' + fragment : '');\n};\n\n\n/**\n * @param {string} uri The URI to examine.\n * @return {?string} The decoded fragment identifier, or null if none.  Does\n *     not include the hash mark.\n */\ngoog.uri.utils.getFragment = function(uri) {\n  return goog.uri.utils.decodeIfPossible_(\n      goog.uri.utils.getFragmentEncoded(uri));\n};\n\n\n/**\n * Extracts everything up to the port of the URI.\n * @param {string} uri The URI string.\n * @return {string} Everything up to and including the port.\n */\ngoog.uri.utils.getHost = function(uri) {\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(\n      pieces[goog.uri.utils.ComponentIndex.SCHEME],\n      pieces[goog.uri.utils.ComponentIndex.USER_INFO],\n      pieces[goog.uri.utils.ComponentIndex.DOMAIN],\n      pieces[goog.uri.utils.ComponentIndex.PORT]);\n};\n\n\n/**\n * Extracts the path of the URL and everything after.\n * @param {string} uri The URI string.\n * @return {string} The URI, starting at the path and including the query\n *     parameters and fragment identifier.\n */\ngoog.uri.utils.getPathAndAfter = function(uri) {\n  var pieces = goog.uri.utils.split(uri);\n  return goog.uri.utils.buildFromEncodedParts(null, null, null, null,\n      pieces[goog.uri.utils.ComponentIndex.PATH],\n      pieces[goog.uri.utils.ComponentIndex.QUERY_DATA],\n      pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);\n};\n\n\n/**\n * Gets the URI with the fragment identifier removed.\n * @param {string} uri The URI to examine.\n * @return {string} Everything preceding the hash mark.\n */\ngoog.uri.utils.removeFragment = function(uri) {\n  // The hash mark may not appear in any other part of the URL.\n  var hashIndex = uri.indexOf('#');\n  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);\n};\n\n\n/**\n * Ensures that two URI's have the exact same domain, scheme, and port.\n *\n * Unlike the version in goog.Uri, this checks protocol, and therefore is\n * suitable for checking against the browser's same-origin policy.\n *\n * @param {string} uri1 The first URI.\n * @param {string} uri2 The second URI.\n * @return {boolean} Whether they have the same domain and port.\n */\ngoog.uri.utils.haveSameDomain = function(uri1, uri2) {\n  var pieces1 = goog.uri.utils.split(uri1);\n  var pieces2 = goog.uri.utils.split(uri2);\n  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] ==\n             pieces2[goog.uri.utils.ComponentIndex.DOMAIN] &&\n         pieces1[goog.uri.utils.ComponentIndex.SCHEME] ==\n             pieces2[goog.uri.utils.ComponentIndex.SCHEME] &&\n         pieces1[goog.uri.utils.ComponentIndex.PORT] ==\n             pieces2[goog.uri.utils.ComponentIndex.PORT];\n};\n\n\n/**\n * Asserts that there are no fragment or query identifiers, only in uncompiled\n * mode.\n * @param {string} uri The URI to examine.\n * @private\n */\ngoog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {\n  // NOTE: would use goog.asserts here, but jscompiler doesn't know that\n  // indexOf has no side effects.\n  if (goog.DEBUG && (uri.indexOf('#') >= 0 || uri.indexOf('?') >= 0)) {\n    throw Error('goog.uri.utils: Fragment or query identifiers are not ' +\n        'supported: [' + uri + ']');\n  }\n};\n\n\n/**\n * Supported query parameter values by the parameter serializing utilities.\n *\n * If a value is null or undefined, the key-value pair is skipped, as an easy\n * way to omit parameters conditionally.  Non-array parameters are converted\n * to a string and URI encoded.  Array values are expanded into multiple\n * &key=value pairs, with each element stringized and URI-encoded.\n *\n * @typedef {*}\n */\ngoog.uri.utils.QueryValue;\n\n\n/**\n * An array representing a set of query parameters with alternating keys\n * and values.\n *\n * Keys are assumed to be URI encoded already and live at even indices.  See\n * goog.uri.utils.QueryValue for details on how parameter values are encoded.\n *\n * Example:\n * <pre>\n * var data = [\n *   // Simple param: ?name=BobBarker\n *   'name', 'BobBarker',\n *   // Conditional param -- may be omitted entirely.\n *   'specialDietaryNeeds', hasDietaryNeeds() ? getDietaryNeeds() : null,\n *   // Multi-valued param: &house=LosAngeles&house=NewYork&house=null\n *   'house', ['LosAngeles', 'NewYork', null]\n * ];\n * </pre>\n *\n * @typedef {!Array.<string|goog.uri.utils.QueryValue>}\n */\ngoog.uri.utils.QueryArray;\n\n\n/**\n * Appends a URI and query data in a string buffer with special preconditions.\n *\n * Internal implementation utility, performing very few object allocations.\n *\n * @param {!Array.<string|undefined>} buffer A string buffer.  The first element\n *     must be the base URI, and may have a fragment identifier.  If the array\n *     contains more than one element, the second element must be an ampersand,\n *     and may be overwritten, depending on the base URI.  Undefined elements\n *     are treated as empty-string.\n * @return {string} The concatenated URI and query data.\n * @private\n */\ngoog.uri.utils.appendQueryData_ = function(buffer) {\n  if (buffer[1]) {\n    // At least one query parameter was added.  We need to check the\n    // punctuation mark, which is currently an ampersand, and also make sure\n    // there aren't any interfering fragment identifiers.\n    var baseUri = /** @type {string} */ (buffer[0]);\n    var hashIndex = baseUri.indexOf('#');\n    if (hashIndex >= 0) {\n      // Move the fragment off the base part of the URI into the end.\n      buffer.push(baseUri.substr(hashIndex));\n      buffer[0] = baseUri = baseUri.substr(0, hashIndex);\n    }\n    var questionIndex = baseUri.indexOf('?');\n    if (questionIndex < 0) {\n      // No question mark, so we need a question mark instead of an ampersand.\n      buffer[1] = '?';\n    } else if (questionIndex == baseUri.length - 1) {\n      // Question mark is the very last character of the existing URI, so don't\n      // append an additional delimiter.\n      buffer[1] = undefined;\n    }\n  }\n\n  return buffer.join('');\n};\n\n\n/**\n * Appends key=value pairs to an array, supporting multi-valued objects.\n * @param {string} key The key prefix.\n * @param {goog.uri.utils.QueryValue} value The value to serialize.\n * @param {!Array.<string>} pairs The array to which the 'key=value' strings\n *     should be appended.\n * @private\n */\ngoog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {\n  if (goog.isArray(value)) {\n    // Convince the compiler it's an array.\n    goog.asserts.assertArray(value);\n    for (var j = 0; j < value.length; j++) {\n      // Convert to string explicitly, to short circuit the null and array\n      // logic in this function -- this ensures that null and undefined get\n      // written as literal 'null' and 'undefined', and arrays don't get\n      // expanded out but instead encoded in the default way.\n      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);\n    }\n  } else if (value != null) {\n    // Skip a top-level null or undefined entirely.\n    pairs.push('&', key,\n        // Check for empty string. Zero gets encoded into the url as literal\n        // strings.  For empty string, skip the equal sign, to be consistent\n        // with UriBuilder.java.\n        value === '' ? '' : '=',\n        goog.string.urlEncode(value));\n  }\n};\n\n\n/**\n * Builds a buffer of query data from a sequence of alternating keys and values.\n *\n * @param {!Array.<string|undefined>} buffer A string buffer to append to.  The\n *     first element appended will be an '&', and may be replaced by the caller.\n * @param {goog.uri.utils.QueryArray|Arguments} keysAndValues An array with\n *     alternating keys and values -- see the typedef.\n * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.\n * @return {!Array.<string|undefined>} The buffer argument.\n * @private\n */\ngoog.uri.utils.buildQueryDataBuffer_ = function(\n    buffer, keysAndValues, opt_startIndex) {\n  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0),\n      0) % 2 == 0, 'goog.uri.utils: Key/value lists must be even in length.');\n\n  for (var i = opt_startIndex || 0; i < keysAndValues.length; i += 2) {\n    goog.uri.utils.appendKeyValuePairs_(\n        keysAndValues[i], keysAndValues[i + 1], buffer);\n  }\n\n  return buffer;\n};\n\n\n/**\n * Builds a query data string from a sequence of alternating keys and values.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {goog.uri.utils.QueryArray} keysAndValues Alternating keys and\n *     values.  See the typedef.\n * @param {number=} opt_startIndex A start offset into the arary, defaults to 0.\n * @return {string} The encoded query string, in the for 'a=1&b=2'.\n */\ngoog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {\n  var buffer = goog.uri.utils.buildQueryDataBuffer_(\n      [], keysAndValues, opt_startIndex);\n  buffer[0] = ''; // Remove the leading ampersand.\n  return buffer.join('');\n};\n\n\n/**\n * Builds a buffer of query data from a map.\n *\n * @param {!Array.<string|undefined>} buffer A string buffer to append to.  The\n *     first element appended will be an '&', and may be replaced by the caller.\n * @param {Object.<goog.uri.utils.QueryValue>} map An object where keys are\n *     URI-encoded parameter keys, and the values conform to the contract\n *     specified in the goog.uri.utils.QueryValue typedef.\n * @return {!Array.<string|undefined>} The buffer argument.\n * @private\n */\ngoog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {\n  for (var key in map) {\n    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);\n  }\n\n  return buffer;\n};\n\n\n/**\n * Builds a query data string from a map.\n * Currently generates \"&key&\" for empty args.\n *\n * @param {Object} map An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.  Keys with a null value\n *     are dropped.\n * @return {string} The encoded query string, in the for 'a=1&b=2'.\n */\ngoog.uri.utils.buildQueryDataFromMap = function(map) {\n  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);\n  buffer[0] = '';\n  return buffer.join('');\n};\n\n\n/**\n * Appends URI parameters to an existing URI.\n *\n * The variable arguments may contain alternating keys and values.  Keys are\n * assumed to be already URI encoded.  The values should not be URI-encoded,\n * and will instead be encoded by this function.\n * <pre>\n * appendParams('http://www.foo.com?existing=true',\n *     'key1', 'value1',\n *     'key2', 'value?willBeEncoded',\n *     'key3', ['valueA', 'valueB', 'valueC'],\n *     'key4', null);\n * result: 'http://www.foo.com?existing=true&' +\n *     'key1=value1&' +\n *     'key2=value%3FwillBeEncoded&' +\n *     'key3=valueA&key3=valueB&key3=valueC'\n * </pre>\n *\n * A single call to this function will not exhibit quadratic behavior in IE,\n * whereas multiple repeated calls may, although the effect is limited by\n * fact that URL's generally can't exceed 2kb.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {...(goog.uri.utils.QueryArray|string|goog.uri.utils.QueryValue)} var_args\n *     An array or argument list conforming to goog.uri.utils.QueryArray.\n * @return {string} The URI with all query parameters added.\n */\ngoog.uri.utils.appendParams = function(uri, var_args) {\n  return goog.uri.utils.appendQueryData_(\n      arguments.length == 2 ?\n      goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) :\n      goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));\n};\n\n\n/**\n * Appends query parameters from a map.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {Object} map An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.  Keys with a null value\n *     are dropped.\n * @return {string} The new parameters.\n */\ngoog.uri.utils.appendParamsFromMap = function(uri, map) {\n  return goog.uri.utils.appendQueryData_(\n      goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));\n};\n\n\n/**\n * Appends a single URI parameter.\n *\n * Repeated calls to this can exhibit quadratic behavior in IE6 due to the\n * way string append works, though it should be limited given the 2kb limit.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} key The key, which must already be URI encoded.\n * @param {*} value The value, which will be stringized and encoded (assumed\n *     not already to be encoded).\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.appendParam = function(uri, key, value) {\n  return goog.uri.utils.appendQueryData_(\n      [uri, '&', key, '=', goog.string.urlEncode(value)]);\n};\n\n\n/**\n * Finds the next instance of a query parameter with the specified name.\n *\n * Does not instantiate any objects.\n *\n * @param {string} uri The URI to search.  May contain a fragment identifier\n *     if opt_hashIndex is specified.\n * @param {number} startIndex The index to begin searching for the key at.  A\n *     match may be found even if this is one character after the ampersand.\n * @param {string} keyEncoded The URI-encoded key.\n * @param {number} hashOrEndIndex Index to stop looking at.  If a hash\n *     mark is present, it should be its index, otherwise it should be the\n *     length of the string.\n * @return {number} The position of the first character in the key's name,\n *     immediately after either a question mark or a dot.\n * @private\n */\ngoog.uri.utils.findParam_ = function(\n    uri, startIndex, keyEncoded, hashOrEndIndex) {\n  var index = startIndex;\n  var keyLength = keyEncoded.length;\n\n  // Search for the key itself and post-filter for surronuding punctuation,\n  // rather than expensively building a regexp.\n  while ((index = uri.indexOf(keyEncoded, index)) >= 0 &&\n      index < hashOrEndIndex) {\n    var precedingChar = uri.charCodeAt(index - 1);\n    // Ensure that the preceding character is '&' or '?'.\n    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n        precedingChar == goog.uri.utils.CharCode_.QUESTION) {\n      // Ensure the following character is '&', '=', '#', or NaN\n      // (end of string).\n      var followingChar = uri.charCodeAt(index + keyLength);\n      if (!followingChar ||\n          followingChar == goog.uri.utils.CharCode_.EQUAL ||\n          followingChar == goog.uri.utils.CharCode_.AMPERSAND ||\n          followingChar == goog.uri.utils.CharCode_.HASH) {\n        return index;\n      }\n    }\n    index += keyLength + 1;\n  }\n\n  return -1;\n};\n\n\n/**\n * Regular expression for finding a hash mark or end of string.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.hashOrEndRe_ = /#|$/;\n\n\n/**\n * Determines if the URI contains a specific key.\n *\n * Performs no object instantiations.\n *\n * @param {string} uri The URI to process.  May contain a fragment\n *     identifier.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {boolean} Whether the key is present.\n */\ngoog.uri.utils.hasParam = function(uri, keyEncoded) {\n  return goog.uri.utils.findParam_(uri, 0, keyEncoded,\n      uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;\n};\n\n\n/**\n * Gets the first value of a query parameter.\n * @param {string} uri The URI to process.  May contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.  Case-sensitive.\n * @return {?string} The first value of the parameter (URI-decoded), or null\n *     if the parameter is not found.\n */\ngoog.uri.utils.getParamValue = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var foundIndex = goog.uri.utils.findParam_(\n      uri, 0, keyEncoded, hashOrEndIndex);\n\n  if (foundIndex < 0) {\n    return null;\n  } else {\n    var endPosition = uri.indexOf('&', foundIndex);\n    if (endPosition < 0 || endPosition > hashOrEndIndex) {\n      endPosition = hashOrEndIndex;\n    }\n    // Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex > endPosition.\n    return goog.string.urlDecode(\n        uri.substr(foundIndex, endPosition - foundIndex));\n  }\n};\n\n\n/**\n * Gets all values of a query parameter.\n * @param {string} uri The URI to process.  May contain a framgnet.\n * @param {string} keyEncoded The URI-encoded key.  Case-snsitive.\n * @return {!Array.<string>} All URI-decoded values with the given key.\n *     If the key is not found, this will have length 0, but never be null.\n */\ngoog.uri.utils.getParamValues = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var result = [];\n\n  while ((foundIndex = goog.uri.utils.findParam_(\n      uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    // Find where this parameter ends, either the '&' or the end of the\n    // query parameters.\n    position = uri.indexOf('&', foundIndex);\n    if (position < 0 || position > hashOrEndIndex) {\n      position = hashOrEndIndex;\n    }\n\n    // Progress forth to the end of the \"key=\" or \"key&\" substring.\n    foundIndex += keyEncoded.length + 1;\n    // Use substr, because it (unlike substring) will return empty string\n    // if foundIndex > position.\n    result.push(goog.string.urlDecode(uri.substr(\n        foundIndex, position - foundIndex)));\n  }\n\n  return result;\n};\n\n\n/**\n * Regexp to find trailing question marks and ampersands.\n * @type {RegExp}\n * @private\n */\ngoog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;\n\n\n/**\n * Removes all instances of a query parameter.\n * @param {string} uri The URI to process.  Must not contain a fragment.\n * @param {string} keyEncoded The URI-encoded key.\n * @return {string} The URI with all instances of the parameter removed.\n */\ngoog.uri.utils.removeParam = function(uri, keyEncoded) {\n  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);\n  var position = 0;\n  var foundIndex;\n  var buffer = [];\n\n  // Look for a query parameter.\n  while ((foundIndex = goog.uri.utils.findParam_(\n      uri, position, keyEncoded, hashOrEndIndex)) >= 0) {\n    // Get the portion of the query string up to, but not including, the ?\n    // or & starting the parameter.\n    buffer.push(uri.substring(position, foundIndex));\n    // Progress to immediately after the '&'.  If not found, go to the end.\n    // Avoid including the hash mark.\n    position = Math.min((uri.indexOf('&', foundIndex) + 1) || hashOrEndIndex,\n        hashOrEndIndex);\n  }\n\n  // Append everything that is remaining.\n  buffer.push(uri.substr(position));\n\n  // Join the buffer, and remove trailing punctuation that remains.\n  return buffer.join('').replace(\n      goog.uri.utils.trailingQueryPunctuationRe_, '$1');\n};\n\n\n/**\n * Replaces all existing definitions of a parameter with a single definition.\n *\n * Repeated calls to this can exhibit quadratic behavior due to the need to\n * find existing instances and reconstruct the string, though it should be\n * limited given the 2kb limit.  Consider using appendParams to append multiple\n * parameters in bulk.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {string} keyEncoded The key, which must already be URI encoded.\n * @param {*} value The value, which will be stringized and encoded (assumed\n *     not already to be encoded).\n * @return {string} The URI with the query parameter added.\n */\ngoog.uri.utils.setParam = function(uri, keyEncoded, value) {\n  return goog.uri.utils.appendParam(\n      goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);\n};\n\n\n/**\n * Generates a URI path using a given URI and a path with checks to\n * prevent consecutive \"//\". The baseUri passed in must not contain\n * query or fragment identifiers. The path to append may not contain query or\n * fragment identifiers.\n *\n * @param {string} baseUri URI to use as the base.\n * @param {string} path Path to append.\n * @return {string} Updated URI.\n */\ngoog.uri.utils.appendPath = function(baseUri, path) {\n  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);\n\n  // Remove any trailing '/'\n  if (goog.string.endsWith(baseUri, '/')) {\n    baseUri = baseUri.substr(0, baseUri.length - 1);\n  }\n  // Remove any leading '/'\n  if (goog.string.startsWith(path, '/')) {\n    path = path.substr(1);\n  }\n  return goog.string.buildString(baseUri, '/', path);\n};\n\n\n/**\n * Standard supported query parameters.\n * @enum {string}\n */\ngoog.uri.utils.StandardQueryParam = {\n\n  /** Unused parameter for unique-ifying. */\n  RANDOM: 'zx'\n};\n\n\n/**\n * Sets the zx parameter of a URI to a random value.\n * @param {string} uri Any URI.\n * @return {string} That URI with the \"zx\" parameter added or replaced to\n *     contain a random string.\n */\ngoog.uri.utils.makeUnique = function(uri) {\n  return goog.uri.utils.setParam(uri,\n      goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());\n};\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Implements the disposable interface. The dispose method is used\n * to clean up references and resources.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide('goog.Disposable');\ngoog.provide('goog.dispose');\n\ngoog.require('goog.disposable.IDisposable');\n\n\n\n/**\n * Class that provides the basic implementation for disposable objects. If your\n * class holds one or more references to COM objects, DOM nodes, or other\n * disposable objects, it should extend this class or implement the disposable\n * interface (defined in goog.disposable.IDisposable).\n * @constructor\n * @implements {goog.disposable.IDisposable}\n */\ngoog.Disposable = function() {\n  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {\n    this.creationStack = new Error().stack;\n    goog.Disposable.instances_[goog.getUid(this)] = this;\n  }\n};\n\n\n/**\n * @enum {number} Different monitoring modes for Disposable.\n */\ngoog.Disposable.MonitoringMode = {\n  /**\n   * No monitoring.\n   */\n  OFF: 0,\n  /**\n   * Creating and disposing the goog.Disposable instances is monitored. All\n   * disposable objects need to call the {@code goog.Disposable} base\n   * constructor. The PERMANENT mode must bet switched on before creating any\n   * goog.Disposable instances.\n   */\n  PERMANENT: 1,\n  /**\n   * INTERACTIVE mode can be switched on and off on the fly without producing\n   * errors. It also doesn't warn if the disposable objects don't call the\n   * {@code goog.Disposable} base constructor.\n   */\n  INTERACTIVE: 2\n};\n\n\n/**\n * @define {number} The monitoring mode of the goog.Disposable\n *     instances. Default is OFF. Switching on the monitoring is only\n *     recommended for debugging because it has a significant impact on\n *     performance and memory usage. If switched off, the monitoring code\n *     compiles down to 0 bytes.\n */\ngoog.Disposable.MONITORING_MODE = 0;\n\n\n/**\n * Maps the unique ID of every undisposed {@code goog.Disposable} object to\n * the object itself.\n * @type {!Object.<number, !goog.Disposable>}\n * @private\n */\ngoog.Disposable.instances_ = {};\n\n\n/**\n * @return {!Array.<!goog.Disposable>} All {@code goog.Disposable} objects that\n *     haven't been disposed of.\n */\ngoog.Disposable.getUndisposedObjects = function() {\n  var ret = [];\n  for (var id in goog.Disposable.instances_) {\n    if (goog.Disposable.instances_.hasOwnProperty(id)) {\n      ret.push(goog.Disposable.instances_[Number(id)]);\n    }\n  }\n  return ret;\n};\n\n\n/**\n * Clears the registry of undisposed objects but doesn't dispose of them.\n */\ngoog.Disposable.clearUndisposedObjects = function() {\n  goog.Disposable.instances_ = {};\n};\n\n\n/**\n * Whether the object has been disposed of.\n * @type {boolean}\n * @private\n */\ngoog.Disposable.prototype.disposed_ = false;\n\n\n/**\n * Callbacks to invoke when this object is disposed.\n * @type {Array.<!Function>}\n * @private\n */\ngoog.Disposable.prototype.onDisposeCallbacks_;\n\n\n/**\n * If monitoring the goog.Disposable instances is enabled, stores the creation\n * stack trace of the Disposable instance.\n * @type {string}\n */\ngoog.Disposable.prototype.creationStack;\n\n\n/**\n * @return {boolean} Whether the object has been disposed of.\n * @override\n */\ngoog.Disposable.prototype.isDisposed = function() {\n  return this.disposed_;\n};\n\n\n/**\n * @return {boolean} Whether the object has been disposed of.\n * @deprecated Use {@link #isDisposed} instead.\n */\ngoog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;\n\n\n/**\n * Disposes of the object. If the object hasn't already been disposed of, calls\n * {@link #disposeInternal}. Classes that extend {@code goog.Disposable} should\n * override {@link #disposeInternal} in order to delete references to COM\n * objects, DOM nodes, and other disposable objects. Reentrant.\n *\n * @return {void} Nothing.\n * @override\n */\ngoog.Disposable.prototype.dispose = function() {\n  if (!this.disposed_) {\n    // Set disposed_ to true first, in case during the chain of disposal this\n    // gets disposed recursively.\n    this.disposed_ = true;\n    this.disposeInternal();\n    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {\n      var uid = goog.getUid(this);\n      if (goog.Disposable.MONITORING_MODE ==\n          goog.Disposable.MonitoringMode.PERMANENT &&\n          !goog.Disposable.instances_.hasOwnProperty(uid)) {\n        throw Error(this + ' did not call the goog.Disposable base ' +\n            'constructor or was disposed of after a clearUndisposedObjects ' +\n            'call');\n      }\n      delete goog.Disposable.instances_[uid];\n    }\n  }\n};\n\n\n/**\n * Associates a disposable object with this object so that they will be disposed\n * together.\n * @param {goog.disposable.IDisposable} disposable that will be disposed when\n *     this object is disposed.\n */\ngoog.Disposable.prototype.registerDisposable = function(disposable) {\n  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));\n};\n\n\n/**\n * Invokes a callback function when this object is disposed. Callbacks are\n * invoked in the order in which they were added.\n * @param {function(this:T):?} callback The callback function.\n * @param {T=} opt_scope An optional scope to call the callback in.\n * @template T\n */\ngoog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {\n  if (!this.onDisposeCallbacks_) {\n    this.onDisposeCallbacks_ = [];\n  }\n  this.onDisposeCallbacks_.push(goog.bind(callback, opt_scope));\n};\n\n\n/**\n * Deletes or nulls out any references to COM objects, DOM nodes, or other\n * disposable objects. Classes that extend {@code goog.Disposable} should\n * override this method.\n * Not reentrant. To avoid calling it twice, it must only be called from the\n * subclass' {@code disposeInternal} method. Everywhere else the public\n * {@code dispose} method must be used.\n * For example:\n * <pre>\n *   mypackage.MyClass = function() {\n *     goog.base(this);\n *     // Constructor logic specific to MyClass.\n *     ...\n *   };\n *   goog.inherits(mypackage.MyClass, goog.Disposable);\n *\n *   mypackage.MyClass.prototype.disposeInternal = function() {\n *     // Dispose logic specific to MyClass.\n *     ...\n *     // Call superclass's disposeInternal at the end of the subclass's, like\n *     // in C++, to avoid hard-to-catch issues.\n *     goog.base(this, 'disposeInternal');\n *   };\n * </pre>\n * @protected\n */\ngoog.Disposable.prototype.disposeInternal = function() {\n  if (this.onDisposeCallbacks_) {\n    while (this.onDisposeCallbacks_.length) {\n      this.onDisposeCallbacks_.shift()();\n    }\n  }\n};\n\n\n/**\n * Returns True if we can verify the object is disposed.\n * Calls {@code isDisposed} on the argument if it supports it.  If obj\n * is not an object with an isDisposed() method, return false.\n * @param {*} obj The object to investigate.\n * @return {boolean} True if we can verify the object is disposed.\n */\ngoog.Disposable.isDisposed = function(obj) {\n  if (obj && typeof obj.isDisposed == 'function') {\n    return obj.isDisposed();\n  }\n  return false;\n};\n\n\n/**\n * Calls {@code dispose} on the argument if it supports it. If obj is not an\n *     object with a dispose() method, this is a no-op.\n * @param {*} obj The object to dispose of.\n */\ngoog.dispose = function(obj) {\n  if (obj && typeof obj.dispose == 'function') {\n    obj.dispose();\n  }\n};\n\n\n/**\n * Calls {@code dispose} on each member of the list that supports it. (If the\n * member is an ArrayLike, then {@code goog.disposeAll()} will be called\n * recursively on each of its members.) If the member is not an object with a\n * {@code dispose()} method, then it is ignored.\n * @param {...*} var_args The list.\n */\ngoog.disposeAll = function(var_args) {\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    var disposable = arguments[i];\n    if (goog.isArrayLike(disposable)) {\n      goog.disposeAll.apply(null, disposable);\n    } else {\n      goog.dispose(disposable);\n    }\n  }\n};\n",
		"// Copyright 2012 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An interface for a listenable JavaScript object.\n *\n * WARNING(chrishenry): DO NOT USE! SUPPORT NOT FULLY IMPLEMENTED.\n */\n\ngoog.provide('goog.events.Listenable');\ngoog.provide('goog.events.ListenableKey');\n\n\n\n/**\n * A listenable interface. Also see goog.events.EventTarget.\n * @interface\n */\ngoog.events.Listenable = function() {};\n\n\n/**\n * Whether to use the new listenable interface and mechanism in\n * goog.events and goog.events.EventTarget.\n *\n * TODO(user): Remove this once launched and stable.\n *\n * @type {boolean}\n */\ngoog.events.Listenable.USE_LISTENABLE_INTERFACE = false;\n\n\n/**\n * An expando property to indicate that an object implements\n * goog.events.Listenable.\n *\n * See addImplementation/isImplementedBy.\n *\n * @type {string}\n * @const\n * @private\n */\ngoog.events.Listenable.IMPLEMENTED_BY_PROP_ = '__closure_listenable';\n\n\n/**\n * Marks a given class (constructor) as an implementation of\n * Listenable, do that we can query that fact at runtime. The class\n * must have already implemented the interface.\n * @param {!Function} cls The class constructor. The corresponding\n *     class must have already implemented the interface.\n */\ngoog.events.Listenable.addImplementation = function(cls) {\n  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP_] = true;\n};\n\n\n/**\n * @param {Object} obj The object to check.\n * @return {boolean} Whether a given instance implements\n *     Listenable. The class/superclass of the instance must call\n *     addImplementation.\n */\ngoog.events.Listenable.isImplementedBy = function(obj) {\n  return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP_]);\n};\n\n\n/**\n * Adds an event listener. A listener can only be added once to an\n * object and if it is added again the key for the listener is\n * returned. Note that if the existing listener is a one-off listener\n * (registered via listenOnce), it will no longer be a one-off\n * listener after a call to listen().\n *\n * @param {string} type Event type or array of event types.\n * @param {!Function} listener Callback method, or an object\n *     with a handleEvent function.\n * @param {boolean=} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {Object=} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} Unique key for the listener.\n */\ngoog.events.Listenable.prototype.listen;\n\n\n/**\n * Adds an event listener that is removed automatically after the\n * listener fired once.\n *\n * If an existing listener already exists, listenOnce will do\n * nothing. In particular, if the listener was previously registered\n * via listen(), listenOnce() will not turn the listener into a\n * one-off listener. Similarly, if there is already an existing\n * one-off listener, listenOnce does not modify the listeners (it is\n * still a once listener).\n *\n * @param {string} type Event type or array of event types.\n * @param {!Function} listener Callback method, or an object\n *     with a handleEvent function.\n * @param {boolean=} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {Object=} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} Unique key for the listener.\n */\ngoog.events.Listenable.prototype.listenOnce;\n\n\n/**\n * Removes an event listener which was added with listen() or listenOnce().\n *\n * Implementation needs to call goog.events.cleanUp.\n *\n * @param {string} type Event type or array of event types.\n * @param {!Function} listener Callback method, or an object\n *     with a handleEvent function. TODO(user): Consider whether\n *     we can remove Object.\n * @param {boolean=} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {Object=} opt_listenerScope Object in whose scope to call\n *     the listener.\n * @return {boolean} Whether any listener was removed.\n */\ngoog.events.Listenable.prototype.unlisten;\n\n\n/**\n * Removes an event listener which was added with listen() by the key\n * returned by listen().\n *\n * Implementation needs to call goog.events.cleanUp.\n *\n * @param {goog.events.ListenableKey} key The key returned by\n *     listen() or listenOnce().\n * @return {boolean} Whether any listener was removed.\n */\ngoog.events.Listenable.prototype.unlistenByKey;\n\n\n/**\n * Dispatches an event (or event like object) and calls all listeners\n * listening for events of this type. The type of the event is decided by the\n * type property on the event object.\n *\n * If any of the listeners returns false OR calls preventDefault then this\n * function will return false.  If one of the capture listeners calls\n * stopPropagation, then the bubble listeners won't fire.\n *\n * @param {goog.events.EventLike} e Event object.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the listeners returns false this will also return false.\n */\ngoog.events.Listenable.prototype.dispatchEvent;\n\n\n/**\n * Removes all listeners from this listenable. If type is specified,\n * it will only remove listeners of the particular type. otherwise all\n * registered listeners will be removed.\n *\n * Implementation needs to call goog.events.cleanUp for each removed\n * listener.\n *\n * @param {string=} opt_type Type of event to remove, default is to\n *     remove all types.\n * @return {number} Number of listeners removed.\n */\ngoog.events.Listenable.prototype.removeAllListeners;\n\n\n/**\n * Fires all registered listeners in this listenable for the given\n * type and capture mode, passing them the given eventObject. This\n * does not perform actual capture/bubble. Only implementors of the\n * interface should be using this.\n *\n * @param {string} type The type of the listeners to fire.\n * @param {boolean} capture The capture mode of the listeners to fire.\n * @param {goog.events.Event} eventObject The event object to fire.\n * @return {boolean} Whether all listeners succeeded without\n *     attempting to prevent default behavior. If any listener returns\n *     false or called goog.events.Event#preventDefault, this returns\n *     false.\n */\ngoog.events.Listenable.prototype.fireListeners;\n\n\n/**\n * Gets all listeners in this listenable for the given type and\n * capture mode.\n *\n * @param {string} type The type of the listeners to fire.\n * @param {boolean} capture The capture mode of the listeners to fire.\n * @return {!Array.<goog.events.ListenableKey>} An array of registered\n *     listeners.\n */\ngoog.events.Listenable.prototype.getListeners;\n\n\n/**\n * Gets the goog.events.ListenableKey for the event or null if no such\n * listener is in use.\n *\n * @param {string} type The name of the event without the 'on' prefix.\n * @param {!Function} listener The listener function to get.\n * @param {boolean=} capture Whether the listener is a capturing listener.\n * @param {Object=} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} the found listener or null if not found.\n */\ngoog.events.Listenable.prototype.getListener;\n\n\n/**\n * Whether there is any active listeners matching the specified\n * signature. If either the type or capture parameters are\n * unspecified, the function will match on the remaining criteria.\n *\n * @param {string=} opt_type Event type.\n * @param {boolean=} opt_capture Whether to check for capture or bubble\n *     listeners.\n * @return {boolean} Whether there is any active listeners matching\n *     the requested type and/or capture phase.\n */\ngoog.events.Listenable.prototype.hasListener;\n\n\n\n/**\n * An interface that describes a single registered listener.\n * @interface\n */\ngoog.events.ListenableKey = function() {};\n\n\n/**\n * Counter used to create a unique key\n * @type {number}\n * @private\n */\ngoog.events.ListenableKey.counter_ = 0;\n\n\n/**\n * Reserves a key to be used for ListenableKey#key field.\n * @return {number} A number to be used to fill ListenableKey#key\n *     field.\n */\ngoog.events.ListenableKey.reserveKey = function() {\n  return ++goog.events.ListenableKey.counter_;\n};\n\n\n/**\n * The source event target.\n * @type {!(Object|goog.events.Listenable|goog.events.EventTarget)}\n */\ngoog.events.ListenableKey.prototype.src;\n\n\n/**\n * The event type the listener is listening to.\n * @type {string}\n */\ngoog.events.ListenableKey.prototype.type;\n\n\n/**\n * The listener function.\n * TODO(user): Narrow the type if possible.\n * @type {Function|Object}\n */\ngoog.events.ListenableKey.prototype.listener;\n\n\n/**\n * Whether the listener works on capture phase.\n * @type {boolean}\n */\ngoog.events.ListenableKey.prototype.capture;\n\n\n/**\n * The 'this' object for the listener function's scope.\n * @type {Object}\n */\ngoog.events.ListenableKey.prototype.handler;\n\n\n/**\n * A globally unique number to identify the key.\n * @type {number}\n */\ngoog.events.ListenableKey.prototype.key;\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Listener object.\n * @see ../demos/events.html\n */\n\ngoog.provide('goog.events.Listener');\n\ngoog.require('goog.events.ListenableKey');\n\n\n\n/**\n * Simple class that stores information about a listener\n * @implements {goog.events.ListenableKey}\n * @constructor\n */\ngoog.events.Listener = function() {\n  if (goog.events.Listener.ENABLE_MONITORING) {\n    this.creationStack = new Error().stack;\n  }\n};\n\n\n/**\n * @define {boolean} Whether to enable the monitoring of the\n *     goog.events.Listener instances. Switching on the monitoring is only\n *     recommended for debugging because it has a significant impact on\n *     performance and memory usage. If switched off, the monitoring code\n *     compiles down to 0 bytes.\n */\ngoog.events.Listener.ENABLE_MONITORING = false;\n\n\n/**\n * Whether the listener is a function or an object that implements handleEvent.\n * @type {boolean}\n * @private\n */\ngoog.events.Listener.prototype.isFunctionListener_;\n\n\n/**\n * Call back function or an object with a handleEvent function.\n * @type {Function|Object|null}\n */\ngoog.events.Listener.prototype.listener;\n\n\n/**\n * Proxy for callback that passes through {@link goog.events#HandleEvent_}\n * @type {Function}\n */\ngoog.events.Listener.prototype.proxy;\n\n\n/**\n * Object or node that callback is listening to\n * @type {Object|goog.events.Listenable|goog.events.EventTarget}\n */\ngoog.events.Listener.prototype.src;\n\n\n/**\n * Type of event\n * @type {string}\n */\ngoog.events.Listener.prototype.type;\n\n\n/**\n * Whether the listener is being called in the capture or bubble phase\n * @type {boolean}\n */\ngoog.events.Listener.prototype.capture;\n\n\n/**\n * Optional object whose context to execute the listener in\n * @type {Object|undefined}\n */\ngoog.events.Listener.prototype.handler;\n\n\n/**\n * The key of the listener.\n * @type {number}\n * @override\n */\ngoog.events.Listener.prototype.key = 0;\n\n\n/**\n * Whether the listener has been removed.\n * @type {boolean}\n */\ngoog.events.Listener.prototype.removed = false;\n\n\n/**\n * Whether to remove the listener after it has been called.\n * @type {boolean}\n */\ngoog.events.Listener.prototype.callOnce = false;\n\n\n/**\n * If monitoring the goog.events.Listener instances is enabled, stores the\n * creation stack trace of the Disposable instance.\n * @type {string}\n */\ngoog.events.Listener.prototype.creationStack;\n\n\n/**\n * Initializes the listener.\n * @param {Function|Object} listener Callback function, or an object with a\n *     handleEvent function.\n * @param {Function} proxy Wrapper for the listener that patches the event.\n * @param {Object} src Source object for the event.\n * @param {string} type Event type.\n * @param {boolean} capture Whether in capture or bubble phase.\n * @param {Object=} opt_handler Object in whose context to execute the callback.\n */\ngoog.events.Listener.prototype.init = function(listener, proxy, src, type,\n                                               capture, opt_handler) {\n  // we do the test of the listener here so that we do  not need to\n  // continiously do this inside handleEvent\n  if (goog.isFunction(listener)) {\n    this.isFunctionListener_ = true;\n  } else if (listener && listener.handleEvent &&\n      goog.isFunction(listener.handleEvent)) {\n    this.isFunctionListener_ = false;\n  } else {\n    throw Error('Invalid listener argument');\n  }\n\n  this.listener = listener;\n  this.proxy = proxy;\n  this.src = src;\n  this.type = type;\n  this.capture = !!capture;\n  this.handler = opt_handler;\n  this.callOnce = false;\n  this.key = goog.events.ListenableKey.reserveKey();\n  this.removed = false;\n};\n\n\n/**\n * Calls the internal listener\n * @param {Object} eventObject Event object to be passed to listener.\n * @return {boolean} The result of the internal listener call.\n */\ngoog.events.Listener.prototype.handleEvent = function(eventObject) {\n  if (this.isFunctionListener_) {\n    return this.listener.call(this.handler || this.src, eventObject);\n  }\n  return this.listener.handleEvent.call(this.listener, eventObject);\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating objects/maps/hashes.\n */\n\ngoog.provide('goog.object');\n\n\n/**\n * Calls a function for each element in an object/map/hash.\n *\n * @param {Object.<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object.<K,V>):?} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the object) and the return value is ignored.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @template T,K,V\n */\ngoog.object.forEach = function(obj, f, opt_obj) {\n  for (var key in obj) {\n    f.call(opt_obj, obj[key], key, obj);\n  }\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If that call returns\n * true, adds the element to a new object.\n *\n * @param {Object.<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object.<K,V>):boolean} f The function to call\n *     for every element. This\n *     function takes 3 arguments (the element, the index and the object)\n *     and should return a boolean. If the return value is true the\n *     element is added to the result object. If it is false the\n *     element is not included.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object.<K,V>} a new object in which only elements that passed the\n *     test are present.\n * @template T,K,V\n */\ngoog.object.filter = function(obj, f, opt_obj) {\n  var res = {};\n  for (var key in obj) {\n    if (f.call(opt_obj, obj[key], key, obj)) {\n      res[key] = obj[key];\n    }\n  }\n  return res;\n};\n\n\n/**\n * For every element in an object/map/hash calls a function and inserts the\n * result into a new object.\n *\n * @param {Object.<K,V>} obj The object over which to iterate.\n * @param {function(this:T,V,?,Object.<K,V>):R} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the object)\n *     and should return something. The result will be inserted\n *     into a new object.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {!Object.<K,R>} a new object with the results from f.\n * @template T,K,V,R\n */\ngoog.object.map = function(obj, f, opt_obj) {\n  var res = {};\n  for (var key in obj) {\n    res[key] = f.call(opt_obj, obj[key], key, obj);\n  }\n  return res;\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If any\n * call returns true, returns true (without checking the rest). If\n * all calls return false, returns false.\n *\n * @param {Object.<K,V>} obj The object to check.\n * @param {function(this:T,V,?,Object.<K,V>):boolean} f The function to\n *     call for every element. This function\n *     takes 3 arguments (the element, the index and the object) and should\n *     return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} true if any element passes the test.\n * @template T,K,V\n */\ngoog.object.some = function(obj, f, opt_obj) {\n  for (var key in obj) {\n    if (f.call(opt_obj, obj[key], key, obj)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Calls a function for each element in an object/map/hash. If\n * all calls return true, returns true. If any call returns false, returns\n * false at this point and does not continue to check the remaining elements.\n *\n * @param {Object.<K,V>} obj The object to check.\n * @param {?function(this:T,V,?,Object.<K,V>):boolean} f The function to\n *     call for every element. This function\n *     takes 3 arguments (the element, the index and the object) and should\n *     return a boolean.\n * @param {T=} opt_obj This is used as the 'this' object within f.\n * @return {boolean} false if any element fails the test.\n * @template T,K,V\n */\ngoog.object.every = function(obj, f, opt_obj) {\n  for (var key in obj) {\n    if (!f.call(opt_obj, obj[key], key, obj)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Returns the number of key-value pairs in the object map.\n *\n * @param {Object} obj The object for which to get the number of key-value\n *     pairs.\n * @return {number} The number of key-value pairs in the object map.\n */\ngoog.object.getCount = function(obj) {\n  // JS1.5 has __count__ but it has been deprecated so it raises a warning...\n  // in other words do not use. Also __count__ only includes the fields on the\n  // actual object and not in the prototype chain.\n  var rv = 0;\n  for (var key in obj) {\n    rv++;\n  }\n  return rv;\n};\n\n\n/**\n * Returns one key from the object map, if any exists.\n * For map literals the returned key will be the first one in most of the\n * browsers (a know exception is Konqueror).\n *\n * @param {Object} obj The object to pick a key from.\n * @return {string|undefined} The key or undefined if the object is empty.\n */\ngoog.object.getAnyKey = function(obj) {\n  for (var key in obj) {\n    return key;\n  }\n};\n\n\n/**\n * Returns one value from the object map, if any exists.\n * For map literals the returned value will be the first one in most of the\n * browsers (a know exception is Konqueror).\n *\n * @param {Object.<K,V>} obj The object to pick a value from.\n * @return {V|undefined} The value or undefined if the object is empty.\n * @template K,V\n */\ngoog.object.getAnyValue = function(obj) {\n  for (var key in obj) {\n    return obj[key];\n  }\n};\n\n\n/**\n * Whether the object/hash/map contains the given object as a value.\n * An alias for goog.object.containsValue(obj, val).\n *\n * @param {Object.<K,V>} obj The object in which to look for val.\n * @param {V} val The object for which to check.\n * @return {boolean} true if val is present.\n * @template K,V\n */\ngoog.object.contains = function(obj, val) {\n  return goog.object.containsValue(obj, val);\n};\n\n\n/**\n * Returns the values of the object/map/hash.\n *\n * @param {Object.<K,V>} obj The object from which to get the values.\n * @return {!Array.<V>} The values in the object/map/hash.\n * @template K,V\n */\ngoog.object.getValues = function(obj) {\n  var res = [];\n  var i = 0;\n  for (var key in obj) {\n    res[i++] = obj[key];\n  }\n  return res;\n};\n\n\n/**\n * Returns the keys of the object/map/hash.\n *\n * @param {Object} obj The object from which to get the keys.\n * @return {!Array.<string>} Array of property keys.\n */\ngoog.object.getKeys = function(obj) {\n  var res = [];\n  var i = 0;\n  for (var key in obj) {\n    res[i++] = key;\n  }\n  return res;\n};\n\n\n/**\n * Get a value from an object multiple levels deep.  This is useful for\n * pulling values from deeply nested objects, such as JSON responses.\n * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)\n *\n * @param {!Object} obj An object to get the value from.  Can be array-like.\n * @param {...(string|number|!Array.<number|string>)} var_args A number of keys\n *     (as strings, or numbers, for array-like objects).  Can also be\n *     specified as a single array of keys.\n * @return {*} The resulting value.  If, at any point, the value for a key\n *     is undefined, returns undefined.\n */\ngoog.object.getValueByKeys = function(obj, var_args) {\n  var isArrayLike = goog.isArrayLike(var_args);\n  var keys = isArrayLike ? var_args : arguments;\n\n  // Start with the 2nd parameter for the variable parameters syntax.\n  for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {\n    obj = obj[keys[i]];\n    if (!goog.isDef(obj)) {\n      break;\n    }\n  }\n\n  return obj;\n};\n\n\n/**\n * Whether the object/map/hash contains the given key.\n *\n * @param {Object} obj The object in which to look for key.\n * @param {*} key The key for which to check.\n * @return {boolean} true If the map contains the key.\n */\ngoog.object.containsKey = function(obj, key) {\n  return key in obj;\n};\n\n\n/**\n * Whether the object/map/hash contains the given value. This is O(n).\n *\n * @param {Object.<K,V>} obj The object in which to look for val.\n * @param {V} val The value for which to check.\n * @return {boolean} true If the map contains the value.\n * @template K,V\n */\ngoog.object.containsValue = function(obj, val) {\n  for (var key in obj) {\n    if (obj[key] == val) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its key.\n * @param {Object.<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,Object.<K,V>):boolean} f The\n *      function to call for every element. Takes 3 arguments (the value,\n *     the key and the object) and should return a boolean.\n * @param {T=} opt_this An optional \"this\" context for the function.\n * @return {string|undefined} The key of an element for which the function\n *     returns true or undefined if no such element is found.\n * @template T,K,V\n */\ngoog.object.findKey = function(obj, f, opt_this) {\n  for (var key in obj) {\n    if (f.call(opt_this, obj[key], key, obj)) {\n      return key;\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * Searches an object for an element that satisfies the given condition and\n * returns its value.\n * @param {Object.<K,V>} obj The object to search in.\n * @param {function(this:T,V,string,Object.<K,V>):boolean} f The function\n *     to call for every element. Takes 3 arguments (the value, the key\n *     and the object) and should return a boolean.\n * @param {T=} opt_this An optional \"this\" context for the function.\n * @return {V} The value of an element for which the function returns true or\n *     undefined if no such element is found.\n * @template T,K,V\n */\ngoog.object.findValue = function(obj, f, opt_this) {\n  var key = goog.object.findKey(obj, f, opt_this);\n  return key && obj[key];\n};\n\n\n/**\n * Whether the object/map/hash is empty.\n *\n * @param {Object} obj The object to test.\n * @return {boolean} true if obj is empty.\n */\ngoog.object.isEmpty = function(obj) {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\n\n/**\n * Removes all key value pairs from the object/map/hash.\n *\n * @param {Object} obj The object to clear.\n */\ngoog.object.clear = function(obj) {\n  for (var i in obj) {\n    delete obj[i];\n  }\n};\n\n\n/**\n * Removes a key-value pair based on the key.\n *\n * @param {Object} obj The object from which to remove the key.\n * @param {*} key The key to remove.\n * @return {boolean} Whether an element was removed.\n */\ngoog.object.remove = function(obj, key) {\n  var rv;\n  if ((rv = key in obj)) {\n    delete obj[key];\n  }\n  return rv;\n};\n\n\n/**\n * Adds a key-value pair to the object. Throws an exception if the key is\n * already in use. Use set if you want to change an existing pair.\n *\n * @param {Object.<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} val The value to add.\n * @template K,V\n */\ngoog.object.add = function(obj, key, val) {\n  if (key in obj) {\n    throw Error('The object already contains the key \"' + key + '\"');\n  }\n  goog.object.set(obj, key, val);\n};\n\n\n/**\n * Returns the value for the given key.\n *\n * @param {Object.<K,V>} obj The object from which to get the value.\n * @param {string} key The key for which to get the value.\n * @param {R=} opt_val The value to return if no item is found for the given\n *     key (default is undefined).\n * @return {V|R|undefined} The value for the given key.\n * @template K,V,R\n */\ngoog.object.get = function(obj, key, opt_val) {\n  if (key in obj) {\n    return obj[key];\n  }\n  return opt_val;\n};\n\n\n/**\n * Adds a key-value pair to the object/map/hash.\n *\n * @param {Object.<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {K} value The value to add.\n * @template K,V\n */\ngoog.object.set = function(obj, key, value) {\n  obj[key] = value;\n};\n\n\n/**\n * Adds a key-value pair to the object/map/hash if it doesn't exist yet.\n *\n * @param {Object.<K,V>} obj The object to which to add the key-value pair.\n * @param {string} key The key to add.\n * @param {V} value The value to add if the key wasn't present.\n * @return {V} The value of the entry at the end of the function.\n * @template K,V\n */\ngoog.object.setIfUndefined = function(obj, key, value) {\n  return key in obj ? obj[key] : (obj[key] = value);\n};\n\n\n/**\n * Does a flat clone of the object.\n *\n * @param {Object.<K,V>} obj Object to clone.\n * @return {!Object.<K,V>} Clone of the input object.\n * @template K,V\n */\ngoog.object.clone = function(obj) {\n  // We cannot use the prototype trick because a lot of methods depend on where\n  // the actual key is set.\n\n  var res = {};\n  for (var key in obj) {\n    res[key] = obj[key];\n  }\n  return res;\n  // We could also use goog.mixin but I wanted this to be independent from that.\n};\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects\n * that refer to themselves will cause infinite recursion.\n *\n * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and\n * copies UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n */\ngoog.object.unsafeClone = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.object.unsafeClone(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * Returns a new object in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n *\n * @param {Object} obj The object to transpose.\n * @return {!Object} The transposed object.\n */\ngoog.object.transpose = function(obj) {\n  var transposed = {};\n  for (var key in obj) {\n    transposed[obj[key]] = key;\n  }\n  return transposed;\n};\n\n\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {Array.<string>}\n * @private\n */\ngoog.object.PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n/**\n * Extends an object with another object.\n * This operates 'in-place'; it does not create a new Object.\n *\n * Example:\n * var o = {};\n * goog.object.extend(o, {a: 0, b: 1});\n * o; // {a: 0, b: 1}\n * goog.object.extend(o, {c: 2});\n * o; // {a: 0, b: 1, c: 2}\n *\n * @param {Object} target  The object to modify.\n * @param {...Object} var_args The objects from which values will be copied.\n */\ngoog.object.extend = function(target, var_args) {\n  var key, source;\n  for (var i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      target[key] = source[key];\n    }\n\n    // For IE the for-in-loop does not contain any properties that are not\n    // enumerable on the prototype object (for example isPrototypeOf from\n    // Object.prototype) and it will also not include 'replace' on objects that\n    // extend String and change 'replace' (not that it is common for anyone to\n    // extend anything except Object).\n\n    for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {\n      key = goog.object.PROTOTYPE_FIELDS_[j];\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n};\n\n\n/**\n * Creates a new object built from the key-value pairs provided as arguments.\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments,  otherwise even arguments are used as\n *     the property names and odd arguments are used as the property values.\n * @return {!Object} The new object.\n * @throws {Error} If there are uneven number of arguments or there is only one\n *     non array argument.\n */\ngoog.object.create = function(var_args) {\n  var argLength = arguments.length;\n  if (argLength == 1 && goog.isArray(arguments[0])) {\n    return goog.object.create.apply(null, arguments[0]);\n  }\n\n  if (argLength % 2) {\n    throw Error('Uneven number of arguments');\n  }\n\n  var rv = {};\n  for (var i = 0; i < argLength; i += 2) {\n    rv[arguments[i]] = arguments[i + 1];\n  }\n  return rv;\n};\n\n\n/**\n * Creates a new object where the property names come from the arguments but\n * the value is always set to true\n * @param {...*} var_args If only one argument is provided and it is an array\n *     then this is used as the arguments,  otherwise the arguments are used\n *     as the property names.\n * @return {!Object} The new object.\n */\ngoog.object.createSet = function(var_args) {\n  var argLength = arguments.length;\n  if (argLength == 1 && goog.isArray(arguments[0])) {\n    return goog.object.createSet.apply(null, arguments[0]);\n  }\n\n  var rv = {};\n  for (var i = 0; i < argLength; i++) {\n    rv[arguments[i]] = true;\n  }\n  return rv;\n};\n\n\n/**\n * Creates an immutable view of the underlying object, if the browser\n * supports immutable objects.\n *\n * In default mode, writes to this view will fail silently. In strict mode,\n * they will throw an error.\n *\n * @param {!Object.<K,V>} obj An object.\n * @return {!Object.<K,V>} An immutable view of that object, or the\n *     original object if this browser does not support immutables.\n * @template K,V\n */\ngoog.object.createImmutableView = function(obj) {\n  var result = obj;\n  if (Object.isFrozen && !Object.isFrozen(obj)) {\n    result = Object.create(obj);\n    Object.freeze(result);\n  }\n  return result;\n};\n\n\n/**\n * @param {!Object} obj An object.\n * @return {boolean} Whether this is an immutable view of the object.\n */\ngoog.object.isImmutableView = function(obj) {\n  return !!Object.isFrozen && Object.isFrozen(obj);\n};\n",
		"// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Browser capability checks for the events package.\n *\n */\n\n\ngoog.provide('goog.events.BrowserFeature');\n\ngoog.require('goog.userAgent');\n\n\n/**\n * Enum of browser capabilities.\n * @enum {boolean}\n */\ngoog.events.BrowserFeature = {\n  /**\n   * Whether the button attribute of the event is W3C compliant.  False in\n   * Internet Explorer prior to version 9; document-version dependent.\n   */\n  HAS_W3C_BUTTON: !goog.userAgent.IE || goog.userAgent.isDocumentMode(9),\n\n  /**\n   * Whether the browser supports full W3C event model.\n   */\n  HAS_W3C_EVENT_SUPPORT: !goog.userAgent.IE || goog.userAgent.isDocumentMode(9),\n\n  /**\n   * To prevent default in IE7-8 for certain keydown events we need set the\n   * keyCode to -1.\n   */\n  SET_KEY_CODE_TO_PREVENT_DEFAULT: goog.userAgent.IE &&\n      !goog.userAgent.isVersion('9'),\n\n  /**\n   * Whether the {@code navigator.onLine} property is supported.\n   */\n  HAS_NAVIGATOR_ONLINE_PROPERTY: !goog.userAgent.WEBKIT ||\n      goog.userAgent.isVersion('528'),\n\n  /**\n   * Whether HTML5 network online/offline events are supported.\n   */\n  HAS_HTML5_NETWORK_EVENT_SUPPORT:\n      goog.userAgent.GECKO && goog.userAgent.isVersion('1.9b') ||\n      goog.userAgent.IE && goog.userAgent.isVersion('8') ||\n      goog.userAgent.OPERA && goog.userAgent.isVersion('9.5') ||\n      goog.userAgent.WEBKIT && goog.userAgent.isVersion('528'),\n\n  /**\n   * Whether HTML5 network events fire on document.body, or otherwise the\n   * window.\n   */\n  HTML5_NETWORK_EVENTS_FIRE_ON_BODY:\n      goog.userAgent.GECKO && !goog.userAgent.isVersion('8') ||\n      goog.userAgent.IE && !goog.userAgent.isVersion('9'),\n\n  /**\n   * Whether touch is enabled in the browser.\n   */\n  TOUCH_ENABLED:\n      ('ontouchstart' in goog.global ||\n          !!(goog.global['document'] &&\n             document.documentElement &&\n             'ontouchstart' in document.documentElement) ||\n          // IE10 uses non-standard touch events, so it has a different check.\n          !!(goog.global['navigator'] &&\n              goog.global['navigator']['msMaxTouchPoints']))\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Utilities for manipulating arrays.\n *\n */\n\n\ngoog.provide('goog.array');\ngoog.provide('goog.array.ArrayLike');\n\ngoog.require('goog.asserts');\n\n\n/**\n * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should\n * rely on Array.prototype functions, if available.\n *\n * The Array.prototype functions can be defined by external libraries like\n * Prototype and setting this flag to false forces closure to use its own\n * goog.array implementation.\n *\n * If your javascript can be loaded by a third party site and you are wary about\n * relying on the prototype functions, specify\n * \"--define goog.NATIVE_ARRAY_PROTOTYPES=false\" to the JSCompiler.\n *\n * Setting goog.TRUSTED_SITE to false will automatically set\n * NATIVE_ARRAY_PROTOTYPES to false.\n */\ngoog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;\n\n\n/**\n * @typedef {Array|NodeList|Arguments|{length: number}}\n */\ngoog.array.ArrayLike;\n\n\n/**\n * Returns the last element in an array without removing it.\n * @param {goog.array.ArrayLike} array The array.\n * @return {*} Last item in array.\n */\ngoog.array.peek = function(array) {\n  return array[array.length - 1];\n};\n\n\n/**\n * Reference to the original {@code Array.prototype}.\n * @private\n */\ngoog.array.ARRAY_PROTOTYPE_ = Array.prototype;\n\n\n// NOTE(arv): Since most of the array functions are generic it allows you to\n// pass an array-like object. Strings have a length and are considered array-\n// like. However, the 'in' operator does not work on strings so we cannot just\n// use the array path even if the browser supports indexing into strings. We\n// therefore end up splitting the string.\n\n\n/**\n * Returns the index of the first element of an array with a specified\n * value, or -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}\n *\n * @param {goog.array.ArrayLike} arr The array to be searched.\n * @param {*} obj The object for which we are searching.\n * @param {number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at index 0.\n * @return {number} The index of the first matching array element.\n */\ngoog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n                     goog.array.ARRAY_PROTOTYPE_.indexOf ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length != null);\n\n      return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex = opt_fromIndex == null ?\n          0 : (opt_fromIndex < 0 ?\n               Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex);\n\n      if (goog.isString(arr)) {\n        // Array.prototype.indexOf uses === so only strings should be found.\n        if (!goog.isString(obj) || obj.length != 1) {\n          return -1;\n        }\n        return arr.indexOf(obj, fromIndex);\n      }\n\n      for (var i = fromIndex; i < arr.length; i++) {\n        if (i in arr && arr[i] === obj)\n          return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Returns the index of the last element of an array with a specified value, or\n * -1 if the element is not present in the array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}\n *\n * @param {goog.array.ArrayLike} arr The array to be searched.\n * @param {*} obj The object for which we are searching.\n * @param {?number=} opt_fromIndex The index at which to start the search. If\n *     omitted the search starts at the end of the array.\n * @return {number} The index of the last matching array element.\n */\ngoog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&\n                         goog.array.ARRAY_PROTOTYPE_.lastIndexOf ?\n    function(arr, obj, opt_fromIndex) {\n      goog.asserts.assert(arr.length != null);\n\n      // Firefox treats undefined and null as 0 in the fromIndex argument which\n      // leads it to always return -1\n      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n      return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);\n    } :\n    function(arr, obj, opt_fromIndex) {\n      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;\n\n      if (fromIndex < 0) {\n        fromIndex = Math.max(0, arr.length + fromIndex);\n      }\n\n      if (goog.isString(arr)) {\n        // Array.prototype.lastIndexOf uses === so only strings should be found.\n        if (!goog.isString(obj) || obj.length != 1) {\n          return -1;\n        }\n        return arr.lastIndexOf(obj, fromIndex);\n      }\n\n      for (var i = fromIndex; i >= 0; i--) {\n        if (i in arr && arr[i] === obj)\n          return i;\n      }\n      return -1;\n    };\n\n\n/**\n * Calls a function for each element in an array. Skips holes in the array.\n * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array like object over\n *     which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function takes 3 arguments (the element, the index and the\n *     array). The return value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @template T,S\n */\ngoog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&\n                     goog.array.ARRAY_PROTOTYPE_.forEach ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = goog.isString(arr) ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          f.call(opt_obj, arr2[i], i, arr);\n        }\n      }\n    };\n\n\n/**\n * Calls a function for each element in an array, starting from the last\n * element rather than the first.\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this: S, T, number, ?): ?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array). The return\n *     value is ignored.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @template T,S\n */\ngoog.array.forEachRight = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = goog.isString(arr) ? arr.split('') : arr;\n  for (var i = l - 1; i >= 0; --i) {\n    if (i in arr2) {\n      f.call(opt_obj, arr2[i], i, arr);\n    }\n  }\n};\n\n\n/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a Boolean. If the return value is true the element is added to the\n *     result array. If it is false the element is not included.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {!Array} a new array in which only elements that passed the test are\n *     present.\n * @template T,S\n */\ngoog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&\n                    goog.array.ARRAY_PROTOTYPE_.filter ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var res = [];\n      var resLength = 0;\n      var arr2 = goog.isString(arr) ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          var val = arr2[i];  // in case f mutates arr2\n          if (f.call(opt_obj, val, i, arr)) {\n            res[resLength++] = val;\n          }\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Calls a function for each element in an array and inserts the result into a\n * new array.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-map}\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?):?} f The function to call for every\n *     element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return something. The result will be inserted into a new array.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {!Array} a new array with the results from f.\n * @template T,S\n */\ngoog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&\n                 goog.array.ARRAY_PROTOTYPE_.map ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var res = new Array(l);\n      var arr2 = goog.isString(arr) ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2) {\n          res[i] = f.call(opt_obj, arr2[i], i, arr);\n        }\n      }\n      return res;\n    };\n\n\n/**\n * Passes every element of an array into a function and accumulates the result.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}\n *\n * For example:\n * var a = [1, 2, 3, 4];\n * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);\n * returns 10\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {R} Result of evaluating f repeatedly across the values of the array.\n * @template T,S,R\n */\ngoog.array.reduce = function(arr, f, val, opt_obj) {\n  if (arr.reduce) {\n    if (opt_obj) {\n      return arr.reduce(goog.bind(f, opt_obj), val);\n    } else {\n      return arr.reduce(f, val);\n    }\n  }\n  var rval = val;\n  goog.array.forEach(arr, function(val, index) {\n    rval = f.call(opt_obj, rval, val, index, arr);\n  });\n  return rval;\n};\n\n\n/**\n * Passes every element of an array into a function and accumulates the result,\n * starting from the last element and working towards the first.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}\n *\n * For example:\n * var a = ['a', 'b', 'c'];\n * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');\n * returns 'cba'\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, R, T, number, ?) : R} f The function to call for\n *     every element. This function\n *     takes 4 arguments (the function's previous result or the initial value,\n *     the value of the current array element, the current array index, and the\n *     array itself)\n *     function(previousValue, currentValue, index, array).\n * @param {?} val The initial value to pass into the function on the first call.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {R} Object returned as a result of evaluating f repeatedly across the\n *     values of the array.\n * @template T,S,R\n */\ngoog.array.reduceRight = function(arr, f, val, opt_obj) {\n  if (arr.reduceRight) {\n    if (opt_obj) {\n      return arr.reduceRight(goog.bind(f, opt_obj), val);\n    } else {\n      return arr.reduceRight(f, val);\n    }\n  }\n  var rval = val;\n  goog.array.forEachRight(arr, function(val, index) {\n    rval = f.call(opt_obj, rval, val, index, arr);\n  });\n  return rval;\n};\n\n\n/**\n * Calls f for each element of an array. If any call returns true, some()\n * returns true (without checking the remaining elements). If all calls\n * return false, some() returns false.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-some}\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} true if any element passes the test.\n * @template T,S\n */\ngoog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&\n                  goog.array.ARRAY_PROTOTYPE_.some ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = goog.isString(arr) ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n\n/**\n * Call f for each element of an array. If all calls return true, every()\n * returns true. If any call returns false, every() returns false and\n * does not continue to check the remaining elements.\n *\n * See {@link http://tinyurl.com/developer-mozilla-org-array-every}\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj The object to be used as the value of 'this'\n *     within f.\n * @return {boolean} false if any element fails the test.\n * @template T,S\n */\ngoog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&\n                   goog.array.ARRAY_PROTOTYPE_.every ?\n    function(arr, f, opt_obj) {\n      goog.asserts.assert(arr.length != null);\n\n      return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);\n    } :\n    function(arr, f, opt_obj) {\n      var l = arr.length;  // must be fixed during loop... see docs\n      var arr2 = goog.isString(arr) ? arr.split('') : arr;\n      for (var i = 0; i < l; i++) {\n        if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n\n/**\n * Counts the array elements that fulfill the predicate, i.e. for which the\n * callback function returns true. Skips holes in the array.\n *\n * @param {!(Array.<T>|goog.array.ArrayLike)} arr Array or array like object\n *     over which to iterate.\n * @param {function(this: S, T, number, ?): boolean} f The function to call for\n *     every element. Takes 3 arguments (the element, the index and the array).\n * @param {S=} opt_obj The object to be used as the value of 'this' within f.\n * @return {number} The number of the matching elements.\n * @template T,S\n */\ngoog.array.count = function(arr, f, opt_obj) {\n  var count = 0;\n  goog.array.forEach(arr, function(element, index, arr) {\n    if (f.call(opt_obj, element, index, arr)) {\n      ++count;\n    }\n  }, opt_obj);\n  return count;\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return that element.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T} The first array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.find = function(arr, f, opt_obj) {\n  var i = goog.array.findIndex(arr, f, opt_obj);\n  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array for the first element that satisfies a given condition and\n * return its index.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call for\n *     every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the first array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndex = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = goog.isString(arr) ? arr.split('') : arr;\n  for (var i = 0; i < l; i++) {\n    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return that element.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {T} The last array element that passes the test, or null if no\n *     element is found.\n * @template T,S\n */\ngoog.array.findRight = function(arr, f, opt_obj) {\n  var i = goog.array.findIndexRight(arr, f, opt_obj);\n  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];\n};\n\n\n/**\n * Search an array (in reverse order) for the last element that satisfies a\n * given condition and return its index.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {Object=} opt_obj An optional \"this\" context for the function.\n * @return {number} The index of the last array element that passes the test,\n *     or -1 if no element is found.\n * @template T,S\n */\ngoog.array.findIndexRight = function(arr, f, opt_obj) {\n  var l = arr.length;  // must be fixed during loop... see docs\n  var arr2 = goog.isString(arr) ? arr.split('') : arr;\n  for (var i = l - 1; i >= 0; i--) {\n    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n/**\n * Whether the array contains the given object.\n * @param {goog.array.ArrayLike} arr The array to test for the presence of the\n *     element.\n * @param {*} obj The object for which to test.\n * @return {boolean} true if obj is present.\n */\ngoog.array.contains = function(arr, obj) {\n  return goog.array.indexOf(arr, obj) >= 0;\n};\n\n\n/**\n * Whether the array is empty.\n * @param {goog.array.ArrayLike} arr The array to test.\n * @return {boolean} true if empty.\n */\ngoog.array.isEmpty = function(arr) {\n  return arr.length == 0;\n};\n\n\n/**\n * Clears the array.\n * @param {goog.array.ArrayLike} arr Array or array like object to clear.\n */\ngoog.array.clear = function(arr) {\n  // For non real arrays we don't have the magic length so we delete the\n  // indices.\n  if (!goog.isArray(arr)) {\n    for (var i = arr.length - 1; i >= 0; i--) {\n      delete arr[i];\n    }\n  }\n  arr.length = 0;\n};\n\n\n/**\n * Pushes an item into an array, if it's not already in the array.\n * @param {Array.<T>} arr Array into which to insert the item.\n * @param {T} obj Value to add.\n * @template T\n */\ngoog.array.insert = function(arr, obj) {\n  if (!goog.array.contains(arr, obj)) {\n    arr.push(obj);\n  }\n};\n\n\n/**\n * Inserts an object at the given index of the array.\n * @param {goog.array.ArrayLike} arr The array to modify.\n * @param {*} obj The object to insert.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertAt = function(arr, obj, opt_i) {\n  goog.array.splice(arr, opt_i, 0, obj);\n};\n\n\n/**\n * Inserts at the given index of the array, all elements of another array.\n * @param {goog.array.ArrayLike} arr The array to modify.\n * @param {goog.array.ArrayLike} elementsToAdd The array of elements to add.\n * @param {number=} opt_i The index at which to insert the object. If omitted,\n *      treated as 0. A negative index is counted from the end of the array.\n */\ngoog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {\n  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);\n};\n\n\n/**\n * Inserts an object into an array before a specified object.\n * @param {Array.<T>} arr The array to modify.\n * @param {T} obj The object to insert.\n * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2\n *     is omitted or not found, obj is inserted at the end of the array.\n * @template T\n */\ngoog.array.insertBefore = function(arr, obj, opt_obj2) {\n  var i;\n  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {\n    arr.push(obj);\n  } else {\n    goog.array.insertAt(arr, obj, i);\n  }\n};\n\n\n/**\n * Removes the first occurrence of a particular value from an array.\n * @param {goog.array.ArrayLike} arr Array from which to remove value.\n * @param {*} obj Object to remove.\n * @return {boolean} True if an element was removed.\n */\ngoog.array.remove = function(arr, obj) {\n  var i = goog.array.indexOf(arr, obj);\n  var rv;\n  if ((rv = i >= 0)) {\n    goog.array.removeAt(arr, i);\n  }\n  return rv;\n};\n\n\n/**\n * Removes from an array the element at index i\n * @param {goog.array.ArrayLike} arr Array or array like object from which to\n *     remove value.\n * @param {number} i The index to remove.\n * @return {boolean} True if an element was removed.\n */\ngoog.array.removeAt = function(arr, i) {\n  goog.asserts.assert(arr.length != null);\n\n  // use generic form of splice\n  // splice returns the removed items and if successful the length of that\n  // will be 1\n  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;\n};\n\n\n/**\n * Removes the first value that satisfies the given condition.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array\n *     like object over which to iterate.\n * @param {?function(this:S, T, number, ?) : boolean} f The function to call\n *     for every element. This function\n *     takes 3 arguments (the element, the index and the array) and should\n *     return a boolean.\n * @param {S=} opt_obj An optional \"this\" context for the function.\n * @return {boolean} True if an element was removed.\n * @template T,S\n */\ngoog.array.removeIf = function(arr, f, opt_obj) {\n  var i = goog.array.findIndex(arr, f, opt_obj);\n  if (i >= 0) {\n    goog.array.removeAt(arr, i);\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Returns a new array that is the result of joining the arguments.  If arrays\n * are passed then their items are added, however, if non-arrays are passed they\n * will be added to the return array as is.\n *\n * Note that ArrayLike objects will be added as is, rather than having their\n * items added.\n *\n * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]\n * goog.array.concat(0, [1, 2]) -> [0, 1, 2]\n * goog.array.concat([1, 2], null) -> [1, 2, null]\n *\n * There is bug in all current versions of IE (6, 7 and 8) where arrays created\n * in an iframe become corrupted soon (not immediately) after the iframe is\n * destroyed. This is common if loading data via goog.net.IframeIo, for example.\n * This corruption only affects the concat method which will start throwing\n * Catastrophic Errors (#-2147418113).\n *\n * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.\n *\n * Internally goog.array should use this, so that all methods will continue to\n * work on these broken array objects.\n *\n * @param {...*} var_args Items to concatenate.  Arrays will have each item\n *     added, while primitives and objects will be added as is.\n * @return {!Array} The new resultant array.\n */\ngoog.array.concat = function(var_args) {\n  return goog.array.ARRAY_PROTOTYPE_.concat.apply(\n      goog.array.ARRAY_PROTOTYPE_, arguments);\n};\n\n\n/**\n * Converts an object to an array.\n * @param {goog.array.ArrayLike} object  The object to convert to an array.\n * @return {!Array} The object converted into an array. If object has a\n *     length property, every property indexed with a non-negative number\n *     less than length will be included in the result. If object does not\n *     have a length property, an empty array will be returned.\n */\ngoog.array.toArray = function(object) {\n  var length = object.length;\n\n  // If length is not a number the following it false. This case is kept for\n  // backwards compatibility since there are callers that pass objects that are\n  // not array like.\n  if (length > 0) {\n    var rv = new Array(length);\n    for (var i = 0; i < length; i++) {\n      rv[i] = object[i];\n    }\n    return rv;\n  }\n  return [];\n};\n\n\n/**\n * Does a shallow copy of an array.\n * @param {goog.array.ArrayLike} arr  Array or array-like object to clone.\n * @return {!Array} Clone of the input array.\n */\ngoog.array.clone = goog.array.toArray;\n\n\n/**\n * Extends an array with another array, element, or \"array like\" object.\n * This function operates 'in-place', it does not create a new Array.\n *\n * Example:\n * var a = [];\n * goog.array.extend(a, [0, 1]);\n * a; // [0, 1]\n * goog.array.extend(a, 2);\n * a; // [0, 1, 2]\n *\n * @param {Array} arr1  The array to modify.\n * @param {...*} var_args The elements or arrays of elements to add to arr1.\n */\ngoog.array.extend = function(arr1, var_args) {\n  for (var i = 1; i < arguments.length; i++) {\n    var arr2 = arguments[i];\n    // If we have an Array or an Arguments object we can just call push\n    // directly.\n    var isArrayLike;\n    if (goog.isArray(arr2) ||\n        // Detect Arguments. ES5 says that the [[Class]] of an Arguments object\n        // is \"Arguments\" but only V8 and JSC/Safari gets this right. We instead\n        // detect Arguments by checking for array like and presence of \"callee\".\n        (isArrayLike = goog.isArrayLike(arr2)) &&\n            // The getter for callee throws an exception in strict mode\n            // according to section 10.6 in ES5 so check for presence instead.\n            Object.prototype.hasOwnProperty.call(arr2, 'callee')) {\n      arr1.push.apply(arr1, arr2);\n    } else if (isArrayLike) {\n      // Otherwise loop over arr2 to prevent copying the object.\n      var len1 = arr1.length;\n      var len2 = arr2.length;\n      for (var j = 0; j < len2; j++) {\n        arr1[len1 + j] = arr2[j];\n      }\n    } else {\n      arr1.push(arr2);\n    }\n  }\n};\n\n\n/**\n * Adds or removes elements from an array. This is a generic version of Array\n * splice. This means that it might work on other objects similar to arrays,\n * such as the arguments object.\n *\n * @param {goog.array.ArrayLike} arr The array to modify.\n * @param {number|undefined} index The index at which to start changing the\n *     array. If not defined, treated as 0.\n * @param {number} howMany How many elements to remove (0 means no removal. A\n *     value below 0 is treated as zero and so is any other non number. Numbers\n *     are floored).\n * @param {...*} var_args Optional, additional elements to insert into the\n *     array.\n * @return {!Array} the removed elements.\n */\ngoog.array.splice = function(arr, index, howMany, var_args) {\n  goog.asserts.assert(arr.length != null);\n\n  return goog.array.ARRAY_PROTOTYPE_.splice.apply(\n      arr, goog.array.slice(arguments, 1));\n};\n\n\n/**\n * Returns a new array from a segment of an array. This is a generic version of\n * Array slice. This means that it might work on other objects similar to\n * arrays, such as the arguments object.\n *\n * @param {Array.<T>|goog.array.ArrayLike} arr The array from\n * which to copy a segment.\n * @param {number} start The index of the first element to copy.\n * @param {number=} opt_end The index after the last element to copy.\n * @return {!Array.<T>} A new array containing the specified segment of the\n *     original array.\n * @template T\n */\ngoog.array.slice = function(arr, start, opt_end) {\n  goog.asserts.assert(arr.length != null);\n\n  // passing 1 arg to slice is not the same as passing 2 where the second is\n  // null or undefined (in that case the second argument is treated as 0).\n  // we could use slice on the arguments object and then use apply instead of\n  // testing the length\n  if (arguments.length <= 2) {\n    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);\n  } else {\n    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);\n  }\n};\n\n\n/**\n * Removes all duplicates from an array (retaining only the first\n * occurrence of each array element).  This function modifies the\n * array in place and doesn't change the order of the non-duplicate items.\n *\n * For objects, duplicates are identified as having the same unique ID as\n * defined by {@link goog.getUid}.\n *\n * Runtime: N,\n * Worstcase space: 2N (no dupes)\n *\n * @param {goog.array.ArrayLike} arr The array from which to remove duplicates.\n * @param {Array=} opt_rv An optional array in which to return the results,\n *     instead of performing the removal inplace.  If specified, the original\n *     array will remain unchanged.\n */\ngoog.array.removeDuplicates = function(arr, opt_rv) {\n  var returnArray = opt_rv || arr;\n\n  var seen = {}, cursorInsert = 0, cursorRead = 0;\n  while (cursorRead < arr.length) {\n    var current = arr[cursorRead++];\n\n    // Prefix each type with a single character representing the type to\n    // prevent conflicting keys (e.g. true and 'true').\n    var key = goog.isObject(current) ?\n        'o' + goog.getUid(current) :\n        (typeof current).charAt(0) + current;\n\n    if (!Object.prototype.hasOwnProperty.call(seen, key)) {\n      seen[key] = true;\n      returnArray[cursorInsert++] = current;\n    }\n  }\n  returnArray.length = cursorInsert;\n};\n\n\n/**\n * Searches the specified array for the specified target using the binary\n * search algorithm.  If no opt_compareFn is specified, elements are compared\n * using <code>goog.array.defaultCompare</code>, which compares the elements\n * using the built in < and > operators.  This will produce the expected\n * behavior for homogeneous arrays of String(s) and Number(s). The array\n * specified <b>must</b> be sorted in ascending order (as defined by the\n * comparison function).  If the array is not sorted, results are undefined.\n * If the array contains multiple instances of the specified target value, any\n * of these instances may be found.\n *\n * Runtime: O(log n)\n *\n * @param {goog.array.ArrayLike} arr The array to be searched.\n * @param {*} target The sought value.\n * @param {Function=} opt_compareFn Optional comparison function by which the\n *     array is ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n */\ngoog.array.binarySearch = function(arr, target, opt_compareFn) {\n  return goog.array.binarySearch_(arr,\n      opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,\n      target);\n};\n\n\n/**\n * Selects an index in the specified array using the binary search algorithm.\n * The evaluator receives an element and determines whether the desired index\n * is before, at, or after it.  The evaluator must be consistent (formally,\n * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)\n * must be monotonically non-increasing).\n *\n * Runtime: O(log n)\n *\n * @param {goog.array.ArrayLike} arr The array to be searched.\n * @param {Function} evaluator Evaluator function that receives 3 arguments\n *     (the element, the index and the array). Should return a negative number,\n *     zero, or a positive number depending on whether the desired index is\n *     before, at, or after the element passed to it.\n * @param {Object=} opt_obj The object to be used as the value of 'this'\n *     within evaluator.\n * @return {number} Index of the leftmost element matched by the evaluator, if\n *     such exists; otherwise (-(insertion point) - 1). The insertion point is\n *     the index of the first element for which the evaluator returns negative,\n *     or arr.length if no such element exists. The return value is non-negative\n *     iff a match is found.\n */\ngoog.array.binarySelect = function(arr, evaluator, opt_obj) {\n  return goog.array.binarySearch_(arr, evaluator, true /* isEvaluator */,\n      undefined /* opt_target */, opt_obj);\n};\n\n\n/**\n * Implementation of a binary search algorithm which knows how to use both\n * comparison functions and evaluators. If an evaluator is provided, will call\n * the evaluator with the given optional data object, conforming to the\n * interface defined in binarySelect. Otherwise, if a comparison function is\n * provided, will call the comparison function against the given data object.\n *\n * This implementation purposefully does not use goog.bind or goog.partial for\n * performance reasons.\n *\n * Runtime: O(log n)\n *\n * @param {goog.array.ArrayLike} arr The array to be searched.\n * @param {Function} compareFn Either an evaluator or a comparison function,\n *     as defined by binarySearch and binarySelect above.\n * @param {boolean} isEvaluator Whether the function is an evaluator or a\n *     comparison function.\n * @param {*=} opt_target If the function is a comparison function, then this is\n *     the target to binary search for.\n * @param {Object=} opt_selfObj If the function is an evaluator, this is an\n  *    optional this object for the evaluator.\n * @return {number} Lowest index of the target value if found, otherwise\n *     (-(insertion point) - 1). The insertion point is where the value should\n *     be inserted into arr to preserve the sorted property.  Return value >= 0\n *     iff target is found.\n * @private\n */\ngoog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target,\n    opt_selfObj) {\n  var left = 0;  // inclusive\n  var right = arr.length;  // exclusive\n  var found;\n  while (left < right) {\n    var middle = (left + right) >> 1;\n    var compareResult;\n    if (isEvaluator) {\n      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);\n    } else {\n      compareResult = compareFn(opt_target, arr[middle]);\n    }\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // We are looking for the lowest index so we can't return immediately.\n      found = !compareResult;\n    }\n  }\n  // left is the index if found, or the insertion point otherwise.\n  // ~left is a shorthand for -left - 1.\n  return found ? left : ~left;\n};\n\n\n/**\n * Sorts the specified array into ascending order.  If no opt_compareFn is\n * specified, elements are compared using\n * <code>goog.array.defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s), unlike the native sort,\n * but will give unpredictable results for heterogenous lists of strings and\n * numbers with different numbers of digits.\n *\n * This sort is not guaranteed to be stable.\n *\n * Runtime: Same as <code>Array.prototype.sort</code>\n *\n * @param {Array.<T>} arr The array to be sorted.\n * @param {?function(T,T):number=} opt_compareFn Optional comparison\n *     function by which the\n *     array is to be ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @template T\n */\ngoog.array.sort = function(arr, opt_compareFn) {\n  // TODO(arv): Update type annotation since null is not accepted.\n  goog.asserts.assert(arr.length != null);\n\n  goog.array.ARRAY_PROTOTYPE_.sort.call(\n      arr, opt_compareFn || goog.array.defaultCompare);\n};\n\n\n/**\n * Sorts the specified array into ascending order in a stable way.  If no\n * opt_compareFn is specified, elements are compared using\n * <code>goog.array.defaultCompare</code>, which compares the elements using\n * the built in < and > operators.  This will produce the expected behavior\n * for homogeneous arrays of String(s) and Number(s).\n *\n * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional\n * O(n) overhead of copying the array twice.\n *\n * @param {Array.<T>} arr The array to be sorted.\n * @param {?function(T, T): number=} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @template T\n */\ngoog.array.stableSort = function(arr, opt_compareFn) {\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = {index: i, value: arr[i]};\n  }\n  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;\n  function stableCompareFn(obj1, obj2) {\n    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;\n  };\n  goog.array.sort(arr, stableCompareFn);\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = arr[i].value;\n  }\n};\n\n\n/**\n * Sorts an array of objects by the specified object key and compare\n * function. If no compare function is provided, the key values are\n * compared in ascending order using <code>goog.array.defaultCompare</code>.\n * This won't work for keys that get renamed by the compiler. So use\n * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.\n * @param {Array.<Object>} arr An array of objects to sort.\n * @param {string} key The object key to sort by.\n * @param {Function=} opt_compareFn The function to use to compare key\n *     values.\n */\ngoog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {\n  var compare = opt_compareFn || goog.array.defaultCompare;\n  goog.array.sort(arr, function(a, b) {\n    return compare(a[key], b[key]);\n  });\n};\n\n\n/**\n * Tells if the array is sorted.\n * @param {!Array.<T>} arr The array.\n * @param {?function(T,T):number=} opt_compareFn Function to compare the\n *     array elements.\n *     Should take 2 arguments to compare, and return a negative number, zero,\n *     or a positive number depending on whether the first argument is less\n *     than, equal to, or greater than the second.\n * @param {boolean=} opt_strict If true no equal elements are allowed.\n * @return {boolean} Whether the array is sorted.\n * @template T\n */\ngoog.array.isSorted = function(arr, opt_compareFn, opt_strict) {\n  var compare = opt_compareFn || goog.array.defaultCompare;\n  for (var i = 1; i < arr.length; i++) {\n    var compareResult = compare(arr[i - 1], arr[i]);\n    if (compareResult > 0 || compareResult == 0 && opt_strict) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * Compares two arrays for equality. Two arrays are considered equal if they\n * have the same length and their corresponding elements are equal according to\n * the comparison function.\n *\n * @param {goog.array.ArrayLike} arr1 The first array to compare.\n * @param {goog.array.ArrayLike} arr2 The second array to compare.\n * @param {Function=} opt_equalsFn Optional comparison function.\n *     Should take 2 arguments to compare, and return true if the arguments\n *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which\n *     compares the elements using the built-in '===' operator.\n * @return {boolean} Whether the two arrays are equal.\n */\ngoog.array.equals = function(arr1, arr2, opt_equalsFn) {\n  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||\n      arr1.length != arr2.length) {\n    return false;\n  }\n  var l = arr1.length;\n  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;\n  for (var i = 0; i < l; i++) {\n    if (!equalsFn(arr1[i], arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @deprecated Use {@link goog.array.equals}.\n * @param {goog.array.ArrayLike} arr1 See {@link goog.array.equals}.\n * @param {goog.array.ArrayLike} arr2 See {@link goog.array.equals}.\n * @param {Function=} opt_equalsFn See {@link goog.array.equals}.\n * @return {boolean} See {@link goog.array.equals}.\n */\ngoog.array.compare = function(arr1, arr2, opt_equalsFn) {\n  return goog.array.equals(arr1, arr2, opt_equalsFn);\n};\n\n\n/**\n * 3-way array compare function.\n * @param {!goog.array.ArrayLike} arr1 The first array to compare.\n * @param {!goog.array.ArrayLike} arr2 The second array to compare.\n * @param {?function(?, ?): number=} opt_compareFn Optional comparison function\n *     by which the array is to be ordered. Should take 2 arguments to compare,\n *     and return a negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n * @return {number} Negative number, zero, or a positive number depending on\n *     whether the first argument is less than, equal to, or greater than the\n *     second.\n */\ngoog.array.compare3 = function(arr1, arr2, opt_compareFn) {\n  var compare = opt_compareFn || goog.array.defaultCompare;\n  var l = Math.min(arr1.length, arr2.length);\n  for (var i = 0; i < l; i++) {\n    var result = compare(arr1[i], arr2[i]);\n    if (result != 0) {\n      return result;\n    }\n  }\n  return goog.array.defaultCompare(arr1.length, arr2.length);\n};\n\n\n/**\n * Compares its two arguments for order, using the built in < and >\n * operators.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\ngoog.array.defaultCompare = function(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n};\n\n\n/**\n * Compares its two arguments for equality, using the built in === operator.\n * @param {*} a The first object to compare.\n * @param {*} b The second object to compare.\n * @return {boolean} True if the two arguments are equal, false otherwise.\n */\ngoog.array.defaultCompareEquality = function(a, b) {\n  return a === b;\n};\n\n\n/**\n * Inserts a value into a sorted array. The array is not modified if the\n * value is already present.\n * @param {Array.<T>} array The array to modify.\n * @param {T} value The object to insert.\n * @param {?function(T,T):number=} opt_compareFn Optional comparison function by\n *     which the\n *     array is ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {boolean} True if an element was inserted.\n * @template T\n */\ngoog.array.binaryInsert = function(array, value, opt_compareFn) {\n  var index = goog.array.binarySearch(array, value, opt_compareFn);\n  if (index < 0) {\n    goog.array.insertAt(array, value, -(index + 1));\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Removes a value from a sorted array.\n * @param {Array} array The array to modify.\n * @param {*} value The object to remove.\n * @param {Function=} opt_compareFn Optional comparison function by which the\n *     array is ordered. Should take 2 arguments to compare, and return a\n *     negative number, zero, or a positive number depending on whether the\n *     first argument is less than, equal to, or greater than the second.\n * @return {boolean} True if an element was removed.\n */\ngoog.array.binaryRemove = function(array, value, opt_compareFn) {\n  var index = goog.array.binarySearch(array, value, opt_compareFn);\n  return (index >= 0) ? goog.array.removeAt(array, index) : false;\n};\n\n\n/**\n * Splits an array into disjoint buckets according to a splitting function.\n * @param {Array.<T>} array The array.\n * @param {function(T,number,Array.<T>):?} sorter Function to call for every\n *     element.  This\n *     takes 3 arguments (the element, the index and the array) and must\n *     return a valid object key (a string, number, etc), or undefined, if\n *     that object should not be placed in a bucket.\n * @return {!Object} An object, with keys being all of the unique return values\n *     of sorter, and values being arrays containing the items for\n *     which the splitter returned that key.\n * @template T\n */\ngoog.array.bucket = function(array, sorter) {\n  var buckets = {};\n\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n    var key = sorter(value, i, array);\n    if (goog.isDef(key)) {\n      // Push the value to the right bucket, creating it if necessary.\n      var bucket = buckets[key] || (buckets[key] = []);\n      bucket.push(value);\n    }\n  }\n\n  return buckets;\n};\n\n\n/**\n * Creates a new object built from the provided array and the key-generation\n * function.\n * @param {Array.<T>|goog.array.ArrayLike} arr Array or array like object over\n *     which to iterate whose elements will be the values in the new object.\n * @param {?function(this:S, T, number, ?) : string} keyFunc The function to\n *     call for every element. This function takes 3 arguments (the element, the\n *     index and the array) and should return a string that will be used as the\n *     key for the element in the new object. If the function returns the same\n *     key for more than one element, the value for that key is\n *     implementation-defined.\n * @param {S=} opt_obj  The object to be used as the value of 'this'\n *     within keyFunc.\n * @return {!Object.<T>} The new object.\n * @template T,S\n */\ngoog.array.toObject = function(arr, keyFunc, opt_obj) {\n  var ret = {};\n  goog.array.forEach(arr, function(element, index) {\n    ret[keyFunc.call(opt_obj, element, index, arr)] = element;\n  });\n  return ret;\n};\n\n\n/**\n * Creates a range of numbers in an arithmetic progression.\n *\n * Range takes 1, 2, or 3 arguments:\n * <pre>\n * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]\n * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]\n * range(-2, -5, -1) produces [-2, -3, -4]\n * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.\n * </pre>\n *\n * @param {number} startOrEnd The starting value of the range if an end argument\n *     is provided. Otherwise, the start value is 0, and this is the end value.\n * @param {number=} opt_end The optional end value of the range.\n * @param {number=} opt_step The step size between range values. Defaults to 1\n *     if opt_step is undefined or 0.\n * @return {!Array.<number>} An array of numbers for the requested range. May be\n *     an empty array if adding the step would not converge toward the end\n *     value.\n */\ngoog.array.range = function(startOrEnd, opt_end, opt_step) {\n  var array = [];\n  var start = 0;\n  var end = startOrEnd;\n  var step = opt_step || 1;\n  if (opt_end !== undefined) {\n    start = startOrEnd;\n    end = opt_end;\n  }\n\n  if (step * (end - start) < 0) {\n    // Sign mismatch: start + step will never reach the end value.\n    return [];\n  }\n\n  if (step > 0) {\n    for (var i = start; i < end; i += step) {\n      array.push(i);\n    }\n  } else {\n    for (var i = start; i > end; i += step) {\n      array.push(i);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of the given value repeated N times.\n *\n * @param {*} value The value to repeat.\n * @param {number} n The repeat count.\n * @return {!Array} An array with the repeated value.\n */\ngoog.array.repeat = function(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n};\n\n\n/**\n * Returns an array consisting of every argument with all arrays\n * expanded in-place recursively.\n *\n * @param {...*} var_args The values to flatten.\n * @return {!Array} An array containing the flattened values.\n */\ngoog.array.flatten = function(var_args) {\n  var result = [];\n  for (var i = 0; i < arguments.length; i++) {\n    var element = arguments[i];\n    if (goog.isArray(element)) {\n      result.push.apply(result, goog.array.flatten.apply(null, element));\n    } else {\n      result.push(element);\n    }\n  }\n  return result;\n};\n\n\n/**\n * Rotates an array in-place. After calling this method, the element at\n * index i will be the element previously at index (i - n) %\n * array.length, for all values of i between 0 and array.length - 1,\n * inclusive.\n *\n * For example, suppose list comprises [t, a, n, k, s]. After invoking\n * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].\n *\n * @param {!Array.<T>} array The array to rotate.\n * @param {number} n The amount to rotate.\n * @return {!Array.<T>} The array.\n * @template T\n */\ngoog.array.rotate = function(array, n) {\n  goog.asserts.assert(array.length != null);\n\n  if (array.length) {\n    n %= array.length;\n    if (n > 0) {\n      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));\n    } else if (n < 0) {\n      goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));\n    }\n  }\n  return array;\n};\n\n\n/**\n * Creates a new array for which the element at position i is an array of the\n * ith element of the provided arrays.  The returned array will only be as long\n * as the shortest array provided; additional values are ignored.  For example,\n * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].\n *\n * This is similar to the zip() function in Python.  See {@link\n * http://docs.python.org/library/functions.html#zip}\n *\n * @param {...!goog.array.ArrayLike} var_args Arrays to be combined.\n * @return {!Array.<!Array>} A new array of arrays created from provided arrays.\n */\ngoog.array.zip = function(var_args) {\n  if (!arguments.length) {\n    return [];\n  }\n  var result = [];\n  for (var i = 0; true; i++) {\n    var value = [];\n    for (var j = 0; j < arguments.length; j++) {\n      var arr = arguments[j];\n      // If i is larger than the array length, this is the shortest array.\n      if (i >= arr.length) {\n        return result;\n      }\n      value.push(arr[i]);\n    }\n    result.push(value);\n  }\n};\n\n\n/**\n * Shuffles the values in the specified array using the Fisher-Yates in-place\n * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()\n * and so resets the state of that random number generator. Similarly, may reset\n * the state of the any other specified random number generator.\n *\n * Runtime: O(n)\n *\n * @param {!Array} arr The array to be shuffled.\n * @param {function():number=} opt_randFn Optional random function to use for\n *     shuffling.\n *     Takes no arguments, and returns a random number on the interval [0, 1).\n *     Defaults to Math.random() using JavaScript's built-in Math library.\n */\ngoog.array.shuffle = function(arr, opt_randFn) {\n  var randFn = opt_randFn || Math.random;\n\n  for (var i = arr.length - 1; i > 0; i--) {\n    // Choose a random array index in [0, i] (inclusive with i).\n    var j = Math.floor(randFn() * (i + 1));\n\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Wrapper class for handling XmlHttpRequests.\n *\n * One off requests can be sent through goog.net.XhrIo.send() or an\n * instance can be created to send multiple requests.  Each request uses its\n * own XmlHttpRequest object and handles clearing of the event callback to\n * ensure no leaks.\n *\n * XhrIo is event based, it dispatches events when a request finishes, fails or\n * succeeds or when the ready-state changes. The ready-state or timeout event\n * fires first, followed by a generic completed event. Then the abort, error,\n * or success event is fired as appropriate. Lastly, the ready event will fire\n * to indicate that the object may be used to make another request.\n *\n * The error event may also be called before completed and\n * ready-state-change if the XmlHttpRequest.open() or .send() methods throw.\n *\n * This class does not support multiple requests, queuing, or prioritization.\n *\n * Tested = IE6, FF1.5, Safari, Opera 8.5\n *\n * TODO(user): Error cases aren't playing nicely in Safari.\n *\n */\n\n\ngoog.provide('goog.net.XhrIo');\ngoog.provide('goog.net.XhrIo.ResponseType');\n\ngoog.require('goog.Timer');\ngoog.require('goog.array');\ngoog.require('goog.debug.Logger');\ngoog.require('goog.debug.entryPointRegistry');\ngoog.require('goog.events');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.json');\ngoog.require('goog.net.ErrorCode');\ngoog.require('goog.net.EventType');\ngoog.require('goog.net.HttpStatus');\ngoog.require('goog.net.XmlHttp');\ngoog.require('goog.object');\ngoog.require('goog.structs');\ngoog.require('goog.structs.Map');\ngoog.require('goog.uri.utils');\n\n\n\n/**\n * Basic class for handling XMLHttpRequests.\n * @param {goog.net.XmlHttpFactory=} opt_xmlHttpFactory Factory to use when\n *     creating XMLHttpRequest objects.\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.net.XhrIo = function(opt_xmlHttpFactory) {\n  goog.events.EventTarget.call(this);\n\n  /**\n   * Map of default headers to add to every request, use:\n   * XhrIo.headers.set(name, value)\n   * @type {goog.structs.Map}\n   */\n  this.headers = new goog.structs.Map();\n\n  /**\n   * Optional XmlHttpFactory\n   * @type {goog.net.XmlHttpFactory}\n   * @private\n   */\n  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;\n};\ngoog.inherits(goog.net.XhrIo, goog.events.EventTarget);\n\n\n/**\n * Response types that may be requested for XMLHttpRequests.\n * @enum {string}\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-responsetype-attribute\n */\ngoog.net.XhrIo.ResponseType = {\n  DEFAULT: '',\n  TEXT: 'text',\n  DOCUMENT: 'document',\n  // Not supported as of Chrome 10.0.612.1 dev\n  BLOB: 'blob',\n  ARRAY_BUFFER: 'arraybuffer'\n};\n\n\n/**\n * A reference to the XhrIo logger\n * @type {goog.debug.Logger}\n * @private\n */\ngoog.net.XhrIo.prototype.logger_ =\n    goog.debug.Logger.getLogger('goog.net.XhrIo');\n\n\n/**\n * The Content-Type HTTP header name\n * @type {string}\n */\ngoog.net.XhrIo.CONTENT_TYPE_HEADER = 'Content-Type';\n\n\n/**\n * The pattern matching the 'http' and 'https' URI schemes\n * @type {!RegExp}\n */\ngoog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;\n\n\n/**\n * The Content-Type HTTP header value for a url-encoded form\n * @type {string}\n */\ngoog.net.XhrIo.FORM_CONTENT_TYPE =\n    'application/x-www-form-urlencoded;charset=utf-8';\n\n\n/**\n * All non-disposed instances of goog.net.XhrIo created\n * by {@link goog.net.XhrIo.send} are in this Array.\n * @see goog.net.XhrIo.cleanup\n * @type {Array.<goog.net.XhrIo>}\n * @private\n */\ngoog.net.XhrIo.sendInstances_ = [];\n\n\n/**\n * Static send that creates a short lived instance of XhrIo to send the\n * request.\n * @see goog.net.XhrIo.cleanup\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {Function=} opt_callback Callback function for when request is\n *     complete.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|Blob|Document|FormData|GearsBlob|string=} opt_content\n *     Post data. This can be a Gears blob if the underlying HTTP request object\n *     is a Gears HTTP request.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n * @param {number=} opt_timeoutInterval Number of milliseconds after which an\n *     incomplete request will be aborted; 0 means no timeout is set.\n * @param {boolean=} opt_withCredentials Whether to send credentials with the\n *     request. Default to false. See {@link goog.net.XhrIo#setWithCredentials}.\n */\ngoog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content,\n                               opt_headers, opt_timeoutInterval,\n                               opt_withCredentials) {\n  var x = new goog.net.XhrIo();\n  goog.net.XhrIo.sendInstances_.push(x);\n  if (opt_callback) {\n    goog.events.listen(x, goog.net.EventType.COMPLETE, opt_callback);\n  }\n  goog.events.listen(x,\n                     goog.net.EventType.READY,\n                     goog.partial(goog.net.XhrIo.cleanupSend_, x));\n  if (opt_timeoutInterval) {\n    x.setTimeoutInterval(opt_timeoutInterval);\n  }\n  if (opt_withCredentials) {\n    x.setWithCredentials(opt_withCredentials);\n  }\n  x.send(url, opt_method, opt_content, opt_headers);\n};\n\n\n/**\n * Disposes all non-disposed instances of goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send}.\n * {@link goog.net.XhrIo.send} cleans up the goog.net.XhrIo instance\n * it creates when the request completes or fails.  However, if\n * the request never completes, then the goog.net.XhrIo is not disposed.\n * This can occur if the window is unloaded before the request completes.\n * We could have {@link goog.net.XhrIo.send} return the goog.net.XhrIo\n * it creates and make the client of {@link goog.net.XhrIo.send} be\n * responsible for disposing it in this case.  However, this makes things\n * significantly more complicated for the client, and the whole point\n * of {@link goog.net.XhrIo.send} is that it's simple and easy to use.\n * Clients of {@link goog.net.XhrIo.send} should call\n * {@link goog.net.XhrIo.cleanup} when doing final\n * cleanup on window unload.\n */\ngoog.net.XhrIo.cleanup = function() {\n  var instances = goog.net.XhrIo.sendInstances_;\n  while (instances.length) {\n    instances.pop().dispose();\n  }\n};\n\n\n/**\n * Installs exception protection for all entry point introduced by\n * goog.net.XhrIo instances which are not protected by\n * {@link goog.debug.ErrorHandler#protectWindowSetTimeout},\n * {@link goog.debug.ErrorHandler#protectWindowSetInterval}, or\n * {@link goog.events.protectBrowserEventEntryPoint}.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point(s).\n */\ngoog.net.XhrIo.protectEntryPoints = function(errorHandler) {\n  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n      errorHandler.protectEntryPoint(\n          goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n};\n\n\n/**\n * Disposes of the specified goog.net.XhrIo created by\n * {@link goog.net.XhrIo.send} and removes it from\n * {@link goog.net.XhrIo.pendingStaticSendInstances_}.\n * @param {goog.net.XhrIo} XhrIo An XhrIo created by\n *     {@link goog.net.XhrIo.send}.\n * @private\n */\ngoog.net.XhrIo.cleanupSend_ = function(XhrIo) {\n  XhrIo.dispose();\n  goog.array.remove(goog.net.XhrIo.sendInstances_, XhrIo);\n};\n\n\n/**\n * Whether XMLHttpRequest is active.  A request is active from the time send()\n * is called until onReadyStateChange() is complete, or error() or abort()\n * is called.\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.active_ = false;\n\n\n/**\n * Reference to an XMLHttpRequest object that is being used for the transfer.\n * @type {XMLHttpRequest|GearsHttpRequest}\n * @private\n */\ngoog.net.XhrIo.prototype.xhr_ = null;\n\n\n/**\n * The options to use with the current XMLHttpRequest object.\n * @type {Object}\n * @private\n */\ngoog.net.XhrIo.prototype.xhrOptions_ = null;\n\n\n/**\n * Last URL that was requested.\n * @type {string|goog.Uri}\n * @private\n */\ngoog.net.XhrIo.prototype.lastUri_ = '';\n\n\n/**\n * Method for the last request.\n * @type {string}\n * @private\n */\ngoog.net.XhrIo.prototype.lastMethod_ = '';\n\n\n/**\n * Last error code.\n * @type {goog.net.ErrorCode}\n * @private\n */\ngoog.net.XhrIo.prototype.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n\n\n/**\n * Last error message.\n * @type {Error|string}\n * @private\n */\ngoog.net.XhrIo.prototype.lastError_ = '';\n\n\n/**\n * This is used to ensure that we don't dispatch an multiple ERROR events. This\n * can happen in IE when it does a synchronous load and one error is handled in\n * the ready statte change and one is handled due to send() throwing an\n * exception.\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.errorDispatched_ = false;\n\n\n/**\n * Used to make sure we don't fire the complete event from inside a send call.\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.inSend_ = false;\n\n\n/**\n * Used in determining if a call to {@link #onReadyStateChange_} is from within\n * a call to this.xhr_.open.\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.inOpen_ = false;\n\n\n/**\n * Used in determining if a call to {@link #onReadyStateChange_} is from within\n * a call to this.xhr_.abort.\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.inAbort_ = false;\n\n\n/**\n * Number of milliseconds after which an incomplete request will be aborted and\n * a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no timeout is set.\n * @type {number}\n * @private\n */\ngoog.net.XhrIo.prototype.timeoutInterval_ = 0;\n\n\n/**\n * Window timeout ID used to cancel the timeout event handler if the request\n * completes successfully.\n * @type {Object}\n * @private\n */\ngoog.net.XhrIo.prototype.timeoutId_ = null;\n\n\n/**\n * The requested type for the response. The empty string means use the default\n * XHR behavior.\n * @type {goog.net.XhrIo.ResponseType}\n * @private\n */\ngoog.net.XhrIo.prototype.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;\n\n\n/**\n * Whether a \"credentialed\" request is to be sent (one that is aware of cookies\n * and authentication) . This is applicable only for cross-domain requests and\n * more recent browsers that support this part of the HTTP Access Control\n * standard.\n *\n * @see http://www.w3.org/TR/XMLHttpRequest/#the-withcredentials-attribute\n *\n * @type {boolean}\n * @private\n */\ngoog.net.XhrIo.prototype.withCredentials_ = false;\n\n\n/**\n * Returns the number of milliseconds after which an incomplete request will be\n * aborted, or 0 if no timeout is set.\n * @return {number} Timeout interval in milliseconds.\n */\ngoog.net.XhrIo.prototype.getTimeoutInterval = function() {\n  return this.timeoutInterval_;\n};\n\n\n/**\n * Sets the number of milliseconds after which an incomplete request will be\n * aborted and a {@link goog.net.EventType.TIMEOUT} event raised; 0 means no\n * timeout is set.\n * @param {number} ms Timeout interval in milliseconds; 0 means none.\n */\ngoog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {\n  this.timeoutInterval_ = Math.max(0, ms);\n};\n\n\n/**\n * Sets the desired type for the response. At time of writing, this is only\n * supported in very recent versions of WebKit (10.0.612.1 dev and later).\n *\n * If this is used, the response may only be accessed via {@link #getResponse}.\n *\n * @param {goog.net.XhrIo.ResponseType} type The desired type for the response.\n */\ngoog.net.XhrIo.prototype.setResponseType = function(type) {\n  this.responseType_ = type;\n};\n\n\n/**\n * Gets the desired type for the response.\n * @return {goog.net.XhrIo.ResponseType} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getResponseType = function() {\n  return this.responseType_;\n};\n\n\n/**\n * Sets whether a \"credentialed\" request that is aware of cookie and\n * authentication information should be made. This option is only supported by\n * browsers that support HTTP Access Control. As of this writing, this option\n * is not supported in IE.\n *\n * @param {boolean} withCredentials Whether this should be a \"credentialed\"\n *     request.\n */\ngoog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {\n  this.withCredentials_ = withCredentials;\n};\n\n\n/**\n * Gets whether a \"credentialed\" request is to be sent.\n * @return {boolean} The desired type for the response.\n */\ngoog.net.XhrIo.prototype.getWithCredentials = function() {\n  return this.withCredentials_;\n};\n\n\n/**\n * Instance send that actually uses XMLHttpRequest to make a server call.\n * @param {string|goog.Uri} url Uri to make request to.\n * @param {string=} opt_method Send method, default: GET.\n * @param {ArrayBuffer|Blob|Document|FormData|GearsBlob|string=} opt_content\n *     Post data. This can be a Gears blob if the underlying HTTP request object\n *     is a Gears HTTP request.\n * @param {Object|goog.structs.Map=} opt_headers Map of headers to add to the\n *     request.\n */\ngoog.net.XhrIo.prototype.send = function(url, opt_method, opt_content,\n                                         opt_headers) {\n  if (this.xhr_) {\n    throw Error('[goog.net.XhrIo] Object is active with another request=' +\n        this.lastUri_ + '; newUri=' + url);\n  }\n\n  var method = opt_method ? opt_method.toUpperCase() : 'GET';\n\n  this.lastUri_ = url;\n  this.lastError_ = '';\n  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;\n  this.lastMethod_ = method;\n  this.errorDispatched_ = false;\n  this.active_ = true;\n\n  // Use the factory to create the XHR object and options\n  this.xhr_ = this.createXhr();\n  this.xhrOptions_ = this.xmlHttpFactory_ ?\n      this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();\n\n  // Set up the onreadystatechange callback\n  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);\n\n  /**\n   * Try to open the XMLHttpRequest (always async), if an error occurs here it\n   * is generally permission denied\n   * @preserveTry\n   */\n  try {\n    this.logger_.fine(this.formatMsg_('Opening Xhr'));\n    this.inOpen_ = true;\n    this.xhr_.open(method, url, true);  // Always async!\n    this.inOpen_ = false;\n  } catch (err) {\n    this.logger_.fine(this.formatMsg_('Error opening Xhr: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n    return;\n  }\n\n  // We can't use null since this won't allow POSTs to have a content length\n  // specified which will cause some proxies to return a 411 error.\n  var content = opt_content || '';\n\n  var headers = this.headers.clone();\n\n  // Add headers specific to this request\n  if (opt_headers) {\n    goog.structs.forEach(opt_headers, function(value, key) {\n      headers.set(key, value);\n    });\n  }\n\n  // Find whether a content type header is set, ignoring case.\n  // HTTP header names are case-insensitive.  See:\n  // http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n  var contentTypeKey = goog.array.find(headers.getKeys(),\n      goog.net.XhrIo.isContentTypeHeader_);\n\n  var contentIsFormData = (goog.global['FormData'] &&\n      (content instanceof goog.global['FormData']));\n  if (method == 'POST' && !contentTypeKey && !contentIsFormData) {\n    // For POST requests, default to the url-encoded form content type\n    // unless this is a FormData request.  For FormData, the browser will\n    // automatically add a multipart/form-data content type with an appropriate\n    // multipart boundary.\n    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER,\n                goog.net.XhrIo.FORM_CONTENT_TYPE);\n  }\n\n  // Add the headers to the Xhr object\n  goog.structs.forEach(headers, function(value, key) {\n    this.xhr_.setRequestHeader(key, value);\n  }, this);\n\n  if (this.responseType_) {\n    this.xhr_.responseType = this.responseType_;\n  }\n\n  if (goog.object.containsKey(this.xhr_, 'withCredentials')) {\n    this.xhr_.withCredentials = this.withCredentials_;\n  }\n\n  /**\n   * Try to send the request, or other wise report an error (404 not found).\n   * @preserveTry\n   */\n  try {\n    if (this.timeoutId_) {\n      // This should never happen, since the if (this.active_) above shouldn't\n      // let execution reach this point if there is a request in progress...\n      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);\n      this.timeoutId_ = null;\n    }\n    if (this.timeoutInterval_ > 0) {\n      this.logger_.fine(this.formatMsg_('Will abort after ' +\n          this.timeoutInterval_ + 'ms if incomplete'));\n      this.timeoutId_ = goog.Timer.defaultTimerObject.setTimeout(\n          goog.bind(this.timeout_, this), this.timeoutInterval_);\n    }\n    this.logger_.fine(this.formatMsg_('Sending request'));\n    this.inSend_ = true;\n    this.xhr_.send(content);\n    this.inSend_ = false;\n\n  } catch (err) {\n    this.logger_.fine(this.formatMsg_('Send error: ' + err.message));\n    this.error_(goog.net.ErrorCode.EXCEPTION, err);\n  }\n};\n\n\n/**\n * @param {string} header An HTTP header key.\n * @return {boolean} Whether the key is a content type header (ignoring\n *     case.\n * @private\n */\ngoog.net.XhrIo.isContentTypeHeader_ = function(header) {\n  return goog.string.caseInsensitiveEquals(\n      goog.net.XhrIo.CONTENT_TYPE_HEADER, header);\n};\n\n\n/**\n * Creates a new XHR object.\n * @return {XMLHttpRequest|GearsHttpRequest} The newly created XHR object.\n * @protected\n */\ngoog.net.XhrIo.prototype.createXhr = function() {\n  return this.xmlHttpFactory_ ?\n      this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();\n};\n\n\n/**\n * The request didn't complete after {@link goog.net.XhrIo#timeoutInterval_}\n * milliseconds; raises a {@link goog.net.EventType.TIMEOUT} event and aborts\n * the request.\n * @private\n */\ngoog.net.XhrIo.prototype.timeout_ = function() {\n  if (typeof goog == 'undefined') {\n    // If goog is undefined then the callback has occurred as the application\n    // is unloading and will error.  Thus we let it silently fail.\n  } else if (this.xhr_) {\n    this.lastError_ = 'Timed out after ' + this.timeoutInterval_ +\n                      'ms, aborting';\n    this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;\n    this.logger_.fine(this.formatMsg_(this.lastError_));\n    this.dispatchEvent(goog.net.EventType.TIMEOUT);\n    this.abort(goog.net.ErrorCode.TIMEOUT);\n  }\n};\n\n\n/**\n * Something errorred, so inactivate, fire error callback and clean up\n * @param {goog.net.ErrorCode} errorCode The error code.\n * @param {Error} err The error object.\n * @private\n */\ngoog.net.XhrIo.prototype.error_ = function(errorCode, err) {\n  this.active_ = false;\n  if (this.xhr_) {\n    this.inAbort_ = true;\n    this.xhr_.abort();  // Ensures XHR isn't hung (FF)\n    this.inAbort_ = false;\n  }\n  this.lastError_ = err;\n  this.lastErrorCode_ = errorCode;\n  this.dispatchErrors_();\n  this.cleanUpXhr_();\n};\n\n\n/**\n * Dispatches COMPLETE and ERROR in case of an error. This ensures that we do\n * not dispatch multiple error events.\n * @private\n */\ngoog.net.XhrIo.prototype.dispatchErrors_ = function() {\n  if (!this.errorDispatched_) {\n    this.errorDispatched_ = true;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ERROR);\n  }\n};\n\n\n/**\n * Abort the current XMLHttpRequest\n * @param {goog.net.ErrorCode=} opt_failureCode Optional error code to use -\n *     defaults to ABORT.\n */\ngoog.net.XhrIo.prototype.abort = function(opt_failureCode) {\n  if (this.xhr_ && this.active_) {\n    this.logger_.fine(this.formatMsg_('Aborting'));\n    this.active_ = false;\n    this.inAbort_ = true;\n    this.xhr_.abort();\n    this.inAbort_ = false;\n    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;\n    this.dispatchEvent(goog.net.EventType.COMPLETE);\n    this.dispatchEvent(goog.net.EventType.ABORT);\n    this.cleanUpXhr_();\n  }\n};\n\n\n/**\n * Nullifies all callbacks to reduce risks of leaks.\n * @override\n * @protected\n */\ngoog.net.XhrIo.prototype.disposeInternal = function() {\n  if (this.xhr_) {\n    // We explicitly do not call xhr_.abort() unless active_ is still true.\n    // This is to avoid unnecessarily aborting a successful request when\n    // dispose() is called in a callback triggered by a complete response, but\n    // in which browser cleanup has not yet finished.\n    // (See http://b/issue?id=1684217.)\n    if (this.active_) {\n      this.active_ = false;\n      this.inAbort_ = true;\n      this.xhr_.abort();\n      this.inAbort_ = false;\n    }\n    this.cleanUpXhr_(true);\n  }\n\n  goog.net.XhrIo.superClass_.disposeInternal.call(this);\n};\n\n\n/**\n * Internal handler for the XHR object's readystatechange event.  This method\n * checks the status and the readystate and fires the correct callbacks.\n * If the request has ended, the handlers are cleaned up and the XHR object is\n * nullified.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChange_ = function() {\n  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {\n    // Were not being called from within a call to this.xhr_.send\n    // this.xhr_.abort, or this.xhr_.open, so this is an entry point\n    this.onReadyStateChangeEntryPoint_();\n  } else {\n    this.onReadyStateChangeHelper_();\n  }\n};\n\n\n/**\n * Used to protect the onreadystatechange handler entry point.  Necessary\n * as {#onReadyStateChange_} maybe called from within send or abort, this\n * method is only called when {#onReadyStateChange_} is called as an\n * entry point.\n * {@see #protectEntryPoints}\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {\n  this.onReadyStateChangeHelper_();\n};\n\n\n/**\n * Helper for {@link #onReadyStateChange_}.  This is used so that\n * entry point calls to {@link #onReadyStateChange_} can be routed through\n * {@link #onReadyStateChangeEntryPoint_}.\n * @private\n */\ngoog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {\n  if (!this.active_) {\n    // can get called inside abort call\n    return;\n  }\n\n  if (typeof goog == 'undefined') {\n    // NOTE(user): If goog is undefined then the callback has occurred as the\n    // application is unloading and will error.  Thus we let it silently fail.\n\n  } else if (\n      this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] &&\n      this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE &&\n      this.getStatus() == 2) {\n    // NOTE(user): In IE if send() errors on a *local* request the readystate\n    // is still changed to COMPLETE.  We need to ignore it and allow the\n    // try/catch around send() to pick up the error.\n    this.logger_.fine(this.formatMsg_(\n        'Local request error detected and ignored'));\n\n  } else {\n\n    // In IE when the response has been cached we sometimes get the callback\n    // from inside the send call and this usually breaks code that assumes that\n    // XhrIo is asynchronous.  If that is the case we delay the callback\n    // using a timer.\n    if (this.inSend_ &&\n        this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {\n      goog.Timer.defaultTimerObject.setTimeout(\n          goog.bind(this.onReadyStateChange_, this), 0);\n      return;\n    }\n\n    this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);\n\n    // readyState indicates the transfer has finished\n    if (this.isComplete()) {\n      this.logger_.fine(this.formatMsg_('Request complete'));\n\n      this.active_ = false;\n\n      try {\n        // Call the specific callbacks for success or failure. Only call the\n        // success if the status is 200 (HTTP_OK) or 304 (HTTP_CACHED)\n        if (this.isSuccess()) {\n          this.dispatchEvent(goog.net.EventType.COMPLETE);\n          this.dispatchEvent(goog.net.EventType.SUCCESS);\n        } else {\n          this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;\n          this.lastError_ =\n              this.getStatusText() + ' [' + this.getStatus() + ']';\n          this.dispatchErrors_();\n        }\n      } finally {\n        this.cleanUpXhr_();\n      }\n    }\n  }\n};\n\n\n/**\n * Remove the listener to protect against leaks, and nullify the XMLHttpRequest\n * object.\n * @param {boolean=} opt_fromDispose If this is from the dispose (don't want to\n *     fire any events).\n * @private\n */\ngoog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {\n  if (this.xhr_) {\n    // Save reference so we can mark it as closed after the READY event.  The\n    // READY event may trigger another request, thus we must nullify this.xhr_\n    var xhr = this.xhr_;\n    var clearedOnReadyStateChange =\n        this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ?\n            goog.nullFunction : null;\n    this.xhr_ = null;\n    this.xhrOptions_ = null;\n\n    if (this.timeoutId_) {\n      // Cancel any pending timeout event handler.\n      goog.Timer.defaultTimerObject.clearTimeout(this.timeoutId_);\n      this.timeoutId_ = null;\n    }\n\n    if (!opt_fromDispose) {\n      this.dispatchEvent(goog.net.EventType.READY);\n    }\n\n    try {\n      // NOTE(user): Not nullifying in FireFox can still leak if the callbacks\n      // are defined in the same scope as the instance of XhrIo. But, IE doesn't\n      // allow you to set the onreadystatechange to NULL so nullFunction is\n      // used.\n      xhr.onreadystatechange = clearedOnReadyStateChange;\n    } catch (e) {\n      // This seems to occur with a Gears HTTP request. Delayed the setting of\n      // this onreadystatechange until after READY is sent out and catching the\n      // error to see if we can track down the problem.\n      this.logger_.severe('Problem encountered resetting onreadystatechange: ' +\n                          e.message);\n    }\n  }\n};\n\n\n/**\n * @return {boolean} Whether there is an active request.\n */\ngoog.net.XhrIo.prototype.isActive = function() {\n  return !!this.xhr_;\n};\n\n\n/**\n * @return {boolean} Whether the request has completed.\n */\ngoog.net.XhrIo.prototype.isComplete = function() {\n  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;\n};\n\n\n/**\n * @return {boolean} Whether the request completed with a success.\n */\ngoog.net.XhrIo.prototype.isSuccess = function() {\n  var status = this.getStatus();\n  // A zero status code is considered successful for local files.\n  return goog.net.HttpStatus.isSuccess(status) ||\n      status === 0 && !this.isLastUriEffectiveSchemeHttp_();\n};\n\n\n/**\n * @return {boolean} whether the effective scheme of the last URI that was\n *     fetched was 'http' or 'https'.\n * @private\n */\ngoog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {\n  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));\n  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);\n};\n\n\n/**\n * Get the readystate from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {goog.net.XmlHttp.ReadyState} goog.net.XmlHttp.ReadyState.*.\n */\ngoog.net.XhrIo.prototype.getReadyState = function() {\n  return this.xhr_ ?\n      /** @type {goog.net.XmlHttp.ReadyState} */ (this.xhr_.readyState) :\n      goog.net.XmlHttp.ReadyState.UNINITIALIZED;\n};\n\n\n/**\n * Get the status from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {number} Http status.\n */\ngoog.net.XhrIo.prototype.getStatus = function() {\n  /**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is recieving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   * @preserveTry\n   */\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.status : -1;\n  } catch (e) {\n    this.logger_.warning('Can not get status: ' + e.message);\n    return -1;\n  }\n};\n\n\n/**\n * Get the status text from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @return {string} Status text.\n */\ngoog.net.XhrIo.prototype.getStatusText = function() {\n  /**\n   * IE doesn't like you checking status until the readystate is greater than 2\n   * (i.e. it is recieving or complete).  The try/catch is used for when the\n   * page is unloading and an ERROR_NOT_AVAILABLE may occur when accessing xhr_.\n   * @preserveTry\n   */\n  try {\n    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ?\n        this.xhr_.statusText : '';\n  } catch (e) {\n    this.logger_.fine('Can not get status: ' + e.message);\n    return '';\n  }\n};\n\n\n/**\n * Get the last Uri that was requested\n * @return {string} Last Uri.\n */\ngoog.net.XhrIo.prototype.getLastUri = function() {\n  return String(this.lastUri_);\n};\n\n\n/**\n * Get the response text from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {string} Result from the server, or '' if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseText = function() {\n  /** @preserveTry */\n  try {\n    return this.xhr_ ? this.xhr_.responseText : '';\n  } catch (e) {\n    // http://www.w3.org/TR/XMLHttpRequest/#the-responsetext-attribute\n    // states that responseText should return '' (and responseXML null)\n    // when the state is not LOADING or DONE. Instead, IE and Gears can\n    // throw unexpected exceptions, for example when a request is aborted\n    // or no data is available yet.\n    this.logger_.fine('Can not get responseText: ' + e.message);\n    return '';\n  }\n};\n\n\n/**\n * Get the response body from the Xhr object. This property is only available\n * in IE since version 7 according to MSDN:\n * http://msdn.microsoft.com/en-us/library/ie/ms534368(v=vs.85).aspx\n * Will only return correct result when called from the context of a callback.\n *\n * One option is to construct a VBArray from the returned object and convert\n * it to a JavaScript array using the toArray method:\n * {@code (new window['VBArray'](xhrIo.getResponseBody())).toArray()}\n * This will result in an array of numbers in the range of [0..255]\n *\n * Another option is to use the VBScript CStr method to convert it into a\n * string as outlined in http://stackoverflow.com/questions/1919972\n *\n * @return {Object} Binary result from the server or null if not available.\n */\ngoog.net.XhrIo.prototype.getResponseBody = function() {\n  /** @preserveTry */\n  try {\n    if (this.xhr_ && 'responseBody' in this.xhr_) {\n      return this.xhr_['responseBody'];\n    }\n  } catch (e) {\n    // IE can throw unexpected exceptions, for example when a request is aborted\n    // or no data is yet available.\n    this.logger_.fine('Can not get responseBody: ' + e.message);\n  }\n  return null;\n};\n\n\n/**\n * Get the response XML from the Xhr object\n * Will only return correct result when called from the context of a callback.\n * @return {Document} The DOM Document representing the XML file, or null\n * if no result available.\n */\ngoog.net.XhrIo.prototype.getResponseXml = function() {\n  /** @preserveTry */\n  try {\n    return this.xhr_ ? this.xhr_.responseXML : null;\n  } catch (e) {\n    this.logger_.fine('Can not get responseXML: ' + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the response and evaluates it as JSON from the Xhr object\n * Will only return correct result when called from the context of a callback\n * @param {string=} opt_xssiPrefix Optional XSSI prefix string to use for\n *     stripping of the response before parsing. This needs to be set only if\n *     your backend server prepends the same prefix string to the JSON response.\n * @return {Object|undefined} JavaScript object.\n */\ngoog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {\n  if (!this.xhr_) {\n    return undefined;\n  }\n\n  var responseText = this.xhr_.responseText;\n  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {\n    responseText = responseText.substring(opt_xssiPrefix.length);\n  }\n\n  return goog.json.parse(responseText);\n};\n\n\n/**\n * Get the response as the type specificed by {@link #setResponseType}. At time\n * of writing, this is only directly supported in very recent versions of WebKit\n * (10.0.612.1 dev and later). If the field is not supported directly, we will\n * try to emulate it.\n *\n * Emulating the response means following the rules laid out at\n * http://www.w3.org/TR/XMLHttpRequest/#the-response-attribute\n *\n * On browsers with no support for this (Chrome < 10, Firefox < 4, etc), only\n * response types of DEFAULT or TEXT may be used, and the response returned will\n * be the text response.\n *\n * On browsers with Mozilla's draft support for array buffers (Firefox 4, 5),\n * only response types of DEFAULT, TEXT, and ARRAY_BUFFER may be used, and the\n * response returned will be either the text response or the Mozilla\n * implementation of the array buffer response.\n *\n * On browsers will full support, any valid response type supported by the\n * browser may be used, and the response provided by the browser will be\n * returned.\n *\n * @return {*} The response.\n */\ngoog.net.XhrIo.prototype.getResponse = function() {\n  /** @preserveTry */\n  try {\n    if (!this.xhr_) {\n      return null;\n    }\n    if ('response' in this.xhr_) {\n      return this.xhr_.response;\n    }\n    switch (this.responseType_) {\n      case goog.net.XhrIo.ResponseType.DEFAULT:\n      case goog.net.XhrIo.ResponseType.TEXT:\n        return this.xhr_.responseText;\n        // DOCUMENT and BLOB don't need to be handled here because they are\n        // introduced in the same spec that adds the .response field, and would\n        // have been caught above.\n        // ARRAY_BUFFER needs an implementation for Firefox 4, where it was\n        // implemented using a draft spec rather than the final spec.\n      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:\n        if ('mozResponseArrayBuffer' in this.xhr_) {\n          return this.xhr_.mozResponseArrayBuffer;\n        }\n    }\n    // Fell through to a response type that is not supported on this browser.\n    this.logger_.severe('Response type ' + this.responseType_ + ' is not ' +\n                        'supported on this browser');\n    return null;\n  } catch (e) {\n    this.logger_.fine('Can not get response: ' + e.message);\n    return null;\n  }\n};\n\n\n/**\n * Get the value of the response-header with the given name from the Xhr object\n * Will only return correct result when called from the context of a callback\n * and the request has completed\n * @param {string} key The name of the response-header to retrieve.\n * @return {string|undefined} The value of the response-header named key.\n */\ngoog.net.XhrIo.prototype.getResponseHeader = function(key) {\n  return this.xhr_ && this.isComplete() ?\n      this.xhr_.getResponseHeader(key) : undefined;\n};\n\n\n/**\n * Gets the text of all the headers in the response.\n * Will only return correct result when called from the context of a callback\n * and the request has completed.\n * @return {string} The value of the response headers or empty string.\n */\ngoog.net.XhrIo.prototype.getAllResponseHeaders = function() {\n  return this.xhr_ && this.isComplete() ?\n      this.xhr_.getAllResponseHeaders() : '';\n};\n\n\n/**\n * Get the last error message\n * @return {goog.net.ErrorCode} Last error code.\n */\ngoog.net.XhrIo.prototype.getLastErrorCode = function() {\n  return this.lastErrorCode_;\n};\n\n\n/**\n * Get the last error message\n * @return {string} Last error message.\n */\ngoog.net.XhrIo.prototype.getLastError = function() {\n  return goog.isString(this.lastError_) ? this.lastError_ :\n      String(this.lastError_);\n};\n\n\n/**\n * Adds the last method, status and URI to the message.  This is used to add\n * this information to the logging calls.\n * @param {string} msg The message text that we want to add the extra text to.\n * @return {string} The message with the extra text appended.\n * @private\n */\ngoog.net.XhrIo.prototype.formatMsg_ = function(msg) {\n  return msg + ' [' + this.lastMethod_ + ' ' + this.lastUri_ + ' ' +\n      this.getStatus() + ']';\n};\n\n\n// Register the xhr handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ =\n          transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);\n    });\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A base class for event objects.\n *\n */\n\n\ngoog.provide('goog.events.Event');\ngoog.provide('goog.events.EventLike');\n\n// goog.events.Event no longer depends on goog.Disposable. Keep requiring\n// goog.Disposable here to not break projects which assume this dependency.\ngoog.require('goog.Disposable');\n\n\n/**\n * A typedef for event like objects that are dispatchable via the\n * goog.events.dispatchEvent function. strings are treated as the type for a\n * goog.events.Event. Objects are treated as an extension of a new\n * goog.events.Event with the type property of the object being used as the type\n * of the Event.\n * @typedef {string|Object|goog.events.Event}\n */\ngoog.events.EventLike;\n\n\n\n/**\n * A base class for event objects, so that they can support preventDefault and\n * stopPropagation.\n *\n * @param {string} type Event Type.\n * @param {Object=} opt_target Reference to the object that is the target of\n *     this event. It has to implement the {@code EventTarget} interface\n *     declared at {@link http://developer.mozilla.org/en/DOM/EventTarget}.\n * @constructor\n */\ngoog.events.Event = function(type, opt_target) {\n  /**\n   * Event type.\n   * @type {string}\n   */\n  this.type = type;\n\n  /**\n   * Target of the event.\n   * @type {Object|undefined}\n   */\n  this.target = opt_target;\n\n  /**\n   * Object that had the listener attached.\n   * @type {Object|undefined}\n   */\n  this.currentTarget = this.target;\n};\n\n\n/**\n * For backwards compatibility (goog.events.Event used to inherit\n * goog.Disposable).\n * @deprecated Events don't need to be disposed.\n */\ngoog.events.Event.prototype.disposeInternal = function() {\n};\n\n\n/**\n * For backwards compatibility (goog.events.Event used to inherit\n * goog.Disposable).\n * @deprecated Events don't need to be disposed.\n */\ngoog.events.Event.prototype.dispose = function() {\n};\n\n\n/**\n * Whether to cancel the event in internal capture/bubble processing for IE.\n * @type {boolean}\n * @suppress {underscore} Technically public, but referencing this outside\n *     this package is strongly discouraged.\n */\ngoog.events.Event.prototype.propagationStopped_ = false;\n\n\n/**\n * Whether the default action has been prevented.\n * This is a property to match the W3C specification at {@link\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-event-type-defaultPrevented}.\n * Must be treated as read-only outside the class.\n * @type {boolean}\n */\ngoog.events.Event.prototype.defaultPrevented = false;\n\n\n/**\n * Return value for in internal capture/bubble processing for IE.\n * @type {boolean}\n * @suppress {underscore} Technically public, but referencing this outside\n *     this package is strongly discouraged.\n */\ngoog.events.Event.prototype.returnValue_ = true;\n\n\n/**\n * Stops event propagation.\n */\ngoog.events.Event.prototype.stopPropagation = function() {\n  this.propagationStopped_ = true;\n};\n\n\n/**\n * Prevents the default action, for example a link redirecting to a url.\n */\ngoog.events.Event.prototype.preventDefault = function() {\n  this.defaultPrevented = true;\n  this.returnValue_ = false;\n};\n\n\n/**\n * Stops the propagation of the event. It is equivalent to\n * {@code e.stopPropagation()}, but can be used as the callback argument of\n * {@link goog.events.listen} without declaring another function.\n * @param {!goog.events.Event} e An event.\n */\ngoog.events.Event.stopPropagation = function(e) {\n  e.stopPropagation();\n};\n\n\n/**\n * Prevents the default action. It is equivalent to\n * {@code e.preventDefault()}, but can be used as the callback argument of\n * {@link goog.events.listen} without declaring another function.\n * @param {!goog.events.Event} e An event.\n */\ngoog.events.Event.preventDefault = function(e) {\n  e.preventDefault();\n};\n",
		"// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Useful compiler idioms.\n *\n */\n\ngoog.provide('goog.reflect');\n\n\n/**\n * Syntax for object literal casts.\n * @see http://go/jscompiler-renaming\n * @see http://code.google.com/p/closure-compiler/wiki/\n *      ExperimentalTypeBasedPropertyRenaming\n *\n * Use this if you have an object literal whose keys need to have the same names\n * as the properties of some class even after they are renamed by the compiler.\n *\n * @param {!Function} type Type to cast to.\n * @param {Object} object Object literal to cast.\n * @return {Object} The object literal.\n */\ngoog.reflect.object = function(type, object) {\n  return object;\n};\n\n\n/**\n * To assert to the compiler that an operation is needed when it would\n * otherwise be stripped. For example:\n * <code>\n *     // Force a layout\n *     goog.reflect.sinkValue(dialog.offsetHeight);\n * </code>\n * @type {!Function}\n */\ngoog.reflect.sinkValue = function(x) {\n  goog.reflect.sinkValue[' '](x);\n  return x;\n};\n\n\n/**\n * The compiler should optimize this function away iff no one ever uses\n * goog.reflect.sinkValue.\n */\ngoog.reflect.sinkValue[' '] = goog.nullFunction;\n\n\n/**\n * Check if a property can be accessed without throwing an exception.\n * @param {Object} obj The owner of the property.\n * @param {string} prop The property name.\n * @return {boolean} Whether the property is accessible. Will also return true\n *     if obj is null.\n */\ngoog.reflect.canAccessProperty = function(obj, prop) {\n  /** @preserveTry */\n  try {\n    goog.reflect.sinkValue(obj[prop]);\n    return true;\n  } catch (e) {}\n  return false;\n};\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A patched, standardized event object for browser events.\n *\n * <pre>\n * The patched event object contains the following members:\n * - type           {string}    Event type, e.g. 'click'\n * - timestamp      {Date}      A date object for when the event was fired\n * - target         {Object}    The element that actually triggered the event\n * - currentTarget  {Object}    The element the listener is attached to\n * - relatedTarget  {Object}    For mouseover and mouseout, the previous object\n * - offsetX        {number}    X-coordinate relative to target\n * - offsetY        {number}    Y-coordinate relative to target\n * - clientX        {number}    X-coordinate relative to viewport\n * - clientY        {number}    Y-coordinate relative to viewport\n * - screenX        {number}    X-coordinate relative to the edge of the screen\n * - screenY        {number}    Y-coordinate relative to the edge of the screen\n * - button         {number}    Mouse button. Use isButton() to test.\n * - keyCode        {number}    Key-code\n * - ctrlKey        {boolean}   Was ctrl key depressed\n * - altKey         {boolean}   Was alt key depressed\n * - shiftKey       {boolean}   Was shift key depressed\n * - metaKey        {boolean}   Was meta key depressed\n * - defaultPrevented {boolean} Whether the default action has been prevented\n * - state          {Object}    History state object\n *\n * NOTE: The keyCode member contains the raw browser keyCode. For normalized\n * key and character code use {@link goog.events.KeyHandler}.\n * </pre>\n *\n */\n\ngoog.provide('goog.events.BrowserEvent');\ngoog.provide('goog.events.BrowserEvent.MouseButton');\n\ngoog.require('goog.events.BrowserFeature');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventType');\ngoog.require('goog.reflect');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * The content of this object will not be initialized if no event object is\n * provided. If this is the case, init() needs to be invoked separately.\n * @param {Event=} opt_e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n * @constructor\n * @extends {goog.events.Event}\n */\ngoog.events.BrowserEvent = function(opt_e, opt_currentTarget) {\n  if (opt_e) {\n    this.init(opt_e, opt_currentTarget);\n  }\n};\ngoog.inherits(goog.events.BrowserEvent, goog.events.Event);\n\n\n/**\n * Normalized button constants for the mouse.\n * @enum {number}\n */\ngoog.events.BrowserEvent.MouseButton = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2\n};\n\n\n/**\n * Static data for mapping mouse buttons.\n * @type {Array.<number>}\n */\ngoog.events.BrowserEvent.IEButtonMap = [\n  1, // LEFT\n  4, // MIDDLE\n  2  // RIGHT\n];\n\n\n/**\n * Target that fired the event.\n * @override\n * @type {Node}\n */\ngoog.events.BrowserEvent.prototype.target = null;\n\n\n/**\n * Node that had the listener attached.\n * @override\n * @type {Node|undefined}\n */\ngoog.events.BrowserEvent.prototype.currentTarget;\n\n\n/**\n * For mouseover and mouseout events, the related object for the event.\n * @type {Node}\n */\ngoog.events.BrowserEvent.prototype.relatedTarget = null;\n\n\n/**\n * X-coordinate relative to target.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.offsetX = 0;\n\n\n/**\n * Y-coordinate relative to target.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.offsetY = 0;\n\n\n/**\n * X-coordinate relative to the window.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.clientX = 0;\n\n\n/**\n * Y-coordinate relative to the window.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.clientY = 0;\n\n\n/**\n * X-coordinate relative to the monitor.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.screenX = 0;\n\n\n/**\n * Y-coordinate relative to the monitor.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.screenY = 0;\n\n\n/**\n * Which mouse button was pressed.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.button = 0;\n\n\n/**\n * Keycode of key press.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.keyCode = 0;\n\n\n/**\n * Keycode of key press.\n * @type {number}\n */\ngoog.events.BrowserEvent.prototype.charCode = 0;\n\n\n/**\n * Whether control was pressed at time of event.\n * @type {boolean}\n */\ngoog.events.BrowserEvent.prototype.ctrlKey = false;\n\n\n/**\n * Whether alt was pressed at time of event.\n * @type {boolean}\n */\ngoog.events.BrowserEvent.prototype.altKey = false;\n\n\n/**\n * Whether shift was pressed at time of event.\n * @type {boolean}\n */\ngoog.events.BrowserEvent.prototype.shiftKey = false;\n\n\n/**\n * Whether the meta key was pressed at time of event.\n * @type {boolean}\n */\ngoog.events.BrowserEvent.prototype.metaKey = false;\n\n\n/**\n * History state object, only set for PopState events where it's a copy of the\n * state object provided to pushState or replaceState.\n * @type {Object}\n */\ngoog.events.BrowserEvent.prototype.state;\n\n\n/**\n * Whether the default platform modifier key was pressed at time of event.\n * (This is control for all platforms except Mac, where it's Meta.\n * @type {boolean}\n */\ngoog.events.BrowserEvent.prototype.platformModifierKey = false;\n\n\n/**\n * The browser event object.\n * @type {Event}\n * @private\n */\ngoog.events.BrowserEvent.prototype.event_ = null;\n\n\n/**\n * Accepts a browser event object and creates a patched, cross browser event\n * object.\n * @param {Event} e Browser event object.\n * @param {EventTarget=} opt_currentTarget Current target for event.\n */\ngoog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {\n  var type = this.type = e.type;\n  goog.events.Event.call(this, type);\n\n  // TODO(nicksantos): Change this.target to type EventTarget.\n  this.target = /** @type {Node} */ (e.target) || e.srcElement;\n\n  // TODO(nicksantos): Change this.currentTarget to type EventTarget.\n  this.currentTarget = /** @type {Node} */ (opt_currentTarget);\n\n  var relatedTarget = /** @type {Node} */ (e.relatedTarget);\n  if (relatedTarget) {\n    // There's a bug in FireFox where sometimes, relatedTarget will be a\n    // chrome element, and accessing any property of it will get a permission\n    // denied exception. See:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=497780\n    if (goog.userAgent.GECKO) {\n      if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {\n        relatedTarget = null;\n      }\n    }\n    // TODO(arv): Use goog.events.EventType when it has been refactored into its\n    // own file.\n  } else if (type == goog.events.EventType.MOUSEOVER) {\n    relatedTarget = e.fromElement;\n  } else if (type == goog.events.EventType.MOUSEOUT) {\n    relatedTarget = e.toElement;\n  }\n\n  this.relatedTarget = relatedTarget;\n\n  // Webkit emits a lame warning whenever layerX/layerY is accessed.\n  // http://code.google.com/p/chromium/issues/detail?id=101733\n  this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?\n      e.offsetX : e.layerX;\n  this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?\n      e.offsetY : e.layerY;\n\n  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;\n  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;\n  this.screenX = e.screenX || 0;\n  this.screenY = e.screenY || 0;\n\n  this.button = e.button;\n\n  this.keyCode = e.keyCode || 0;\n  this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);\n  this.ctrlKey = e.ctrlKey;\n  this.altKey = e.altKey;\n  this.shiftKey = e.shiftKey;\n  this.metaKey = e.metaKey;\n  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;\n  this.state = e.state;\n  this.event_ = e;\n  if (e.defaultPrevented) {\n    this.preventDefault();\n  }\n  delete this.propagationStopped_;\n};\n\n\n/**\n * Tests to see which button was pressed during the event. This is really only\n * useful in IE and Gecko browsers. And in IE, it's only useful for\n * mousedown/mouseup events, because click only fires for the left mouse button.\n *\n * Safari 2 only reports the left button being clicked, and uses the value '1'\n * instead of 0. Opera only reports a mousedown event for the middle button, and\n * no mouse events for the right button. Opera has default behavior for left and\n * middle click that can only be overridden via a configuration setting.\n *\n * There's a nice table of this mess at http://www.unixpapa.com/js/mouse.html.\n *\n * @param {goog.events.BrowserEvent.MouseButton} button The button\n *     to test for.\n * @return {boolean} True if button was pressed.\n */\ngoog.events.BrowserEvent.prototype.isButton = function(button) {\n  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {\n    if (this.type == 'click') {\n      return button == goog.events.BrowserEvent.MouseButton.LEFT;\n    } else {\n      return !!(this.event_.button &\n          goog.events.BrowserEvent.IEButtonMap[button]);\n    }\n  } else {\n    return this.event_.button == button;\n  }\n};\n\n\n/**\n * Whether this has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @return {boolean} The result.\n */\ngoog.events.BrowserEvent.prototype.isMouseActionButton = function() {\n  // Webkit does not ctrl+click to be a right-click, so we\n  // normalize it to behave like Gecko and Opera.\n  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&\n      !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.stopPropagation = function() {\n  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);\n  if (this.event_.stopPropagation) {\n    this.event_.stopPropagation();\n  } else {\n    this.event_.cancelBubble = true;\n  }\n};\n\n\n/**\n * @override\n */\ngoog.events.BrowserEvent.prototype.preventDefault = function() {\n  goog.events.BrowserEvent.superClass_.preventDefault.call(this);\n  var be = this.event_;\n  if (!be.preventDefault) {\n    be.returnValue = false;\n    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {\n      /** @preserveTry */\n      try {\n        // Most keys can be prevented using returnValue. Some special keys\n        // require setting the keyCode to -1 as well:\n        //\n        // In IE7:\n        // F3, F5, F10, F11, Ctrl+P, Crtl+O, Ctrl+F (these are taken from IE6)\n        //\n        // In IE8:\n        // Ctrl+P, Crtl+O, Ctrl+F (F1-F12 cannot be stopped through the event)\n        //\n        // We therefore do this for all function keys as well as when Ctrl key\n        // is pressed.\n        var VK_F1 = 112;\n        var VK_F12 = 123;\n        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {\n          be.keyCode = -1;\n        }\n      } catch (ex) {\n        // IE throws an 'access denied' exception when trying to change\n        // keyCode in some situations (e.g. srcElement is input[type=file],\n        // or srcElement is an anchor tag rewritten by parent's innerHTML).\n        // Do nothing in this case.\n      }\n    }\n  } else {\n    be.preventDefault();\n  }\n};\n\n\n/**\n * @return {Event} The underlying browser event object.\n */\ngoog.events.BrowserEvent.prototype.getBrowserEvent = function() {\n  return this.event_;\n};\n\n\n/** @override */\ngoog.events.BrowserEvent.prototype.disposeInternal = function() {\n};\n",
		"// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Event Types.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @author mirkov@google.com (Mirko Visontai)\n */\n\n\ngoog.provide('goog.events.EventType');\n\ngoog.require('goog.userAgent');\n\n\n/**\n * Constants for event names.\n * @enum {string}\n */\ngoog.events.EventType = {\n  // Mouse events\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  MOUSEDOWN: 'mousedown',\n  MOUSEUP: 'mouseup',\n  MOUSEOVER: 'mouseover',\n  MOUSEOUT: 'mouseout',\n  MOUSEMOVE: 'mousemove',\n  SELECTSTART: 'selectstart', // IE, Safari, Chrome\n\n  // Key events\n  KEYPRESS: 'keypress',\n  KEYDOWN: 'keydown',\n  KEYUP: 'keyup',\n\n  // Focus\n  BLUR: 'blur',\n  FOCUS: 'focus',\n  DEACTIVATE: 'deactivate', // IE only\n  // NOTE: The following two events are not stable in cross-browser usage.\n  //     WebKit and Opera implement DOMFocusIn/Out.\n  //     IE implements focusin/out.\n  //     Gecko implements neither see bug at\n  //     https://bugzilla.mozilla.org/show_bug.cgi?id=396927.\n  // The DOM Events Level 3 Draft deprecates DOMFocusIn in favor of focusin:\n  //     http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html\n  // You can use FOCUS in Capture phase until implementations converge.\n  FOCUSIN: goog.userAgent.IE ? 'focusin' : 'DOMFocusIn',\n  FOCUSOUT: goog.userAgent.IE ? 'focusout' : 'DOMFocusOut',\n\n  // Forms\n  CHANGE: 'change',\n  SELECT: 'select',\n  SUBMIT: 'submit',\n  INPUT: 'input',\n  PROPERTYCHANGE: 'propertychange', // IE only\n\n  // Drag and drop\n  DRAGSTART: 'dragstart',\n  DRAG: 'drag',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DRAGLEAVE: 'dragleave',\n  DROP: 'drop',\n  DRAGEND: 'dragend',\n\n  // WebKit touch events.\n  TOUCHSTART: 'touchstart',\n  TOUCHMOVE: 'touchmove',\n  TOUCHEND: 'touchend',\n  TOUCHCANCEL: 'touchcancel',\n\n  // Misc\n  BEFOREUNLOAD: 'beforeunload',\n  CONTEXTMENU: 'contextmenu',\n  ERROR: 'error',\n  HELP: 'help',\n  LOAD: 'load',\n  LOSECAPTURE: 'losecapture',\n  READYSTATECHANGE: 'readystatechange',\n  RESIZE: 'resize',\n  SCROLL: 'scroll',\n  UNLOAD: 'unload',\n\n  // HTML 5 History events\n  // See http://www.w3.org/TR/html5/history.html#event-definitions\n  HASHCHANGE: 'hashchange',\n  PAGEHIDE: 'pagehide',\n  PAGESHOW: 'pageshow',\n  POPSTATE: 'popstate',\n\n  // Copy and Paste\n  // Support is limited. Make sure it works on your favorite browser\n  // before using.\n  // http://www.quirksmode.org/dom/events/cutcopypaste.html\n  COPY: 'copy',\n  PASTE: 'paste',\n  CUT: 'cut',\n  BEFORECOPY: 'beforecopy',\n  BEFORECUT: 'beforecut',\n  BEFOREPASTE: 'beforepaste',\n\n  // HTML5 online/offline events.\n  // http://www.w3.org/TR/offline-webapps/#related\n  ONLINE: 'online',\n  OFFLINE: 'offline',\n\n  // HTML 5 worker events\n  MESSAGE: 'message',\n  CONNECT: 'connect',\n\n  // CSS transition events. Based on the browser support described at:\n  // https://developer.mozilla.org/en/css/css_transitions#Browser_compatibility\n  TRANSITIONEND: goog.userAgent.WEBKIT ? 'webkitTransitionEnd' :\n      (goog.userAgent.OPERA ? 'oTransitionEnd' : 'transitionend'),\n\n  // IE specific events.\n  // See http://msdn.microsoft.com/en-us/library/ie/hh673557(v=vs.85).aspx\n  MSGESTURECHANGE: 'MSGestureChange',\n  MSGESTUREEND: 'MSGestureEnd',\n  MSGESTUREHOLD: 'MSGestureHold',\n  MSGESTURESTART: 'MSGestureStart',\n  MSGESTURETAP: 'MSGestureTap',\n  MSGOTPOINTERCAPTURE: 'MSGotPointerCapture',\n  MSINERTIASTART: 'MSInertiaStart',\n  MSLOSTPOINTERCAPTURE: 'MSLostPointerCapture',\n  MSPOINTERCANCEL: 'MSPointerCancel',\n  MSPOINTERDOWN: 'MSPointerDown',\n  MSPOINTERMOVE: 'MSPointerMove',\n  MSPOINTEROVER: 'MSPointerOver',\n  MSPOINTEROUT: 'MSPointerOut',\n  MSPOINTERUP: 'MSPointerUp',\n\n  // Native IMEs/input tools events.\n  TEXTINPUT: 'textinput',\n  COMPOSITIONSTART: 'compositionstart',\n  COMPOSITIONUPDATE: 'compositionupdate',\n  COMPOSITIONEND: 'compositionend'\n};\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Event Manager.\n *\n * Provides an abstracted interface to the browsers' event\n * systems. This uses an indirect lookup of listener functions to avoid circular\n * references between DOM (in IE) or XPCOM (in Mozilla) objects which leak\n * memory. This makes it easier to write OO Javascript/DOM code.\n *\n * It simulates capture & bubble in Internet Explorer.\n *\n * The listeners will also automagically have their event objects patched, so\n * your handlers don't need to worry about the browser.\n *\n * Example usage:\n * <pre>\n * goog.events.listen(myNode, 'click', function(e) { alert('woo') });\n * goog.events.listen(myNode, 'mouseover', mouseHandler, true);\n * goog.events.unlisten(myNode, 'mouseover', mouseHandler, true);\n * goog.events.removeAll(myNode);\n * goog.events.removeAll();\n * </pre>\n *\n *                                            in IE and event object patching]\n *\n * @supported IE6+, FF1.5+, WebKit, Opera.\n * @see ../demos/events.html\n * @see ../demos/event-propagation.html\n * @see ../demos/stopevent.html\n */\n\n\n// This uses 3 lookup tables/trees.\n// listenerTree_ is a tree of type -> capture -> src uid -> [Listener]\n// listeners_ is a map of key -> [Listener]\n//\n// The key is a field of the Listener. The Listener class also has the type,\n// capture and the src so one can always trace back in the tree\n//\n// sources_: src uid -> [Listener]\n\n\ngoog.provide('goog.events');\ngoog.provide('goog.events.Key');\ngoog.provide('goog.events.ListenableType');\n\ngoog.require('goog.array');\n/** @suppress {extraRequire} */\ngoog.require('goog.debug.entryPointRegistry');\ngoog.require('goog.events.BrowserEvent');\ngoog.require('goog.events.BrowserFeature');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.Listenable');\ngoog.require('goog.events.Listener');\ngoog.require('goog.object');\n\n\n/**\n * @typedef {number|goog.events.ListenableKey}\n */\ngoog.events.Key;\n\n\n/**\n * @typedef {EventTarget|goog.events.Listenable|goog.events.EventTarget}\n */\ngoog.events.ListenableType;\n\n\n/**\n * Whether to be strict with custom event targets. When set to true,\n * listening/dispatching on un-initialized event targets will fail.\n * An event target may be un-initialized if you forgot to call\n * goog.events.EventTarget constructor in the custom event target\n * constructor.\n * @type {boolean}\n */\ngoog.events.STRICT_EVENT_TARGET = false;\n\n\n/**\n * Container for storing event listeners and their proxies\n * @private\n * @type {Object.<goog.events.ListenableKey>}\n */\ngoog.events.listeners_ = {};\n\n\n/**\n * The root of the listener tree\n * @private\n * @type {Object}\n */\ngoog.events.listenerTree_ = {};\n\n\n/**\n * Lookup for mapping source UIDs to listeners.\n * @private\n * @type {Object}\n */\ngoog.events.sources_ = {};\n\n\n/**\n * String used to prepend to IE event types.  Not a constant so that it is not\n * inlined.\n * @type {string}\n * @private\n */\ngoog.events.onString_ = 'on';\n\n\n/**\n * Map of computed on strings for IE event types. Caching this removes an extra\n * object allocation in goog.events.listen which improves IE6 performance.\n * @type {Object}\n * @private\n */\ngoog.events.onStringMap_ = {};\n\n\n/**\n * Separator used to split up the various parts of an event key, to help avoid\n * the possibilities of collisions.\n * @type {string}\n * @private\n */\ngoog.events.keySeparator_ = '_';\n\n\n/**\n * Adds an event listener for a specific event on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A\n * listener can only be added once to an object and if it is added\n * again the key for the listener is returned. Note that if the\n * existing listener is a one-off listener (registered via\n * listenOnce), it will no longer be a one-off listener after a call\n * to listen().\n *\n * @param {goog.events.ListenableType} src The node to listen to\n *     events on.\n * @param {string|Array.<string>} type Event type or array of event types.\n * @param {Function|Object} listener Callback method, or an object with a\n *     handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.Key} Unique key for the listener.\n */\ngoog.events.listen = function(src, type, listener, opt_capt, opt_handler) {\n  if (goog.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);\n    }\n    return null;\n  }\n\n  var listenableKey;\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(src)) {\n    listenableKey = src.listen(\n        /** @type {string} */ (type),\n        goog.events.wrapListener_(listener), opt_capt, opt_handler);\n  } else {\n    listenableKey = goog.events.listen_(\n        /** @type {EventTarget|goog.events.EventTarget} */ (src),\n        type, listener, /* callOnce */ false, opt_capt, opt_handler);\n  }\n\n  var key = listenableKey.key;\n  goog.events.listeners_[key] = listenableKey;\n  return key;\n};\n\n\n/**\n * Property name that indicates that an object is a\n * goog.events.EventTarget.\n * @type {string}\n * @const\n */\ngoog.events.CUSTOM_EVENT_ATTR = 'customEvent_';\n\n\n/**\n * Adds an event listener for a specific event on a DOM Node or an object that\n * has implemented {@link goog.events.EventTarget}. A listener can only be\n * added once to an object and if it is added again the key for the listener\n * is returned.\n *\n * Note that a one-off listener will not change an existing listener,\n * if any. On the other hand a normal listener will change existing\n * one-off listener to become a normal listener.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {?string} type Event type or array of event types.\n * @param {Function|Object} listener Callback method, or an object with a\n *     handleEvent function.\n * @param {boolean} callOnce Whether the listener is a one-off\n *     listener or otherwise.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.ListenableKey} Unique key for the listener.\n * @private\n */\ngoog.events.listen_ = function(\n    src, type, listener, callOnce, opt_capt, opt_handler) {\n  if (!type) {\n    throw Error('Invalid event type');\n  }\n\n  var capture = !!opt_capt;\n  var map = goog.events.listenerTree_;\n\n  if (!(type in map)) {\n    map[type] = {count_: 0, remaining_: 0};\n  }\n  map = map[type];\n\n  if (!(capture in map)) {\n    map[capture] = {count_: 0, remaining_: 0};\n    map.count_++;\n  }\n  map = map[capture];\n\n  var srcUid = goog.getUid(src);\n  var listenerArray, listenerObj;\n\n  // The remaining_ property is used to be able to short circuit the iteration\n  // of the event listeners.\n  //\n  // Increment the remaining event listeners to call even if this event might\n  // already have been fired. At this point we do not know if the event has\n  // been fired and it is too expensive to find out. By incrementing it we are\n  // guaranteed that we will not skip any event listeners.\n  map.remaining_++;\n\n  // Do not use srcUid in map here since that will cast the number to a\n  // string which will allocate one string object.\n  if (!map[srcUid]) {\n    listenerArray = map[srcUid] = [];\n    map.count_++;\n  } else {\n    listenerArray = map[srcUid];\n    // Ensure that the listeners do not already contain the current listener\n    for (var i = 0; i < listenerArray.length; i++) {\n      listenerObj = listenerArray[i];\n      if (listenerObj.listener == listener &&\n          listenerObj.handler == opt_handler) {\n\n        // If this listener has been removed we should not return its key. It\n        // is OK that we create new listenerObj below since the removed one\n        // will be cleaned up later.\n        if (listenerObj.removed) {\n          break;\n        }\n\n        if (!callOnce) {\n          // Ensure that, if there is an existing callOnce listener, it is no\n          // longer a callOnce listener.\n          listenerArray[i].callOnce = false;\n        }\n\n        // We already have this listener. Return its key.\n        return listenerArray[i];\n      }\n    }\n  }\n\n  var proxy = goog.events.getProxy();\n  listenerObj = new goog.events.Listener();\n  listenerObj.init(listener, proxy, src, type, capture, opt_handler);\n  listenerObj.callOnce = callOnce;\n\n  proxy.src = src;\n  proxy.listener = listenerObj;\n\n  listenerArray.push(listenerObj);\n\n  if (!goog.events.sources_[srcUid]) {\n    goog.events.sources_[srcUid] = [];\n  }\n  goog.events.sources_[srcUid].push(listenerObj);\n\n  // Attach the proxy through the browser's API\n  if (src.addEventListener) {\n    if (src == goog.global || !src[goog.events.CUSTOM_EVENT_ATTR]) {\n      src.addEventListener(type, proxy, capture);\n    } else if (goog.events.STRICT_EVENT_TARGET) {\n      src.assertInitialized();\n    }\n  } else {\n    // The else above used to be else if (src.attachEvent) and then there was\n    // another else statement that threw an exception warning the developer\n    // they made a mistake. This resulted in an extra object allocation in IE6\n    // due to a wrapper object that had to be implemented around the element\n    // and so was removed.\n    src.attachEvent(goog.events.getOnString_(type), proxy);\n  }\n\n  return listenerObj;\n};\n\n\n/**\n * Helper function for returning a proxy function.\n * @return {Function} A new or reused function object.\n */\ngoog.events.getProxy = function() {\n  var proxyCallbackFunction = goog.events.handleBrowserEvent_;\n  // Use a local var f to prevent one allocation.\n  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ?\n      function(eventObject) {\n        return proxyCallbackFunction.call(f.src, f.listener, eventObject);\n      } :\n      function(eventObject) {\n        var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);\n        // NOTE(user): In IE, we hack in a capture phase. However, if\n        // there is inline event handler which tries to prevent default (for\n        // example <a href=\"...\" onclick=\"return false\">...</a>) in a\n        // descendant element, the prevent default will be overridden\n        // by this listener if this listener were to return true. Hence, we\n        // return undefined.\n        if (!v) return v;\n      };\n  return f;\n};\n\n\n/**\n * Adds an event listener for a specific event on a DomNode or an object that\n * has implemented {@link goog.events.EventTarget}. After the event has fired\n * the event listener is removed from the target.\n *\n * If an existing listener already exists, listenOnce will do\n * nothing. In particular, if the listener was previously registered\n * via listen(), listenOnce() will not turn the listener into a\n * one-off listener. Similarly, if there is already an existing\n * one-off listener, listenOnce does not modify the listeners (it is\n * still a once listener).\n *\n * @param {goog.events.ListenableType} src The node to listen to\n *     events on.\n * @param {string|Array.<string>} type Event type or array of event types.\n * @param {Function|Object} listener Callback method.\n * @param {boolean=} opt_capt Fire in capture phase?.\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.Key} Unique key for the listener.\n */\ngoog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {\n  if (goog.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);\n    }\n    return null;\n  }\n\n  var listenableKey;\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(src)) {\n    listenableKey = src.listenOnce(\n        /** @type {string} */ (type),\n        goog.events.wrapListener_(listener), opt_capt, opt_handler);\n  } else {\n    listenableKey = goog.events.listen_(\n        /** @type {EventTarget|goog.events.EventTarget} */ (src),\n        type, listener, /* callOnce */ true, opt_capt, opt_handler);\n  }\n\n  var key = listenableKey.key;\n  goog.events.listeners_[key] = listenableKey;\n  return key;\n};\n\n\n/**\n * Adds an event listener with a specific event wrapper on a DOM Node or an\n * object that has implemented {@link goog.events.EventTarget}. A listener can\n * only be added once to an object.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node to listen to\n *     events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {Function|Object} listener Callback method, or an object with a\n *     handleEvent function.\n * @param {boolean=} opt_capt Whether to fire in capture phase (defaults to\n *     false).\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n */\ngoog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt,\n    opt_handler) {\n  wrapper.listen(src, listener, opt_capt, opt_handler);\n};\n\n\n/**\n * Removes an event listener which was added with listen().\n *\n * @param {goog.events.ListenableType} src The target to stop\n *     listening to events on.\n * @param {string|Array.<string>} type The name of the event without the 'on'\n *     prefix.\n * @param {Function|Object} listener The listener function to remove.\n * @param {boolean=} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n * @return {?boolean} indicating whether the listener was there to remove.\n */\ngoog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {\n  if (goog.isArray(type)) {\n    for (var i = 0; i < type.length; i++) {\n      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);\n    }\n    return null;\n  }\n\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(src)) {\n    return src.unlisten(\n        /** @type {string} */ (type),\n        goog.events.wrapListener_(listener), opt_capt, opt_handler);\n  }\n\n  var capture = !!opt_capt;\n\n  var listenerArray = goog.events.getListeners_(src, type, capture);\n  if (!listenerArray) {\n    return false;\n  }\n\n  for (var i = 0; i < listenerArray.length; i++) {\n    if (listenerArray[i].listener == listener &&\n        listenerArray[i].capture == capture &&\n        listenerArray[i].handler == opt_handler) {\n      return goog.events.unlistenByKey(listenerArray[i].key);\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Removes an event listener which was added with listen() by the key\n * returned by listen().\n *\n * @param {goog.events.Key} key The key returned by listen() for this\n *     event listener.\n * @return {boolean} indicating whether the listener was there to remove.\n */\ngoog.events.unlistenByKey = function(key) {\n  // TODO(user): When we flip goog.events.Key to be ListenableKey,\n  // we need to change this.\n  var listener = goog.events.listeners_[key];\n  if (!listener) {\n    return false;\n  }\n  if (listener.removed) {\n    return false;\n  }\n\n  var src = listener.src;\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(src)) {\n    return src.unlistenByKey(listener);\n  }\n\n  var type = listener.type;\n  var proxy = listener.proxy;\n  var capture = listener.capture;\n\n  if (src.removeEventListener) {\n    // EventTarget calls unlisten so we need to ensure that the source is not\n    // an event target to prevent re-entry.\n    // TODO(arv): What is this goog.global for? Why would anyone listen to\n    // events on the [[Global]] object? Is it supposed to be window? Why would\n    // we not want to allow removing event listeners on the window?\n    if (src == goog.global || !src[goog.events.CUSTOM_EVENT_ATTR]) {\n      src.removeEventListener(type, proxy, capture);\n    }\n  } else if (src.detachEvent) {\n    src.detachEvent(goog.events.getOnString_(type), proxy);\n  }\n\n  var srcUid = goog.getUid(src);\n\n  // In a perfect implementation we would decrement the remaining_ field here\n  // but then we would need to know if the listener has already been fired or\n  // not. We therefore skip doing this and in this uncommon case the entire\n  // ancestor chain will need to be traversed as before.\n\n  // Remove from sources_\n  if (goog.events.sources_[srcUid]) {\n    var sourcesArray = goog.events.sources_[srcUid];\n    goog.array.remove(sourcesArray, listener);\n    if (sourcesArray.length == 0) {\n      delete goog.events.sources_[srcUid];\n    }\n  }\n\n  listener.removed = true;\n\n  // There are some esoteric situations where the hash code of an object\n  // can change, and we won't be able to find the listenerArray anymore.\n  // For example, if you're listening on a window, and the user navigates to\n  // a different window, the UID will disappear.\n  //\n  // It should be impossible to ever find the original listenerArray, so it\n  // doesn't really matter if we can't clean it up in this case.\n  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];\n  if (listenerArray) {\n    listenerArray.needsCleanup_ = true;\n    goog.events.cleanUp_(type, capture, srcUid, listenerArray);\n  }\n\n  delete goog.events.listeners_[key];\n\n  return true;\n};\n\n\n/**\n * Removes an event listener which was added with listenWithWrapper().\n *\n * @param {EventTarget|goog.events.EventTarget} src The target to stop\n *     listening to events on.\n * @param {goog.events.EventWrapper} wrapper Event wrapper to use.\n * @param {Function|Object} listener The listener function to remove.\n * @param {boolean=} opt_capt In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase of the\n *     event.\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n */\ngoog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt,\n    opt_handler) {\n  wrapper.unlisten(src, listener, opt_capt, opt_handler);\n};\n\n\n/**\n * Cleans up goog.events internal data structure. This should be\n * called by all implementations of goog.events.Listenable when\n * removing listeners.\n *\n * TODO(user): Once we remove numeric key support from\n * goog.events.listen and friend, we will be able to remove this\n * requirement.\n *\n * @param {goog.events.ListenableKey} listenableKey The key to clean up.\n */\ngoog.events.cleanUp = function(listenableKey) {\n  delete goog.events.listeners_[listenableKey.key];\n};\n\n\n/**\n * Cleans up the listener array as well as the listener tree\n * @param {string} type  The type of the event.\n * @param {boolean} capture Whether to clean up capture phase listeners instead\n *     bubble phase listeners.\n * @param {number} srcUid  The unique ID of the source.\n * @param {Array.<goog.events.Listener>} listenerArray The array being cleaned.\n * @private\n */\ngoog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {\n  // The listener array gets locked during the dispatch phase so that removals\n  // of listeners during this phase does not screw up the indeces. This method\n  // is called after we have removed a listener as well as after the dispatch\n  // phase in case any listeners were removed.\n  if (!listenerArray.locked_) { // catches both 0 and not set\n    if (listenerArray.needsCleanup_) {\n      // Loop over the listener array and remove listeners that have removed set\n      // to true. This could have been done with filter or something similar but\n      // we want to change the array in place and we want to minimize\n      // allocations. Adding a listener during this phase adds to the end of the\n      // array so that works fine as long as the length is rechecked every in\n      // iteration.\n      for (var oldIndex = 0, newIndex = 0;\n           oldIndex < listenerArray.length;\n           oldIndex++) {\n        if (listenerArray[oldIndex].removed) {\n          var proxy = listenerArray[oldIndex].proxy;\n          proxy.src = null;\n          continue;\n        }\n        if (oldIndex != newIndex) {\n          listenerArray[newIndex] = listenerArray[oldIndex];\n        }\n        newIndex++;\n      }\n      listenerArray.length = newIndex;\n\n      listenerArray.needsCleanup_ = false;\n\n      // In case the length is now zero we release the object.\n      if (newIndex == 0) {\n        delete goog.events.listenerTree_[type][capture][srcUid];\n        goog.events.listenerTree_[type][capture].count_--;\n\n        if (goog.events.listenerTree_[type][capture].count_ == 0) {\n          delete goog.events.listenerTree_[type][capture];\n          goog.events.listenerTree_[type].count_--;\n        }\n\n        if (goog.events.listenerTree_[type].count_ == 0) {\n          delete goog.events.listenerTree_[type];\n        }\n      }\n\n    }\n  }\n};\n\n\n/**\n * Removes all listeners from an object. You can also optionally\n * remove listeners of a particular type.\n *\n * @param {Object=} opt_obj Object to remove listeners from. Not\n *     specifying opt_obj is now DEPRECATED (it used to remove all\n *     registered listeners).\n * @param {string=} opt_type Type of event to, default is all types.\n * @return {number} Number of listeners removed.\n */\ngoog.events.removeAll = function(opt_obj, opt_type) {\n  var count = 0;\n\n  var noObj = opt_obj == null;\n  var noType = opt_type == null;\n\n  if (!noObj) {\n    if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n        opt_obj && goog.events.Listenable.isImplementedBy(opt_obj)) {\n      return opt_obj.removeAllListeners(opt_type);\n    }\n\n    var srcUid = goog.getUid(/** @type {Object} */ (opt_obj));\n    if (goog.events.sources_[srcUid]) {\n      var sourcesArray = goog.events.sources_[srcUid];\n      for (var i = sourcesArray.length - 1; i >= 0; i--) {\n        var listener = sourcesArray[i];\n        if (noType || opt_type == listener.type) {\n          goog.events.unlistenByKey(listener.key);\n          count++;\n        }\n      }\n    }\n  } else {\n    goog.object.forEach(goog.events.listeners_, function(listener, key) {\n      goog.events.unlistenByKey(key);\n      count++;\n    });\n  }\n\n  return count;\n};\n\n\n/**\n * Removes all native listeners registered via goog.events. Native\n * listeners are listeners on native browser objects (such as DOM\n * elements). In particular, goog.events.Listenable and\n * goog.events.EventTarget listeners will NOT be removed.\n * @return {number} Number of listeners removed.\n */\ngoog.events.removeAllNativeListeners = function() {\n  var count = 0;\n  goog.object.forEach(goog.events.listeners_, function(listener, key) {\n    var src = listener.src;\n    // Only remove the listener if it is not on custom event target.\n    if (!goog.events.Listenable.isImplementedBy(src) &&\n        !src[goog.events.CUSTOM_EVENT_ATTR]) {\n      goog.events.unlistenByKey(key);\n      count++;\n    }\n  });\n  return count;\n};\n\n\n/**\n * Gets the listeners for a given object, type and capture phase.\n *\n * @param {Object} obj Object to get listeners for.\n * @param {string} type Event type.\n * @param {boolean} capture Capture phase?.\n * @return {Array.<goog.events.Listener>} Array of listener objects.\n */\ngoog.events.getListeners = function(obj, type, capture) {\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(obj)) {\n    return obj.getListeners(type, capture);\n  } else {\n    return goog.events.getListeners_(obj, type, capture) || [];\n  }\n};\n\n\n/**\n * Gets the listeners for a given object, type and capture phase.\n *\n * @param {Object} obj Object to get listeners for.\n * @param {?string} type Event type.\n * @param {boolean} capture Capture phase?.\n * @return {Array.<goog.events.Listener>?} Array of listener objects.\n *     Returns null if object has no listeners of that type.\n * @private\n */\ngoog.events.getListeners_ = function(obj, type, capture) {\n  var map = goog.events.listenerTree_;\n  if (type in map) {\n    map = map[type];\n    if (capture in map) {\n      map = map[capture];\n      var objUid = goog.getUid(obj);\n      if (map[objUid]) {\n        return map[objUid];\n      }\n    }\n  }\n\n  return null;\n};\n\n\n/**\n * Gets the goog.events.Listener for the event or null if no such listener is\n * in use.\n *\n * @param {EventTarget|goog.events.EventTarget} src The node from which to get\n *     listeners.\n * @param {?string} type The name of the event without the 'on' prefix.\n * @param {Function|Object} listener The listener function to get.\n * @param {boolean=} opt_capt In DOM-compliant browsers, this determines\n *                            whether the listener is fired during the\n *                            capture or bubble phase of the event.\n * @param {Object=} opt_handler Element in whose scope to call the listener.\n * @return {goog.events.ListenableKey} the found listener or null if not found.\n */\ngoog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {\n  var capture = !!opt_capt;\n\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(src)) {\n    return src.getListener(\n        /** @type {string} */ (type),\n        goog.events.wrapListener_(listener), capture, opt_handler);\n  }\n\n  var listenerArray = goog.events.getListeners_(src, type, capture);\n  if (listenerArray) {\n    for (var i = 0; i < listenerArray.length; i++) {\n      // If goog.events.unlistenByKey is called during an event dispatch\n      // then the listener array won't get cleaned up and there might be\n      // 'removed' listeners in the list. Ignore those.\n      if (!listenerArray[i].removed &&\n          listenerArray[i].listener == listener &&\n          listenerArray[i].capture == capture &&\n          listenerArray[i].handler == opt_handler) {\n        // We already have this listener. Return its key.\n        return listenerArray[i];\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Returns whether an event target has any active listeners matching the\n * specified signature. If either the type or capture parameters are\n * unspecified, the function will match on the remaining criteria.\n *\n * @param {EventTarget|goog.events.EventTarget} obj Target to get listeners for.\n * @param {string=} opt_type Event type.\n * @param {boolean=} opt_capture Whether to check for capture or bubble-phase\n *     listeners.\n * @return {boolean} Whether an event target has one or more listeners matching\n *     the requested type and/or capture phase.\n */\ngoog.events.hasListener = function(obj, opt_type, opt_capture) {\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(obj)) {\n    return obj.hasListener(opt_type, opt_capture);\n  }\n\n  var objUid = goog.getUid(obj);\n  var listeners = goog.events.sources_[objUid];\n\n  if (listeners) {\n    var hasType = goog.isDef(opt_type);\n    var hasCapture = goog.isDef(opt_capture);\n\n    if (hasType && hasCapture) {\n      // Lookup in the listener tree whether the specified listener exists.\n      var map = goog.events.listenerTree_[opt_type];\n      return !!map && !!map[opt_capture] && objUid in map[opt_capture];\n\n    } else if (!(hasType || hasCapture)) {\n      // Simple check for whether the event target has any listeners at all.\n      return true;\n\n    } else {\n      // Iterate through the listeners for the event target to find a match.\n      return goog.array.some(listeners, function(listener) {\n        return (hasType && listener.type == opt_type) ||\n               (hasCapture && listener.capture == opt_capture);\n      });\n    }\n  }\n\n  return false;\n};\n\n\n/**\n * Provides a nice string showing the normalized event objects public members\n * @param {Object} e Event Object.\n * @return {string} String of the public members of the normalized event object.\n */\ngoog.events.expose = function(e) {\n  var str = [];\n  for (var key in e) {\n    if (e[key] && e[key].id) {\n      str.push(key + ' = ' + e[key] + ' (' + e[key].id + ')');\n    } else {\n      str.push(key + ' = ' + e[key]);\n    }\n  }\n  return str.join('\\n');\n};\n\n\n/**\n * Returns a string wth on prepended to the specified type. This is used for IE\n * which expects \"on\" to be prepended. This function caches the string in order\n * to avoid extra allocations in steady state.\n * @param {string} type Event type strng.\n * @return {string} The type string with 'on' prepended.\n * @private\n */\ngoog.events.getOnString_ = function(type) {\n  if (type in goog.events.onStringMap_) {\n    return goog.events.onStringMap_[type];\n  }\n  return goog.events.onStringMap_[type] = goog.events.onString_ + type;\n};\n\n\n/**\n * Fires an object's listeners of a particular type and phase\n *\n * @param {Object} obj Object whose listeners to call.\n * @param {string} type Event type.\n * @param {boolean} capture Which event phase.\n * @param {Object} eventObject Event object to be passed to listener.\n * @return {boolean} True if all listeners returned true else false.\n */\ngoog.events.fireListeners = function(obj, type, capture, eventObject) {\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE &&\n      goog.events.Listenable.isImplementedBy(obj)) {\n    return obj.fireListeners(type, capture, eventObject);\n  }\n\n  var map = goog.events.listenerTree_;\n  if (type in map) {\n    map = map[type];\n    if (capture in map) {\n      return goog.events.fireListeners_(map[capture], obj, type,\n                                        capture, eventObject);\n    }\n  }\n  return true;\n};\n\n\n/**\n * Fires an object's listeners of a particular type and phase.\n *\n * @param {Object} map Object with listeners in it.\n * @param {Object} obj Object whose listeners to call.\n * @param {string} type Event type.\n * @param {boolean} capture Which event phase.\n * @param {Object} eventObject Event object to be passed to listener.\n * @return {boolean} True if all listeners returned true else false.\n * @private\n */\ngoog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {\n  var retval = 1;\n\n  var objUid = goog.getUid(obj);\n  if (map[objUid]) {\n    var remaining = --map.remaining_;\n    var listenerArray = map[objUid];\n\n    // If locked_ is not set (and if already 0) initialize it to 1.\n    if (!listenerArray.locked_) {\n      listenerArray.locked_ = 1;\n    } else {\n      listenerArray.locked_++;\n    }\n\n    try {\n      // Events added in the dispatch phase should not be dispatched in\n      // the current dispatch phase. They will be included in the next\n      // dispatch phase though.\n      var length = listenerArray.length;\n      for (var i = 0; i < length; i++) {\n        var listener = listenerArray[i];\n        // We might not have a listener if the listener was removed.\n        if (listener && !listener.removed) {\n          retval &=\n              goog.events.fireListener(listener, eventObject) !== false;\n        }\n      }\n    } finally {\n      // Allow the count of targets remaining to increase (if perhaps we have\n      // added listeners) but do not allow it to decrease if we have reentered\n      // this method through a listener dispatching the same event type,\n      // resetting and exhausted the remaining count.\n      map.remaining_ = Math.max(remaining, map.remaining_);\n      listenerArray.locked_--;\n      goog.events.cleanUp_(type, capture, objUid, listenerArray);\n    }\n  }\n\n  return Boolean(retval);\n};\n\n\n/**\n * Fires a listener with a set of arguments\n *\n * @param {goog.events.Listener} listener The listener object to call.\n * @param {Object} eventObject The event object to pass to the listener.\n * @return {boolean} Result of listener.\n */\ngoog.events.fireListener = function(listener, eventObject) {\n  if (listener.callOnce) {\n    goog.events.unlistenByKey(listener.key);\n  }\n  return listener.handleEvent(eventObject);\n};\n\n\n/**\n * Gets the total number of listeners currently in the system.\n * @return {number} Number of listeners.\n */\ngoog.events.getTotalListenerCount = function() {\n  return goog.object.getCount(goog.events.listeners_);\n};\n\n\n/**\n * Dispatches an event (or event like object) and calls all listeners\n * listening for events of this type. The type of the event is decided by the\n * type property on the event object.\n *\n * If any of the listeners returns false OR calls preventDefault then this\n * function will return false.  If one of the capture listeners calls\n * stopPropagation, then the bubble listeners won't fire.\n *\n * @param {goog.events.Listenable|goog.events.EventTarget} src The\n *     event target.\n * @param {goog.events.EventLike} e Event object.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the handlers returns false) this will also return false.\n *     If there are no handlers, or if all handlers return true, this returns\n *     true.\n */\ngoog.events.dispatchEvent = function(src, e) {\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {\n    if (goog.events.STRICT_EVENT_TARGET) {\n      goog.asserts.assert(\n          goog.events.Listenable.isImplementedBy(src),\n          'Can not use goog.events.dispatchEvent with ' +\n          'non-goog.events.Listenable instance.');\n    }\n    return src.dispatchEvent(e);\n  }\n\n  if (goog.events.STRICT_EVENT_TARGET) {\n    goog.asserts.assert(\n        goog.events.STRICT_EVENT_TARGET && src[goog.events.CUSTOM_EVENT_ATTR],\n        'Can not use goog.events.dispatchEvent with ' +\n        'non-goog.events.EventTarget instance.');\n    src.assertInitialized();\n  }\n\n  var type = e.type || e;\n  var map = goog.events.listenerTree_;\n  if (!(type in map)) {\n    return true;\n  }\n\n  // If accepting a string or object, create a custom event object so that\n  // preventDefault and stopPropagation work with the event.\n  if (goog.isString(e)) {\n    e = new goog.events.Event(e, src);\n  } else if (!(e instanceof goog.events.Event)) {\n    var oldEvent = e;\n    e = new goog.events.Event(/** @type {string} */ (type), src);\n    goog.object.extend(e, oldEvent);\n  } else {\n    e.target = e.target || src;\n  }\n\n  var rv = 1, ancestors;\n\n  map = map[type];\n  var hasCapture = true in map;\n  var targetsMap;\n\n  if (hasCapture) {\n    // Build ancestors now\n    ancestors = [];\n    for (var parent = src; parent; parent = parent.getParentEventTarget()) {\n      ancestors.push(parent);\n    }\n\n    targetsMap = map[true];\n    targetsMap.remaining_ = targetsMap.count_;\n\n    // Call capture listeners\n    for (var i = ancestors.length - 1;\n         !e.propagationStopped_ && i >= 0 && targetsMap.remaining_;\n         i--) {\n      e.currentTarget = ancestors[i];\n      rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type,\n                                       true, e) &&\n            e.returnValue_ != false;\n    }\n  }\n\n  var hasBubble = false in map;\n  if (hasBubble) {\n    targetsMap = map[false];\n    targetsMap.remaining_ = targetsMap.count_;\n\n    if (hasCapture) { // We have the ancestors.\n\n      // Call bubble listeners\n      for (var i = 0; !e.propagationStopped_ && i < ancestors.length &&\n           targetsMap.remaining_;\n           i++) {\n        e.currentTarget = ancestors[i];\n        rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type,\n                                         false, e) &&\n              e.returnValue_ != false;\n      }\n    } else {\n      // In case we don't have capture we don't have to build up the\n      // ancestors array.\n\n      for (var current = src;\n           !e.propagationStopped_ && current && targetsMap.remaining_;\n           current = current.getParentEventTarget()) {\n        e.currentTarget = current;\n        rv &= goog.events.fireListeners_(targetsMap, current, e.type,\n                                         false, e) &&\n              e.returnValue_ != false;\n      }\n    }\n  }\n\n  return Boolean(rv);\n};\n\n\n/**\n * Installs exception protection for the browser event entry point using the\n * given error handler.\n *\n * @param {goog.debug.ErrorHandler} errorHandler Error handler with which to\n *     protect the entry point.\n */\ngoog.events.protectBrowserEventEntryPoint = function(errorHandler) {\n  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(\n      goog.events.handleBrowserEvent_);\n};\n\n\n/**\n * Handles an event and dispatches it to the correct listeners. This\n * function is a proxy for the real listener the user specified.\n *\n * @param {goog.events.Listener} listener The listener object.\n * @param {Event=} opt_evt Optional event object that gets passed in via the\n *     native event handlers.\n * @return {boolean} Result of the event handler.\n * @this {goog.events.EventTarget|Object} The object or Element that\n *     fired the event.\n * @private\n */\ngoog.events.handleBrowserEvent_ = function(listener, opt_evt) {\n  if (listener.removed) {\n    return true;\n  }\n\n  var type = listener.type;\n  var map = goog.events.listenerTree_;\n\n  if (!(type in map)) {\n    return true;\n  }\n  map = map[type];\n  var retval, targetsMap;\n  // Synthesize event propagation if the browser does not support W3C\n  // event model.\n  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {\n    var ieEvent = opt_evt ||\n        /** @type {Event} */ (goog.getObjectByName('window.event'));\n\n    // Check if we have any capturing event listeners for this type.\n    var hasCapture = true in map;\n    var hasBubble = false in map;\n\n    if (hasCapture) {\n      if (goog.events.isMarkedIeEvent_(ieEvent)) {\n        return true;\n      }\n\n      goog.events.markIeEvent_(ieEvent);\n    }\n\n    var evt = new goog.events.BrowserEvent();\n    // TODO(user): update @this for this function\n    evt.init(ieEvent, /** @type {EventTarget} */ (this));\n\n    retval = true;\n    try {\n      if (hasCapture) {\n        var ancestors = [];\n\n        for (var parent = evt.currentTarget;\n             parent;\n             parent = parent.parentNode) {\n          ancestors.push(parent);\n        }\n\n        targetsMap = map[true];\n        targetsMap.remaining_ = targetsMap.count_;\n\n        // Call capture listeners\n        for (var i = ancestors.length - 1;\n             !evt.propagationStopped_ && i >= 0 && targetsMap.remaining_;\n             i--) {\n          evt.currentTarget = ancestors[i];\n          retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type,\n                                               true, evt);\n        }\n\n        if (hasBubble) {\n          targetsMap = map[false];\n          targetsMap.remaining_ = targetsMap.count_;\n\n          // Call bubble listeners\n          for (var i = 0;\n               !evt.propagationStopped_ && i < ancestors.length &&\n               targetsMap.remaining_;\n               i++) {\n            evt.currentTarget = ancestors[i];\n            retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type,\n                                                 false, evt);\n          }\n        }\n\n      } else {\n        // Bubbling, let IE handle the propagation.\n        retval = goog.events.fireListener(listener, evt);\n      }\n\n    } finally {\n      if (ancestors) {\n        ancestors.length = 0;\n      }\n    }\n    return retval;\n  } // IE\n\n  // Caught a non-IE DOM event. 1 additional argument which is the event object\n  var be = new goog.events.BrowserEvent(\n      opt_evt, /** @type {EventTarget} */ (this));\n  retval = goog.events.fireListener(listener, be);\n  return retval;\n};\n\n\n/**\n * This is used to mark the IE event object so we do not do the Closure pass\n * twice for a bubbling event.\n * @param {Event} e The IE browser event.\n * @private\n */\ngoog.events.markIeEvent_ = function(e) {\n  // Only the keyCode and the returnValue can be changed. We use keyCode for\n  // non keyboard events.\n  // event.returnValue is a bit more tricky. It is undefined by default. A\n  // boolean false prevents the default action. In a window.onbeforeunload and\n  // the returnValue is non undefined it will be alerted. However, we will only\n  // modify the returnValue for keyboard events. We can get a problem if non\n  // closure events sets the keyCode or the returnValue\n\n  var useReturnValue = false;\n\n  if (e.keyCode == 0) {\n    // We cannot change the keyCode in case that srcElement is input[type=file].\n    // We could test that that is the case but that would allocate 3 objects.\n    // If we use try/catch we will only allocate extra objects in the case of a\n    // failure.\n    /** @preserveTry */\n    try {\n      e.keyCode = -1;\n      return;\n    } catch (ex) {\n      useReturnValue = true;\n    }\n  }\n\n  if (useReturnValue ||\n      /** @type {boolean|undefined} */ (e.returnValue) == undefined) {\n    e.returnValue = true;\n  }\n};\n\n\n/**\n * This is used to check if an IE event has already been handled by the Closure\n * system so we do not do the Closure pass twice for a bubbling event.\n * @param {Event} e  The IE browser event.\n * @return {boolean} True if the event object has been marked.\n * @private\n */\ngoog.events.isMarkedIeEvent_ = function(e) {\n  return e.keyCode < 0 || e.returnValue != undefined;\n};\n\n\n/**\n * Counter to create unique event ids.\n * @type {number}\n * @private\n */\ngoog.events.uniqueIdCounter_ = 0;\n\n\n/**\n * Creates a unique event id.\n *\n * @param {string} identifier The identifier.\n * @return {string} A unique identifier.\n */\ngoog.events.getUniqueId = function(identifier) {\n  return identifier + '_' + goog.events.uniqueIdCounter_++;\n};\n\n\n/**\n * Expando property for listener function wrapper for Object with\n * handleEvent.\n * @type {string}\n * @private\n */\ngoog.events.LISTENER_WRAPPER_PROP_ = '__closure_events_fn_' +\n    ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * @param {Object|Function} listener The listener function or an\n *     object that contains handleEvent method.\n * @return {!Function} Either the original function or a function that\n *     calls obj.handleEvent. If the same listener is passed to this\n *     function more than once, the same function is guaranteed to be\n *     returned.\n * @private\n */\ngoog.events.wrapListener_ = function(listener) {\n  if (goog.isFunction(listener)) {\n    return listener;\n  }\n\n  return listener[goog.events.LISTENER_WRAPPER_PROP_] ||\n      (listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {\n        return listener.handleEvent(e);\n      });\n};\n\n\n// Register the browser event handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.events.handleBrowserEvent_ = transformer(\n          goog.events.handleBrowserEvent_);\n    });\n",
		"// Copyright 2005 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Implementation of EventTarget as defined by W3C DOM 2/3.\n *\n * @author arv@google.com (Erik Arvidsson) [Original implementation]\n * @author pupius@google.com (Daniel Pupius) [Port to use goog.events]\n * @see ../demos/eventtarget.html\n */\n\ngoog.provide('goog.events.EventTarget');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.events');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.Listenable');\ngoog.require('goog.events.Listener');\ngoog.require('goog.object');\n\n\n\n/**\n * Inherit from this class to give your object the ability to dispatch events.\n * Note that this class provides event <em>sending</em> behaviour, not event\n * receiving behaviour: your object will be able to broadcast events, and other\n * objects will be able to listen for those events using goog.events.listen().\n *\n * <p>The name \"EventTarget\" reflects the fact that this class implements the\n * <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html\">\n * EventTarget interface</a> as defined by W3C DOM 2/3, with a few differences:\n * <ul>\n * <li>Event objects do not have to implement the Event interface. An object\n *     is treated as an event object if it has a 'type' property.\n * <li>You can use a plain string instead of an event object; an event-like\n *     object will be created with the 'type' set to the string value.\n * </ul>\n *\n * <p>Unless propagation is stopped, an event dispatched by an EventTarget\n * will bubble to the parent returned by <code>getParentEventTarget</code>.\n * To set the parent, call <code>setParentEventTarget</code> or override\n * <code>getParentEventTarget</code> in a subclass.  Subclasses that don't\n * support changing the parent should override the setter to throw an error.\n *\n * <p>Example usage:\n * <pre>\n *   var source = new goog.events.EventTarget();\n *   function handleEvent(event) {\n *     alert('Type: ' + e.type + '\\nTarget: ' + e.target);\n *   }\n *   goog.events.listen(source, 'foo', handleEvent);\n *   ...\n *   source.dispatchEvent({type: 'foo'}); // will call handleEvent\n *   // or source.dispatchEvent('foo');\n *   ...\n *   goog.events.unlisten(source, 'foo', handleEvent);\n *\n *   // You can also use the Listener interface:\n *   var listener = {\n *     handleEvent: function(event) {\n *       ...\n *     }\n *   };\n *   goog.events.listen(source, 'bar', listener);\n * </pre>\n *\n * @constructor\n * @extends {goog.Disposable}\n * @implements {goog.events.Listenable}\n */\ngoog.events.EventTarget = function() {\n  goog.Disposable.call(this);\n\n  /**\n   * Maps of event type to an array of listeners.\n   *\n   * @type {Object.<string, !Array.<!goog.events.ListenableKey>>}\n   * @private\n   */\n  this.eventTargetListeners_ = {};\n\n  /**\n   * The object to use for event.target. Useful when mixing in an\n   * EventTarget to another object.\n   * @type {!Object}\n   * @private\n   */\n  this.actualEventTarget_ = this;\n};\ngoog.inherits(goog.events.EventTarget, goog.Disposable);\n\n\nif (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {\n  goog.events.Listenable.addImplementation(goog.events.EventTarget);\n}\n\n\n/**\n * An artificial cap on the number of ancestors you can have. This is mainly\n * for loop detection.\n * @const {number}\n * @private\n */\ngoog.events.EventTarget.MAX_ANCESTORS_ = 1000;\n\n\n/**\n * Used to tell if an event is a real event in goog.events.listen() so we don't\n * get listen() calling addEventListener() and vice-versa.\n * @type {boolean}\n * @private\n */\ngoog.events.EventTarget.prototype[goog.events.CUSTOM_EVENT_ATTR] = true;\n\n\n/**\n * Parent event target, used during event bubbling.\n * @type {goog.events.EventTarget?}\n * @private\n */\ngoog.events.EventTarget.prototype.parentEventTarget_ = null;\n\n\n/**\n * Returns the parent of this event target to use for bubbling.\n *\n * @return {goog.events.EventTarget} The parent EventTarget or null if there\n * is no parent.\n */\ngoog.events.EventTarget.prototype.getParentEventTarget = function() {\n  return this.parentEventTarget_;\n};\n\n\n/**\n * Sets the parent of this event target to use for bubbling.\n *\n * @param {goog.events.EventTarget?} parent Parent EventTarget (null if none).\n */\ngoog.events.EventTarget.prototype.setParentEventTarget = function(parent) {\n  this.parentEventTarget_ = parent;\n};\n\n\n/**\n * Adds an event listener to the event target. The same handler can only be\n * added once per the type. Even if you add the same handler multiple times\n * using the same type then it will only be called once when the event is\n * dispatched.\n *\n * Supported for legacy but use goog.events.listen(src, type, handler) instead.\n *\n * @param {string} type The type of the event to listen for.\n * @param {Function|Object} handler The function to handle the event. The\n *     handler can also be an object that implements the handleEvent method\n *     which takes the event object as argument.\n * @param {boolean=} opt_capture In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase\n *     of the event.\n * @param {Object=} opt_handlerScope Object in whose scope to call\n *     the listener.\n */\ngoog.events.EventTarget.prototype.addEventListener = function(\n    type, handler, opt_capture, opt_handlerScope) {\n  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);\n};\n\n\n/**\n * Removes an event listener from the event target. The handler must be the\n * same object as the one added. If the handler has not been added then\n * nothing is done.\n * @param {string} type The type of the event to listen for.\n * @param {Function|Object} handler The function to handle the event. The\n *     handler can also be an object that implements the handleEvent method\n *     which takes the event object as argument.\n * @param {boolean=} opt_capture In DOM-compliant browsers, this determines\n *     whether the listener is fired during the capture or bubble phase\n *     of the event.\n * @param {Object=} opt_handlerScope Object in whose scope to call\n *     the listener.\n */\ngoog.events.EventTarget.prototype.removeEventListener = function(\n    type, handler, opt_capture, opt_handlerScope) {\n  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.dispatchEvent = function(e) {\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {\n    this.assertInitialized();\n\n    var ancestorsTree, ancestor = this.getParentEventTarget();\n    if (ancestor) {\n      ancestorsTree = [];\n      var ancestorCount = 1;\n      for (; ancestor; ancestor = ancestor.getParentEventTarget()) {\n        ancestorsTree.push(ancestor);\n        goog.asserts.assert(\n            (++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_),\n            'infinite loop');\n      }\n    }\n\n    return goog.events.EventTarget.dispatchEventInternal_(\n        this.actualEventTarget_, e, ancestorsTree);\n  } else {\n    return goog.events.dispatchEvent(this, e);\n  }\n};\n\n\n/**\n * Unattach listeners from this object.  Classes that extend EventTarget may\n * need to override this method in order to remove references to DOM Elements\n * and additional listeners, it should be something like this:\n * <pre>\n * MyClass.prototype.disposeInternal = function() {\n *   MyClass.superClass_.disposeInternal.call(this);\n *   // Dispose logic for MyClass\n * };\n * </pre>\n * @override\n * @protected\n */\ngoog.events.EventTarget.prototype.disposeInternal = function() {\n  goog.events.EventTarget.superClass_.disposeInternal.call(this);\n\n  if (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {\n    this.removeAllListeners();\n  } else {\n    goog.events.removeAll(this);\n  }\n\n  this.parentEventTarget_ = null;\n};\n\n\n/**\n * Asserts that the event target instance is initialized properly.\n */\ngoog.events.EventTarget.prototype.assertInitialized = function() {\n  if (goog.events.STRICT_EVENT_TARGET) {\n    goog.asserts.assert(\n        this.eventTargetListeners_,\n        'Event target is not initialized. Did you call superclass ' +\n        '(goog.events.EventTarget) constructor?');\n  }\n};\n\n\nif (goog.events.Listenable.USE_LISTENABLE_INTERFACE) {\n\n/** @override */\ngoog.events.EventTarget.prototype.listen = function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  return this.listenInternal_(\n      type, listener, false /* callOnce */, opt_useCapture, opt_listenerScope);\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.listenOnce = function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  return this.listenInternal_(\n      type, listener, true /* callOnce */, opt_useCapture, opt_listenerScope);\n};\n\n\n/**\n * Adds an event listener. A listener can only be added once to an\n * object and if it is added again the key for the listener is\n * returned.\n *\n * Note that a one-off listener will not change an existing listener,\n * if any. On the other hand a normal listener will change existing\n * one-off listener to become a normal listener.\n *\n * @param {string} type Event type to listen to.\n * @param {!Function} listener Callback method.\n * @param {boolean} callOnce Whether the listener is a one-off\n *     listener or otherwise.\n * @param {boolean=} opt_useCapture Whether to fire in capture phase\n *     (defaults to false).\n * @param {Object=} opt_listenerScope Object in whose scope to call the\n *     listener.\n * @return {goog.events.ListenableKey} Unique key for the listener.\n * @private\n */\ngoog.events.EventTarget.prototype.listenInternal_ = function(\n    type, listener, callOnce, opt_useCapture, opt_listenerScope) {\n  this.assertInitialized();\n\n  var listenerArray = this.eventTargetListeners_[type] ||\n      (this.eventTargetListeners_[type] = []);\n\n  var listenerObj;\n  var index = goog.events.EventTarget.findListenerIndex_(\n      listenerArray, listener, opt_useCapture, opt_listenerScope);\n  if (index > -1) {\n    listenerObj = listenerArray[index];\n    if (!callOnce) {\n      // Ensure that, if there is an existing callOnce listener, it is no\n      // longer a callOnce listener.\n      listenerObj.callOnce = false;\n    }\n    return listenerObj;\n  }\n\n  listenerObj = new goog.events.Listener();\n  listenerObj.init(\n      listener, null, this, type, !!opt_useCapture, opt_listenerScope);\n  listenerObj.callOnce = callOnce;\n  listenerArray.push(listenerObj);\n\n  return listenerObj;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.unlisten = function(\n    type, listener, opt_useCapture, opt_listenerScope) {\n  if (!(type in this.eventTargetListeners_)) {\n    return false;\n  }\n\n  var listenerArray = this.eventTargetListeners_[type];\n  var index = goog.events.EventTarget.findListenerIndex_(\n      listenerArray, listener, opt_useCapture, opt_listenerScope);\n  if (index > -1) {\n    var listenerObj = listenerArray[index];\n    goog.events.cleanUp(listenerObj);\n    listenerObj.removed = true;\n    return goog.array.removeAt(listenerArray, index);\n  }\n  return false;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.unlistenByKey = function(key) {\n  var type = key.type;\n  if (!(type in this.eventTargetListeners_)) {\n    return false;\n  }\n\n  var removed = goog.array.remove(this.eventTargetListeners_[type], key);\n  if (removed) {\n    goog.events.cleanUp(key);\n    key.removed = true;\n  }\n  return removed;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.removeAllListeners = function(\n    opt_type, opt_capture) {\n  var count = 0;\n  for (var type in this.eventTargetListeners_) {\n    if (!opt_type || type == opt_type) {\n      var listenerArray = this.eventTargetListeners_[type];\n      for (var i = 0; i < listenerArray.length; i++) {\n        ++count;\n        goog.events.cleanUp(listenerArray[i]);\n        listenerArray[i].removed = true;\n      }\n      listenerArray.length = 0;\n    }\n  }\n  return count;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.fireListeners = function(\n    type, capture, eventObject) {\n  if (!(type in this.eventTargetListeners_)) {\n    return true;\n  }\n\n  var rv = true;\n  var listenerArray = goog.array.clone(this.eventTargetListeners_[type]);\n  for (var i = 0; i < listenerArray.length; ++i) {\n    var listener = listenerArray[i];\n    // We might not have a listener if the listener was removed.\n    if (listener && !listener.removed && listener.capture == capture) {\n      // TODO(user): This logic probably should be in the Listener\n      // object instead.\n      if (listener.callOnce) {\n        this.unlistenByKey(listener);\n      }\n      rv = listener.handleEvent(eventObject) !== false && rv;\n    }\n  }\n\n  return rv && eventObject.returnValue_ != false;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.getListeners = function(type, capture) {\n  var listenerArray = this.eventTargetListeners_[type];\n  var rv = [];\n  if (listenerArray) {\n    for (var i = 0; i < listenerArray.length; ++i) {\n      var listenerObj = listenerArray[i];\n      if (listenerObj.capture == capture) {\n        rv.push(listenerObj);\n      }\n    }\n  }\n  return rv;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.getListener = function(\n    type, listener, capture, opt_listenerScope) {\n  var listenerArray = this.eventTargetListeners_[type];\n  var i = -1;\n  if (listenerArray) {\n    i = goog.events.EventTarget.findListenerIndex_(\n        listenerArray, listener, capture, opt_listenerScope);\n  }\n  return i > -1 ? listenerArray[i] : null;\n};\n\n\n/** @override */\ngoog.events.EventTarget.prototype.hasListener = function(\n    opt_type, opt_capture) {\n  var hasType = goog.isDef(opt_type);\n  var hasCapture = goog.isDef(opt_capture);\n\n  return goog.object.some(\n      this.eventTargetListeners_, function(listenersArray, type) {\n        for (var i = 0; i < listenersArray.length; ++i) {\n          if ((!hasType || listenersArray[i].type == opt_type) &&\n              (!hasCapture || listenersArray[i].capture == opt_capture)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n};\n\n\n/**\n * Sets the target to be used for {@code event.target} when firing\n * event. Mainly used for testing. For example, see\n * {@code goog.testing.events.mixinListenable}.\n * @param {!Object} target The target.\n */\ngoog.events.EventTarget.prototype.setTargetForTesting = function(target) {\n  this.actualEventTarget_ = target;\n};\n\n\n/**\n * Dispatches the given event on the ancestorsTree.\n *\n * TODO(user): Look for a way to reuse this logic in\n * goog.events, if possible.\n *\n * @param {!Object} target The target to dispatch on.\n * @param {goog.events.Event|Object|string} e The event object.\n * @param {Array.<goog.events.Listenable>=} opt_ancestorsTree The ancestors\n *     tree of the target, in reverse order from the closest ancestor\n *     to the root event target. May be null if the target has no ancestor.\n * @return {boolean} If anyone called preventDefault on the event object (or\n *     if any of the listeners returns false this will also return false.\n * @private\n */\ngoog.events.EventTarget.dispatchEventInternal_ = function(\n    target, e, opt_ancestorsTree) {\n  var type = e.type || /** @type {string} */ (e);\n\n  // If accepting a string or object, create a custom event object so that\n  // preventDefault and stopPropagation work with the event.\n  if (goog.isString(e)) {\n    e = new goog.events.Event(e, target);\n  } else if (!(e instanceof goog.events.Event)) {\n    var oldEvent = e;\n    e = new goog.events.Event(type, target);\n    goog.object.extend(e, oldEvent);\n  } else {\n    e.target = e.target || target;\n  }\n\n  var rv = true, currentTarget;\n\n  // Executes all capture listeners on the ancestors, if any.\n  if (opt_ancestorsTree) {\n    for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0;\n         i--) {\n      currentTarget = e.currentTarget = opt_ancestorsTree[i];\n      rv = currentTarget.fireListeners(type, true, e) && rv;\n    }\n  }\n\n  // Executes capture and bubble listeners on the target.\n  if (!e.propagationStopped_) {\n    currentTarget = e.currentTarget = target;\n    rv = currentTarget.fireListeners(type, true, e) && rv;\n    if (!e.propagationStopped_) {\n      rv = currentTarget.fireListeners(type, false, e) && rv;\n    }\n  }\n\n  // Executes all bubble listeners on the ancestors, if any.\n  if (opt_ancestorsTree) {\n    for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {\n      currentTarget = e.currentTarget = opt_ancestorsTree[i];\n      rv = currentTarget.fireListeners(type, false, e) && rv;\n    }\n  }\n\n  return rv;\n};\n\n\n/**\n * Finds the index of a matching goog.events.Listener in the given\n * listenerArray.\n * @param {!Array.<!goog.events.Listener>} listenerArray Array of listener.\n * @param {!Function} listener The listener function.\n * @param {boolean=} opt_useCapture The capture flag for the listener.\n * @param {Object=} opt_listenerScope The listener scope.\n * @return {number} The index of the matching listener within the\n *     listenerArray.\n * @private\n */\ngoog.events.EventTarget.findListenerIndex_ = function(\n    listenerArray, listener, opt_useCapture, opt_listenerScope) {\n  for (var i = 0; i < listenerArray.length; ++i) {\n    var listenerObj = listenerArray[i];\n    if (listenerObj.listener == listener &&\n        listenerObj.capture == !!opt_useCapture &&\n        listenerObj.handler == opt_listenerScope) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n}  // if (goog.events.Listenable.USE_LISTENABLE_INTERFACE)\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Generics method for collection-like classes and objects.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * This file contains functions to work with collections. It supports using\n * Map, Set, Array and Object and other classes that implement collection-like\n * methods.\n */\n\n\ngoog.provide('goog.structs');\n\ngoog.require('goog.array');\ngoog.require('goog.object');\n\n\n// We treat an object as a dictionary if it has getKeys or it is an object that\n// isn't arrayLike.\n\n\n/**\n * Returns the number of values in the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {number} The number of values in the collection-like object.\n */\ngoog.structs.getCount = function(col) {\n  if (typeof col.getCount == 'function') {\n    return col.getCount();\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return col.length;\n  }\n  return goog.object.getCount(col);\n};\n\n\n/**\n * Returns the values of the collection-like object.\n * @param {Object} col The collection-like object.\n * @return {!Array} The values in the collection-like object.\n */\ngoog.structs.getValues = function(col) {\n  if (typeof col.getValues == 'function') {\n    return col.getValues();\n  }\n  if (goog.isString(col)) {\n    return col.split('');\n  }\n  if (goog.isArrayLike(col)) {\n    var rv = [];\n    var l = col.length;\n    for (var i = 0; i < l; i++) {\n      rv.push(col[i]);\n    }\n    return rv;\n  }\n  return goog.object.getValues(col);\n};\n\n\n/**\n * Returns the keys of the collection. Some collections have no notion of\n * keys/indexes and this function will return undefined in those cases.\n * @param {Object} col The collection-like object.\n * @return {!Array|undefined} The keys in the collection.\n */\ngoog.structs.getKeys = function(col) {\n  if (typeof col.getKeys == 'function') {\n    return col.getKeys();\n  }\n  // if we have getValues but no getKeys we know this is a key-less collection\n  if (typeof col.getValues == 'function') {\n    return undefined;\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    var rv = [];\n    var l = col.length;\n    for (var i = 0; i < l; i++) {\n      rv.push(i);\n    }\n    return rv;\n  }\n\n  return goog.object.getKeys(col);\n};\n\n\n/**\n * Whether the collection contains the given value. This is O(n) and uses\n * equals (==) to test the existence.\n * @param {Object} col The collection-like object.\n * @param {*} val The value to check for.\n * @return {boolean} True if the map contains the value.\n */\ngoog.structs.contains = function(col, val) {\n  if (typeof col.contains == 'function') {\n    return col.contains(val);\n  }\n  if (typeof col.containsValue == 'function') {\n    return col.containsValue(val);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.contains(/** @type {Array} */ (col), val);\n  }\n  return goog.object.containsValue(col, val);\n};\n\n\n/**\n * Whether the collection is empty.\n * @param {Object} col The collection-like object.\n * @return {boolean} True if empty.\n */\ngoog.structs.isEmpty = function(col) {\n  if (typeof col.isEmpty == 'function') {\n    return col.isEmpty();\n  }\n\n  // We do not use goog.string.isEmpty because here we treat the string as\n  // collection and as such even whitespace matters\n\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.isEmpty(/** @type {Array} */ (col));\n  }\n  return goog.object.isEmpty(col);\n};\n\n\n/**\n * Removes all the elements from the collection.\n * @param {Object} col The collection-like object.\n */\ngoog.structs.clear = function(col) {\n  // NOTE(arv): This should not contain strings because strings are immutable\n  if (typeof col.clear == 'function') {\n    col.clear();\n  } else if (goog.isArrayLike(col)) {\n    goog.array.clear(/** @type {goog.array.ArrayLike} */ (col));\n  } else {\n    goog.object.clear(col);\n  }\n};\n\n\n/**\n * Calls a function for each value in a collection. The function takes\n * three arguments; the value, the key and the collection.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):?} f The function to call for every value.\n *     This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and the return value is irrelevant.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within {@code f}.\n * @template T,S\n */\ngoog.structs.forEach = function(col, f, opt_obj) {\n  if (typeof col.forEach == 'function') {\n    col.forEach(f, opt_obj);\n  } else if (goog.isArrayLike(col) || goog.isString(col)) {\n    goog.array.forEach(/** @type {Array} */ (col), f, opt_obj);\n  } else {\n    var keys = goog.structs.getKeys(col);\n    var values = goog.structs.getValues(col);\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n      f.call(opt_obj, values[i], keys && keys[i], col);\n    }\n  }\n};\n\n\n/**\n * Calls a function for every value in the collection. When a call returns true,\n * adds the value to a new collection (Array is returned by default).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes\n *     3 arguments (the value, the key or undefined if the collection has no\n *     notion of keys, and the collection) and should return a Boolean. If the\n *     return value is true the value is added to the result collection. If it\n *     is false the value is not included.\n * @param {T=} opt_obj The object to be used as the value of 'this'\n *     within {@code f}.\n * @return {!Object|!Array} A new collection where the passed values are\n *     present. If col is a key-less collection an array is returned.  If col\n *     has keys and values a plain old JS object is returned.\n * @template T,S\n */\ngoog.structs.filter = function(col, f, opt_obj) {\n  if (typeof col.filter == 'function') {\n    return col.filter(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.filter(/** @type {!Array} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  if (keys) {\n    rv = {};\n    for (var i = 0; i < l; i++) {\n      if (f.call(opt_obj, values[i], keys[i], col)) {\n        rv[keys[i]] = values[i];\n      }\n    }\n  } else {\n    // We should not use goog.array.filter here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv = [];\n    for (var i = 0; i < l; i++) {\n      if (f.call(opt_obj, values[i], undefined, col)) {\n        rv.push(values[i]);\n      }\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls a function for every value in the collection and adds the result into a\n * new collection (defaults to creating a new Array).\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):V} f The function to call for every value.\n *     This function takes 3 arguments (the value, the key or undefined if the\n *     collection has no notion of keys, and the collection) and should return\n *     something. The result will be used as the value in the new collection.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within {@code f}.\n * @return {!Object.<V>|!Array.<V>} A new collection with the new values.  If\n *     col is a key-less collection an array is returned.  If col has keys and\n *     values a plain old JS object is returned.\n * @template T,S,V\n */\ngoog.structs.map = function(col, f, opt_obj) {\n  if (typeof col.map == 'function') {\n    return col.map(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.map(/** @type {!Array} */ (col), f, opt_obj);\n  }\n\n  var rv;\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  if (keys) {\n    rv = {};\n    for (var i = 0; i < l; i++) {\n      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);\n    }\n  } else {\n    // We should not use goog.array.map here since we want to make sure that\n    // the index is undefined as well as make sure that col is passed to the\n    // function.\n    rv = [];\n    for (var i = 0; i < l; i++) {\n      rv[i] = f.call(opt_obj, values[i], undefined, col);\n    }\n  }\n  return rv;\n};\n\n\n/**\n * Calls f for each value in a collection. If any call returns true this returns\n * true (without checking the rest). If all returns false this returns false.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or undefined\n *     if the collection has no notion of keys, and the collection) and should\n *     return a boolean.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within {@code f}.\n * @return {boolean} True if any value passes the test.\n * @template T,S\n */\ngoog.structs.some = function(col, f, opt_obj) {\n  if (typeof col.some == 'function') {\n    return col.some(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.some(/** @type {!Array} */ (col), f, opt_obj);\n  }\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    if (f.call(opt_obj, values[i], keys && keys[i], col)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Calls f for each value in a collection. If all calls return true this return\n * true this returns true. If any returns false this returns false at this point\n *  and does not continue to check the remaining values.\n *\n * @param {S} col The collection-like object.\n * @param {function(this:T,?,?,S):boolean} f The function to call for every\n *     value. This function takes 3 arguments (the value, the key or\n *     undefined if the collection has no notion of keys, and the collection)\n *     and should return a boolean.\n * @param {T=} opt_obj  The object to be used as the value of 'this'\n *     within {@code f}.\n * @return {boolean} True if all key-value pairs pass the test.\n * @template T,S\n */\ngoog.structs.every = function(col, f, opt_obj) {\n  if (typeof col.every == 'function') {\n    return col.every(f, opt_obj);\n  }\n  if (goog.isArrayLike(col) || goog.isString(col)) {\n    return goog.array.every(/** @type {!Array} */ (col), f, opt_obj);\n  }\n  var keys = goog.structs.getKeys(col);\n  var values = goog.structs.getValues(col);\n  var l = values.length;\n  for (var i = 0; i < l; i++) {\n    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {\n      return false;\n    }\n  }\n  return true;\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Datastructure: Hash Map.\n *\n * @author arv@google.com (Erik Arvidsson)\n * @author jonp@google.com (Jon Perlow) Optimized for IE6\n *\n * This file contains an implementation of a Map structure. It implements a lot\n * of the methods used in goog.structs so those functions work on hashes.  For\n * convenience with common usage the methods accept any type for the key, though\n * internally they will be cast to strings.\n */\n\n\ngoog.provide('goog.structs.Map');\n\ngoog.require('goog.iter.Iterator');\ngoog.require('goog.iter.StopIteration');\ngoog.require('goog.object');\ngoog.require('goog.structs');\n\n\n\n/**\n * Class for Hash Map datastructure.\n * @param {*=} opt_map Map or Object to initialize the map with.\n * @param {...*} var_args If 2 or more arguments are present then they\n *     will be used as key-value pairs.\n * @constructor\n */\ngoog.structs.Map = function(opt_map, var_args) {\n\n  /**\n   * Underlying JS object used to implement the map.\n   * @type {!Object}\n   * @private\n   */\n  this.map_ = {};\n\n  /**\n   * An array of keys. This is necessary for two reasons:\n   *   1. Iterating the keys using for (var key in this.map_) allocates an\n   *      object for every key in IE which is really bad for IE6 GC perf.\n   *   2. Without a side data structure, we would need to escape all the keys\n   *      as that would be the only way we could tell during iteration if the\n   *      key was an internal key or a property of the object.\n   *\n   * This array can contain deleted keys so it's necessary to check the map\n   * as well to see if the key is still in the map (this doesn't require a\n   * memory allocation in IE).\n   * @type {!Array.<string>}\n   * @private\n   */\n  this.keys_ = [];\n\n  var argLength = arguments.length;\n\n  if (argLength > 1) {\n    if (argLength % 2) {\n      throw Error('Uneven number of arguments');\n    }\n    for (var i = 0; i < argLength; i += 2) {\n      this.set(arguments[i], arguments[i + 1]);\n    }\n  } else if (opt_map) {\n    this.addAll(/** @type {Object} */ (opt_map));\n  }\n};\n\n\n/**\n * The number of key value pairs in the map.\n * @private\n * @type {number}\n */\ngoog.structs.Map.prototype.count_ = 0;\n\n\n/**\n * Version used to detect changes while iterating.\n * @private\n * @type {number}\n */\ngoog.structs.Map.prototype.version_ = 0;\n\n\n/**\n * @return {number} The number of key-value pairs in the map.\n */\ngoog.structs.Map.prototype.getCount = function() {\n  return this.count_;\n};\n\n\n/**\n * Returns the values of the map.\n * @return {!Array} The values in the map.\n */\ngoog.structs.Map.prototype.getValues = function() {\n  this.cleanupKeysArray_();\n\n  var rv = [];\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    rv.push(this.map_[key]);\n  }\n  return rv;\n};\n\n\n/**\n * Returns the keys of the map.\n * @return {!Array.<string>} Array of string values.\n */\ngoog.structs.Map.prototype.getKeys = function() {\n  this.cleanupKeysArray_();\n  return /** @type {!Array.<string>} */ (this.keys_.concat());\n};\n\n\n/**\n * Whether the map contains the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the map contains the key.\n */\ngoog.structs.Map.prototype.containsKey = function(key) {\n  return goog.structs.Map.hasKey_(this.map_, key);\n};\n\n\n/**\n * Whether the map contains the given value. This is O(n).\n * @param {*} val The value to check for.\n * @return {boolean} Whether the map contains the value.\n */\ngoog.structs.Map.prototype.containsValue = function(val) {\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Whether this map is equal to the argument map.\n * @param {goog.structs.Map} otherMap The map against which to test equality.\n * @param {function(?, ?) : boolean=} opt_equalityFn Optional equality function\n *     to test equality of values. If not specified, this will test whether\n *     the values contained in each map are identical objects.\n * @return {boolean} Whether the maps are equal.\n */\ngoog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {\n  if (this === otherMap) {\n    return true;\n  }\n\n  if (this.count_ != otherMap.getCount()) {\n    return false;\n  }\n\n  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;\n\n  this.cleanupKeysArray_();\n  for (var key, i = 0; key = this.keys_[i]; i++) {\n    if (!equalityFn(this.get(key), otherMap.get(key))) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n\n/**\n * Default equality test for values.\n * @param {*} a The first value.\n * @param {*} b The second value.\n * @return {boolean} Whether a and b reference the same object.\n */\ngoog.structs.Map.defaultEquals = function(a, b) {\n  return a === b;\n};\n\n\n/**\n * @return {boolean} Whether the map is empty.\n */\ngoog.structs.Map.prototype.isEmpty = function() {\n  return this.count_ == 0;\n};\n\n\n/**\n * Removes all key-value pairs from the map.\n */\ngoog.structs.Map.prototype.clear = function() {\n  this.map_ = {};\n  this.keys_.length = 0;\n  this.count_ = 0;\n  this.version_ = 0;\n};\n\n\n/**\n * Removes a key-value pair based on the key. This is O(logN) amortized due to\n * updating the keys array whenever the count becomes half the size of the keys\n * in the keys array.\n * @param {*} key  The key to remove.\n * @return {boolean} Whether object was removed.\n */\ngoog.structs.Map.prototype.remove = function(key) {\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    delete this.map_[key];\n    this.count_--;\n    this.version_++;\n\n    // clean up the keys array if the threshhold is hit\n    if (this.keys_.length > 2 * this.count_) {\n      this.cleanupKeysArray_();\n    }\n\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * Cleans up the temp keys array by removing entries that are no longer in the\n * map.\n * @private\n */\ngoog.structs.Map.prototype.cleanupKeysArray_ = function() {\n  if (this.count_ != this.keys_.length) {\n    // First remove keys that are no longer in the map.\n    var srcIndex = 0;\n    var destIndex = 0;\n    while (srcIndex < this.keys_.length) {\n      var key = this.keys_[srcIndex];\n      if (goog.structs.Map.hasKey_(this.map_, key)) {\n        this.keys_[destIndex++] = key;\n      }\n      srcIndex++;\n    }\n    this.keys_.length = destIndex;\n  }\n\n  if (this.count_ != this.keys_.length) {\n    // If the count still isn't correct, that means we have duplicates. This can\n    // happen when the same key is added and removed multiple times. Now we have\n    // to allocate one extra Object to remove the duplicates. This could have\n    // been done in the first pass, but in the common case, we can avoid\n    // allocating an extra object by only doing this when necessary.\n    var seen = {};\n    var srcIndex = 0;\n    var destIndex = 0;\n    while (srcIndex < this.keys_.length) {\n      var key = this.keys_[srcIndex];\n      if (!(goog.structs.Map.hasKey_(seen, key))) {\n        this.keys_[destIndex++] = key;\n        seen[key] = 1;\n      }\n      srcIndex++;\n    }\n    this.keys_.length = destIndex;\n  }\n};\n\n\n/**\n * Returns the value for the given key.  If the key is not found and the default\n * value is not given this will return {@code undefined}.\n * @param {*} key The key to get the value for.\n * @param {*=} opt_val The value to return if no item is found for the given\n *     key, defaults to undefined.\n * @return {*} The value for the given key.\n */\ngoog.structs.Map.prototype.get = function(key, opt_val) {\n  if (goog.structs.Map.hasKey_(this.map_, key)) {\n    return this.map_[key];\n  }\n  return opt_val;\n};\n\n\n/**\n * Adds a key-value pair to the map.\n * @param {*} key The key.\n * @param {*} value The value to add.\n * @return {*} Some subclasses return a value.\n */\ngoog.structs.Map.prototype.set = function(key, value) {\n  if (!(goog.structs.Map.hasKey_(this.map_, key))) {\n    this.count_++;\n    this.keys_.push(key);\n    // Only change the version if we add a new key.\n    this.version_++;\n  }\n  this.map_[key] = value;\n};\n\n\n/**\n * Adds multiple key-value pairs from another goog.structs.Map or Object.\n * @param {Object} map  Object containing the data to add.\n */\ngoog.structs.Map.prototype.addAll = function(map) {\n  var keys, values;\n  if (map instanceof goog.structs.Map) {\n    keys = map.getKeys();\n    values = map.getValues();\n  } else {\n    keys = goog.object.getKeys(map);\n    values = goog.object.getValues(map);\n  }\n  // we could use goog.array.forEach here but I don't want to introduce that\n  // dependency just for this.\n  for (var i = 0; i < keys.length; i++) {\n    this.set(keys[i], values[i]);\n  }\n};\n\n\n/**\n * Clones a map and returns a new map.\n * @return {!goog.structs.Map} A new map with the same key-value pairs.\n */\ngoog.structs.Map.prototype.clone = function() {\n  return new goog.structs.Map(this);\n};\n\n\n/**\n * Returns a new map in which all the keys and values are interchanged\n * (keys become values and values become keys). If multiple keys map to the\n * same value, the chosen transposed value is implementation-dependent.\n *\n * It acts very similarly to {goog.object.transpose(Object)}.\n *\n * @return {!goog.structs.Map} The transposed map.\n */\ngoog.structs.Map.prototype.transpose = function() {\n  var transposed = new goog.structs.Map();\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    var value = this.map_[key];\n    transposed.set(value, key);\n  }\n\n  return transposed;\n};\n\n\n/**\n * @return {!Object} Object representation of the map.\n */\ngoog.structs.Map.prototype.toObject = function() {\n  this.cleanupKeysArray_();\n  var obj = {};\n  for (var i = 0; i < this.keys_.length; i++) {\n    var key = this.keys_[i];\n    obj[key] = this.map_[key];\n  }\n  return obj;\n};\n\n\n/**\n * Returns an iterator that iterates over the keys in the map.  Removal of keys\n * while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the keys in the map.\n */\ngoog.structs.Map.prototype.getKeyIterator = function() {\n  return this.__iterator__(true);\n};\n\n\n/**\n * Returns an iterator that iterates over the values in the map.  Removal of\n * keys while iterating might have undesired side effects.\n * @return {!goog.iter.Iterator} An iterator over the values in the map.\n */\ngoog.structs.Map.prototype.getValueIterator = function() {\n  return this.__iterator__(false);\n};\n\n\n/**\n * Returns an iterator that iterates over the values or the keys in the map.\n * This throws an exception if the map was mutated since the iterator was\n * created.\n * @param {boolean=} opt_keys True to iterate over the keys. False to iterate\n *     over the values.  The default value is false.\n * @return {!goog.iter.Iterator} An iterator over the values or keys in the map.\n */\ngoog.structs.Map.prototype.__iterator__ = function(opt_keys) {\n  // Clean up keys to minimize the risk of iterating over dead keys.\n  this.cleanupKeysArray_();\n\n  var i = 0;\n  var keys = this.keys_;\n  var map = this.map_;\n  var version = this.version_;\n  var selfObj = this;\n\n  var newIter = new goog.iter.Iterator;\n  newIter.next = function() {\n    while (true) {\n      if (version != selfObj.version_) {\n        throw Error('The map has changed since the iterator was created');\n      }\n      if (i >= keys.length) {\n        throw goog.iter.StopIteration;\n      }\n      var key = keys[i++];\n      return opt_keys ? key : map[key];\n    }\n  };\n  return newIter;\n};\n\n\n/**\n * Safe way to test for hasOwnProperty.  It even allows testing for\n * 'hasOwnProperty'.\n * @param {Object} obj The object to test for presence of the given key.\n * @param {*} key The key to check for.\n * @return {boolean} Whether the object has the key.\n * @private\n */\ngoog.structs.Map.hasKey_ = function(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview JSON utility functions.\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide('goog.json');\ngoog.provide('goog.json.Serializer');\n\n\n/**\n * Tests if a string is an invalid JSON string. This only ensures that we are\n * not using any invalid characters\n * @param {string} s The string to test.\n * @return {boolean} True if the input is a valid JSON string.\n * @private\n */\ngoog.json.isValid_ = function(s) {\n  // All empty whitespace is not valid.\n  if (/^\\s*$/.test(s)) {\n    return false;\n  }\n\n  // This is taken from http://www.json.org/json2.js which is released to the\n  // public domain.\n  // Changes: We dissallow \\u2028 Line separator and \\u2029 Paragraph separator\n  // inside strings.  We also treat \\u2028 and \\u2029 as whitespace which they\n  // are in the RFC but IE and Safari does not match \\s to these so we need to\n  // include them in the reg exps in all places where whitespace is allowed.\n  // We allowed \\x7f inside strings because some tools don't escape it,\n  // e.g. http://www.json.org/java/org/json/JSONObject.java\n\n  // Parsing happens in three stages. In the first stage, we run the text\n  // against regular expressions that look for non-JSON patterns. We are\n  // especially concerned with '()' and 'new' because they can cause invocation,\n  // and '=' because it can cause mutation. But just to be safe, we want to\n  // reject all unexpected forms.\n\n  // We split the first stage into 4 regexp operations in order to work around\n  // crippling inefficiencies in IE's and Safari's regexp engines. First we\n  // replace all backslash pairs with '@' (a non-JSON character). Second, we\n  // replace all simple value tokens with ']' characters. Third, we delete all\n  // open brackets that follow a colon or comma or that begin the text. Finally,\n  // we look to see that the remaining characters are only whitespace or ']' or\n  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.\n\n  // Don't make these static since they have the global flag.\n  var backslashesRe = /\\\\[\"\\\\\\/bfnrtu]/g;\n  var simpleValuesRe =\n      /\"[^\"\\\\\\n\\r\\u2028\\u2029\\x00-\\x08\\x0a-\\x1f]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\n  var openBracketsRe = /(?:^|:|,)(?:[\\s\\u2028\\u2029]*\\[)+/g;\n  var remainderRe = /^[\\],:{}\\s\\u2028\\u2029]*$/;\n\n  return remainderRe.test(s.replace(backslashesRe, '@').\n      replace(simpleValuesRe, ']').\n      replace(openBracketsRe, ''));\n};\n\n\n/**\n * Parses a JSON string and returns the result. This throws an exception if\n * the string is an invalid JSON string.\n *\n * Note that this is very slow on large strings. If you trust the source of\n * the string then you should use unsafeParse instead.\n *\n * @param {*} s The JSON string to parse.\n * @return {Object} The object generated from the JSON string.\n */\ngoog.json.parse = function(s) {\n  var o = String(s);\n  if (goog.json.isValid_(o)) {\n    /** @preserveTry */\n    try {\n      return /** @type {Object} */ (eval('(' + o + ')'));\n    } catch (ex) {\n    }\n  }\n  throw Error('Invalid JSON string: ' + o);\n};\n\n\n/**\n * Parses a JSON string and returns the result. This uses eval so it is open\n * to security issues and it should only be used if you trust the source.\n *\n * @param {string} s The JSON string to parse.\n * @return {Object} The object generated from the JSON string.\n */\ngoog.json.unsafeParse = function(s) {\n  return /** @type {Object} */ (eval('(' + s + ')'));\n};\n\n\n/**\n * JSON replacer, as defined in Section 15.12.3 of the ES5 spec.\n *\n * TODO(nicksantos): Array should also be a valid replacer.\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Replacer;\n\n\n/**\n * JSON reviver, as defined in Section 15.12.2 of the ES5 spec.\n *\n * @typedef {function(this:Object, string, *): *}\n */\ngoog.json.Reviver;\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @param {?goog.json.Replacer=} opt_replacer A replacer function\n *     called for each (key, value) pair that determines how the value\n *     should be serialized. By defult, this just returns the value\n *     and allows default serialization to kick in.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.serialize = function(object, opt_replacer) {\n  // NOTE(nicksantos): Currently, we never use JSON.stringify.\n  //\n  // The last time I evaluated this, JSON.stringify had subtle bugs and behavior\n  // differences on all browsers, and the performance win was not large enough\n  // to justify all the issues. This may change in the future as browser\n  // implementations get better.\n  //\n  // assertSerialize in json_test contains if branches for the cases\n  // that fail.\n  return new goog.json.Serializer(opt_replacer).serialize(object);\n};\n\n\n\n/**\n * Class that is used to serialize JSON objects to a string.\n * @param {?goog.json.Replacer=} opt_replacer Replacer.\n * @constructor\n */\ngoog.json.Serializer = function(opt_replacer) {\n  /**\n   * @type {goog.json.Replacer|null|undefined}\n   * @private\n   */\n  this.replacer_ = opt_replacer;\n};\n\n\n/**\n * Serializes an object or a value to a JSON string.\n *\n * @param {*} object The object to serialize.\n * @throws Error if there are loops in the object graph.\n * @return {string} A JSON string representation of the input.\n */\ngoog.json.Serializer.prototype.serialize = function(object) {\n  var sb = [];\n  this.serialize_(object, sb);\n  return sb.join('');\n};\n\n\n/**\n * Serializes a generic value to a JSON string\n * @private\n * @param {*} object The object to serialize.\n * @param {Array} sb Array used as a string builder.\n * @throws Error if there are loops in the object graph.\n */\ngoog.json.Serializer.prototype.serialize_ = function(object, sb) {\n  switch (typeof object) {\n    case 'string':\n      this.serializeString_(/** @type {string} */ (object), sb);\n      break;\n    case 'number':\n      this.serializeNumber_(/** @type {number} */ (object), sb);\n      break;\n    case 'boolean':\n      sb.push(object);\n      break;\n    case 'undefined':\n      sb.push('null');\n      break;\n    case 'object':\n      if (object == null) {\n        sb.push('null');\n        break;\n      }\n      if (goog.isArray(object)) {\n        this.serializeArray(/** @type {!Array} */ (object), sb);\n        break;\n      }\n      // should we allow new String, new Number and new Boolean to be treated\n      // as string, number and boolean? Most implementations do not and the\n      // need is not very big\n      this.serializeObject_(/** @type {Object} */ (object), sb);\n      break;\n    case 'function':\n      // Skip functions.\n      // TODO(user) Should we return something here?\n      break;\n    default:\n      throw Error('Unknown type: ' + typeof object);\n  }\n};\n\n\n/**\n * Character mappings used internally for goog.string.quote\n * @private\n * @type {Object}\n */\ngoog.json.Serializer.charToJsonCharCache_ = {\n  '\\\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '/': '\\\\/',\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n\n  '\\x0B': '\\\\u000b' // '\\v' is not supported in JScript\n};\n\n\n/**\n * Regular expression used to match characters that need to be replaced.\n * The S60 browser has a bug where unicode characters are not matched by\n * regular expressions. The condition below detects such behaviour and\n * adjusts the regular expression accordingly.\n * @private\n * @type {RegExp}\n */\ngoog.json.Serializer.charsToReplace_ = /\\uffff/.test('\\uffff') ?\n    /[\\\\\\\"\\x00-\\x1f\\x7f-\\uffff]/g : /[\\\\\\\"\\x00-\\x1f\\x7f-\\xff]/g;\n\n\n/**\n * Serializes a string to a JSON string\n * @private\n * @param {string} s The string to serialize.\n * @param {Array} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeString_ = function(s, sb) {\n  // The official JSON implementation does not work with international\n  // characters.\n  sb.push('\"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {\n    // caching the result improves performance by a factor 2-3\n    if (c in goog.json.Serializer.charToJsonCharCache_) {\n      return goog.json.Serializer.charToJsonCharCache_[c];\n    }\n\n    var cc = c.charCodeAt(0);\n    var rv = '\\\\u';\n    if (cc < 16) {\n      rv += '000';\n    } else if (cc < 256) {\n      rv += '00';\n    } else if (cc < 4096) { // \\u1000\n      rv += '0';\n    }\n    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);\n  }), '\"');\n};\n\n\n/**\n * Serializes a number to a JSON string\n * @private\n * @param {number} n The number to serialize.\n * @param {Array} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {\n  sb.push(isFinite(n) && !isNaN(n) ? n : 'null');\n};\n\n\n/**\n * Serializes an array to a JSON string\n * @param {Array} arr The array to serialize.\n * @param {Array} sb Array used as a string builder.\n * @protected\n */\ngoog.json.Serializer.prototype.serializeArray = function(arr, sb) {\n  var l = arr.length;\n  sb.push('[');\n  var sep = '';\n  for (var i = 0; i < l; i++) {\n    sb.push(sep);\n\n    var value = arr[i];\n    this.serialize_(\n        this.replacer_ ? this.replacer_.call(arr, String(i), value) : value,\n        sb);\n\n    sep = ',';\n  }\n  sb.push(']');\n};\n\n\n/**\n * Serializes an object to a JSON string\n * @private\n * @param {Object} obj The object to serialize.\n * @param {Array} sb Array used as a string builder.\n */\ngoog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {\n  sb.push('{');\n  var sep = '';\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var value = obj[key];\n      // Skip functions.\n      // TODO(ptucker) Should we return something for function properties?\n      if (typeof value != 'function') {\n        sb.push(sep);\n        this.serializeString_(key, sb);\n        sb.push(':');\n\n        this.serialize_(\n            this.replacer_ ? this.replacer_.call(obj, key, value) : value,\n            sb);\n\n        sep = ',';\n      }\n    }\n  }\n  sb.push('}');\n};\n",
		"// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Interface for a factory for creating XMLHttpRequest objects\n * and metadata about them.\n * @author dbk@google.com (David Barrett-Kahn)\n */\n\ngoog.provide('goog.net.XmlHttpFactory');\n\n\n\n/**\n * Abstract base class for an XmlHttpRequest factory.\n * @constructor\n */\ngoog.net.XmlHttpFactory = function() {\n};\n\n\n/**\n * Cache of options - we only actually call internalGetOptions once.\n * @type {Object}\n * @private\n */\ngoog.net.XmlHttpFactory.prototype.cachedOptions_ = null;\n\n\n/**\n * @return {!(XMLHttpRequest|GearsHttpRequest)} A new XMLHttpRequest instance.\n */\ngoog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;\n\n\n/**\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n */\ngoog.net.XmlHttpFactory.prototype.getOptions = function() {\n  return this.cachedOptions_ ||\n      (this.cachedOptions_ = this.internalGetOptions());\n};\n\n\n/**\n * Override this method in subclasses to preserve the caching offered by\n * getOptions().\n * @return {Object} Options describing how xhr objects obtained from this\n *     factory should be used.\n * @protected\n */\ngoog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Low level handling of XMLHttpRequest.\n * @author arv@google.com (Erik Arvidsson)\n * @author dbk@google.com (David Barrett-Kahn)\n */\n\ngoog.provide('goog.net.DefaultXmlHttpFactory');\ngoog.provide('goog.net.XmlHttp');\ngoog.provide('goog.net.XmlHttp.OptionType');\ngoog.provide('goog.net.XmlHttp.ReadyState');\n\ngoog.require('goog.net.WrapperXmlHttpFactory');\ngoog.require('goog.net.XmlHttpFactory');\n\n\n/**\n * Static class for creating XMLHttpRequest objects.\n * @return {!(XMLHttpRequest|GearsHttpRequest)} A new XMLHttpRequest object.\n */\ngoog.net.XmlHttp = function() {\n  return goog.net.XmlHttp.factory_.createInstance();\n};\n\n\n/**\n * @define {boolean} Whether to assume XMLHttpRequest exists. Setting this to\n *     true strips the ActiveX probing code.\n */\ngoog.net.XmlHttp.ASSUME_NATIVE_XHR = false;\n\n\n/**\n * Gets the options to use with the XMLHttpRequest objects obtained using\n * the static methods.\n * @return {Object} The options.\n */\ngoog.net.XmlHttp.getOptions = function() {\n  return goog.net.XmlHttp.factory_.getOptions();\n};\n\n\n/**\n * Type of options that an XmlHttp object can have.\n * @enum {number}\n */\ngoog.net.XmlHttp.OptionType = {\n  /**\n   * Whether a goog.nullFunction should be used to clear the onreadystatechange\n   * handler instead of null.\n   */\n  USE_NULL_FUNCTION: 0,\n\n  /**\n   * NOTE(user): In IE if send() errors on a *local* request the readystate\n   * is still changed to COMPLETE.  We need to ignore it and allow the\n   * try/catch around send() to pick up the error.\n   */\n  LOCAL_REQUEST_ERROR: 1\n};\n\n\n/**\n * Status constants for XMLHTTP, matches:\n * http://msdn.microsoft.com/library/default.asp?url=/library/\n *   en-us/xmlsdk/html/0e6a34e4-f90c-489d-acff-cb44242fafc6.asp\n * @enum {number}\n */\ngoog.net.XmlHttp.ReadyState = {\n  /**\n   * Constant for when xmlhttprequest.readyState is uninitialized\n   */\n  UNINITIALIZED: 0,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is loading.\n   */\n  LOADING: 1,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is loaded.\n   */\n  LOADED: 2,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is in an interactive state.\n   */\n  INTERACTIVE: 3,\n\n  /**\n   * Constant for when xmlhttprequest.readyState is completed\n   */\n  COMPLETE: 4\n};\n\n\n/**\n * The global factory instance for creating XMLHttpRequest objects.\n * @type {goog.net.XmlHttpFactory}\n * @private\n */\ngoog.net.XmlHttp.factory_;\n\n\n/**\n * Sets the factories for creating XMLHttpRequest objects and their options.\n * @param {Function} factory The factory for XMLHttpRequest objects.\n * @param {Function} optionsFactory The factory for options.\n * @deprecated Use setGlobalFactory instead.\n */\ngoog.net.XmlHttp.setFactory = function(factory, optionsFactory) {\n  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(\n      /** @type {function() : !(XMLHttpRequest|GearsHttpRequest)} */ (factory),\n      /** @type {function() : !Object}*/ (optionsFactory)));\n};\n\n\n/**\n * Sets the global factory object.\n * @param {!goog.net.XmlHttpFactory} factory New global factory object.\n */\ngoog.net.XmlHttp.setGlobalFactory = function(factory) {\n  goog.net.XmlHttp.factory_ = factory;\n};\n\n\n\n/**\n * Default factory to use when creating xhr objects.  You probably shouldn't be\n * instantiating this directly, but rather using it via goog.net.XmlHttp.\n * @extends {goog.net.XmlHttpFactory}\n * @constructor\n */\ngoog.net.DefaultXmlHttpFactory = function() {\n  goog.net.XmlHttpFactory.call(this);\n};\ngoog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);\n\n\n/** @override */\ngoog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {\n  var progId = this.getProgId_();\n  if (progId) {\n    return new ActiveXObject(progId);\n  } else {\n    return new XMLHttpRequest();\n  }\n};\n\n\n/** @override */\ngoog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {\n  var progId = this.getProgId_();\n  var options = {};\n  if (progId) {\n    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;\n    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;\n  }\n  return options;\n};\n\n\n/**\n * The ActiveX PROG ID string to use to create xhr's in IE. Lazily initialized.\n * @type {string|undefined}\n * @private\n */\ngoog.net.DefaultXmlHttpFactory.prototype.ieProgId_;\n\n\n/**\n * Initialize the private state used by other functions.\n * @return {string} The ActiveX PROG ID string to use to create xhr's in IE.\n * @private\n */\ngoog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {\n  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR) {\n    return '';\n  }\n\n  // The following blog post describes what PROG IDs to use to create the\n  // XMLHTTP object in Internet Explorer:\n  // http://blogs.msdn.com/xmlteam/archive/2006/10/23/using-the-right-version-of-msxml-in-internet-explorer.aspx\n  // However we do not (yet) fully trust that this will be OK for old versions\n  // of IE on Win9x so we therefore keep the last 2.\n  if (!this.ieProgId_ && typeof XMLHttpRequest == 'undefined' &&\n      typeof ActiveXObject != 'undefined') {\n    // Candidate Active X types.\n    var ACTIVE_X_IDENTS = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0',\n                           'MSXML2.XMLHTTP', 'Microsoft.XMLHTTP'];\n    for (var i = 0; i < ACTIVE_X_IDENTS.length; i++) {\n      var candidate = ACTIVE_X_IDENTS[i];\n      /** @preserveTry */\n      try {\n        new ActiveXObject(candidate);\n        // NOTE(user): cannot assign progid and return candidate in one line\n        // because JSCompiler complaings: BUG 658126\n        this.ieProgId_ = candidate;\n        return candidate;\n      } catch (e) {\n        // do nothing; try next choice\n      }\n    }\n\n    // couldn't find any matches\n    throw Error('Could not create ActiveXObject. ActiveX might be disabled,' +\n                ' or MSXML might not be installed');\n  }\n\n  return /** @type {string} */ (this.ieProgId_);\n};\n\n\n//Set the global factory to an instance of the default factory.\ngoog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory());\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Logging and debugging utilities.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug');\n\ngoog.require('goog.array');\ngoog.require('goog.string');\ngoog.require('goog.structs.Set');\ngoog.require('goog.userAgent');\n\n\n/**\n * Catches onerror events fired by windows and similar objects.\n * @param {function(Object)} logFunc The function to call with the error\n *    information.\n * @param {boolean=} opt_cancel Whether to stop the error from reaching the\n *    browser.\n * @param {Object=} opt_target Object that fires onerror events.\n */\ngoog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {\n  var target = opt_target || goog.global;\n  var oldErrorHandler = target.onerror;\n  var retVal = !!opt_cancel;\n\n  // Chrome interprets onerror return value backwards (http://crbug.com/92062)\n  // until it was fixed in webkit revision r94061 (Webkit 535.3). This\n  // workaround still needs to be skipped in Safari after the webkit change\n  // gets pushed out in Safari.\n  // See https://bugs.webkit.org/show_bug.cgi?id=67119\n  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersion('535.3')) {\n    retVal = !retVal;\n  }\n  target.onerror = function(message, url, line) {\n    if (oldErrorHandler) {\n      oldErrorHandler(message, url, line);\n    }\n    logFunc({\n      message: message,\n      fileName: url,\n      line: line\n    });\n    return retVal;\n  };\n};\n\n\n/**\n * Creates a string representing an object and all its properties.\n * @param {Object|null|undefined} obj Object to expose.\n * @param {boolean=} opt_showFn Show the functions as well as the properties,\n *     default is false.\n * @return {string} The string representation of {@code obj}.\n */\ngoog.debug.expose = function(obj, opt_showFn) {\n  if (typeof obj == 'undefined') {\n    return 'undefined';\n  }\n  if (obj == null) {\n    return 'NULL';\n  }\n  var str = [];\n\n  for (var x in obj) {\n    if (!opt_showFn && goog.isFunction(obj[x])) {\n      continue;\n    }\n    var s = x + ' = ';\n    /** @preserveTry */\n    try {\n      s += obj[x];\n    } catch (e) {\n      s += '*** ' + e + ' ***';\n    }\n    str.push(s);\n  }\n  return str.join('\\n');\n};\n\n\n/**\n * Creates a string representing a given primitive or object, and for an\n * object, all its properties and nested objects.  WARNING: If an object is\n * given, it and all its nested objects will be modified.  To detect reference\n * cycles, this method identifies objects using goog.getUid() which mutates the\n * object.\n * @param {*} obj Object to expose.\n * @param {boolean=} opt_showFn Also show properties that are functions (by\n *     default, functions are omitted).\n * @return {string} A string representation of {@code obj}.\n */\ngoog.debug.deepExpose = function(obj, opt_showFn) {\n  var previous = new goog.structs.Set();\n  var str = [];\n\n  var helper = function(obj, space) {\n    var nestspace = space + '  ';\n\n    var indentMultiline = function(str) {\n      return str.replace(/\\n/g, '\\n' + space);\n    };\n\n    /** @preserveTry */\n    try {\n      if (!goog.isDef(obj)) {\n        str.push('undefined');\n      } else if (goog.isNull(obj)) {\n        str.push('NULL');\n      } else if (goog.isString(obj)) {\n        str.push('\"' + indentMultiline(obj) + '\"');\n      } else if (goog.isFunction(obj)) {\n        str.push(indentMultiline(String(obj)));\n      } else if (goog.isObject(obj)) {\n        if (previous.contains(obj)) {\n          // TODO(user): This is a bug; it falsely detects non-loops as loops\n          // when the reference tree contains two references to the same object.\n          str.push('*** reference loop detected ***');\n        } else {\n          previous.add(obj);\n          str.push('{');\n          for (var x in obj) {\n            if (!opt_showFn && goog.isFunction(obj[x])) {\n              continue;\n            }\n            str.push('\\n');\n            str.push(nestspace);\n            str.push(x + ' = ');\n            helper(obj[x], nestspace);\n          }\n          str.push('\\n' + space + '}');\n        }\n      } else {\n        str.push(obj);\n      }\n    } catch (e) {\n      str.push('*** ' + e + ' ***');\n    }\n  };\n\n  helper(obj, '');\n  return str.join('');\n};\n\n\n/**\n * Recursively outputs a nested array as a string.\n * @param {Array} arr The array.\n * @return {string} String representing nested array.\n */\ngoog.debug.exposeArray = function(arr) {\n  var str = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (goog.isArray(arr[i])) {\n      str.push(goog.debug.exposeArray(arr[i]));\n    } else {\n      str.push(arr[i]);\n    }\n  }\n  return '[ ' + str.join(', ') + ' ]';\n};\n\n\n/**\n * Exposes an exception that has been caught by a try...catch and outputs the\n * error with a stack trace.\n * @param {Object} err Error object or string.\n * @param {Function=} opt_fn Optional function to start stack trace from.\n * @return {string} Details of exception.\n */\ngoog.debug.exposeException = function(err, opt_fn) {\n  /** @preserveTry */\n  try {\n    var e = goog.debug.normalizeErrorObject(err);\n\n    // Create the error message\n    var error = 'Message: ' + goog.string.htmlEscape(e.message) +\n        '\\nUrl: <a href=\"view-source:' + e.fileName + '\" target=\"_new\">' +\n        e.fileName + '</a>\\nLine: ' + e.lineNumber + '\\n\\nBrowser stack:\\n' +\n        goog.string.htmlEscape(e.stack + '-> ') +\n        '[end]\\n\\nJS stack traversal:\\n' + goog.string.htmlEscape(\n            goog.debug.getStacktrace(opt_fn) + '-> ');\n    return error;\n  } catch (e2) {\n    return 'Exception trying to expose exception! You win, we lose. ' + e2;\n  }\n};\n\n\n/**\n * Normalizes the error/exception object between browsers.\n * @param {Object} err Raw error object.\n * @return {Object} Normalized error object.\n */\ngoog.debug.normalizeErrorObject = function(err) {\n  var href = goog.getObjectByName('window.location.href');\n  if (goog.isString(err)) {\n    return {\n      'message': err,\n      'name': 'Unknown error',\n      'lineNumber': 'Not available',\n      'fileName': href,\n      'stack': 'Not available'\n    };\n  }\n\n  var lineNumber, fileName;\n  var threwError = false;\n\n  try {\n    lineNumber = err.lineNumber || err.line || 'Not available';\n  } catch (e) {\n    // Firefox 2 sometimes throws an error when accessing 'lineNumber':\n    // Message: Permission denied to get property UnnamedClass.lineNumber\n    lineNumber = 'Not available';\n    threwError = true;\n  }\n\n  try {\n    fileName = err.fileName || err.filename || err.sourceURL ||\n        // $googDebugFname may be set before a call to eval to set the filename\n        // that the eval is supposed to present.\n        goog.global['$googDebugFname'] || href;\n  } catch (e) {\n    // Firefox 2 may also throw an error when accessing 'filename'.\n    fileName = 'Not available';\n    threwError = true;\n  }\n\n  // The IE Error object contains only the name and the message.\n  // The Safari Error object uses the line and sourceURL fields.\n  if (threwError || !err.lineNumber || !err.fileName || !err.stack) {\n    return {\n      'message': err.message,\n      'name': err.name,\n      'lineNumber': lineNumber,\n      'fileName': fileName,\n      'stack': err.stack || 'Not available'\n    };\n  }\n\n  // Standards error object\n  return err;\n};\n\n\n/**\n * Converts an object to an Error if it's a String,\n * adds a stacktrace if there isn't one,\n * and optionally adds an extra message.\n * @param {Error|string} err  the original thrown object or string.\n * @param {string=} opt_message  optional additional message to add to the\n *     error.\n * @return {Error} If err is a string, it is used to create a new Error,\n *     which is enhanced and returned.  Otherwise err itself is enhanced\n *     and returned.\n */\ngoog.debug.enhanceError = function(err, opt_message) {\n  var error = typeof err == 'string' ? Error(err) : err;\n  if (!error.stack) {\n    error.stack = goog.debug.getStacktrace(arguments.callee.caller);\n  }\n  if (opt_message) {\n    // find the first unoccupied 'messageX' property\n    var x = 0;\n    while (error['message' + x]) {\n      ++x;\n    }\n    error['message' + x] = String(opt_message);\n  }\n  return error;\n};\n\n\n/**\n * Gets the current stack trace. Simple and iterative - doesn't worry about\n * catching circular references or getting the args.\n * @param {number=} opt_depth Optional maximum depth to trace back to.\n * @return {string} A string with the function names of all functions in the\n *     stack, separated by \\n.\n */\ngoog.debug.getStacktraceSimple = function(opt_depth) {\n  var sb = [];\n  var fn = arguments.callee.caller;\n  var depth = 0;\n\n  while (fn && (!opt_depth || depth < opt_depth)) {\n    sb.push(goog.debug.getFunctionName(fn));\n    sb.push('()\\n');\n    /** @preserveTry */\n    try {\n      fn = fn.caller;\n    } catch (e) {\n      sb.push('[exception trying to get caller]\\n');\n      break;\n    }\n    depth++;\n    if (depth >= goog.debug.MAX_STACK_DEPTH) {\n      sb.push('[...long stack...]');\n      break;\n    }\n  }\n  if (opt_depth && depth >= opt_depth) {\n    sb.push('[...reached max depth limit...]');\n  } else {\n    sb.push('[end]');\n  }\n\n  return sb.join('');\n};\n\n\n/**\n * Max length of stack to try and output\n * @type {number}\n */\ngoog.debug.MAX_STACK_DEPTH = 50;\n\n\n/**\n * Gets the current stack trace, either starting from the caller or starting\n * from a specified function that's currently on the call stack.\n * @param {Function=} opt_fn Optional function to start getting the trace from.\n *     If not provided, defaults to the function that called this.\n * @return {string} Stack trace.\n */\ngoog.debug.getStacktrace = function(opt_fn) {\n  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);\n};\n\n\n/**\n * Private helper for getStacktrace().\n * @param {Function} fn Function to start getting the trace from.\n * @param {Array} visited List of functions visited so far.\n * @return {string} Stack trace starting from function fn.\n * @private\n */\ngoog.debug.getStacktraceHelper_ = function(fn, visited) {\n  var sb = [];\n\n  // Circular reference, certain functions like bind seem to cause a recursive\n  // loop so we need to catch circular references\n  if (goog.array.contains(visited, fn)) {\n    sb.push('[...circular reference...]');\n\n  // Traverse the call stack until function not found or max depth is reached\n  } else if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {\n    sb.push(goog.debug.getFunctionName(fn) + '(');\n    var args = fn.arguments;\n    for (var i = 0; i < args.length; i++) {\n      if (i > 0) {\n        sb.push(', ');\n      }\n      var argDesc;\n      var arg = args[i];\n      switch (typeof arg) {\n        case 'object':\n          argDesc = arg ? 'object' : 'null';\n          break;\n\n        case 'string':\n          argDesc = arg;\n          break;\n\n        case 'number':\n          argDesc = String(arg);\n          break;\n\n        case 'boolean':\n          argDesc = arg ? 'true' : 'false';\n          break;\n\n        case 'function':\n          argDesc = goog.debug.getFunctionName(arg);\n          argDesc = argDesc ? argDesc : '[fn]';\n          break;\n\n        case 'undefined':\n        default:\n          argDesc = typeof arg;\n          break;\n      }\n\n      if (argDesc.length > 40) {\n        argDesc = argDesc.substr(0, 40) + '...';\n      }\n      sb.push(argDesc);\n    }\n    visited.push(fn);\n    sb.push(')\\n');\n    /** @preserveTry */\n    try {\n      sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));\n    } catch (e) {\n      sb.push('[exception trying to get caller]\\n');\n    }\n\n  } else if (fn) {\n    sb.push('[...long stack...]');\n  } else {\n    sb.push('[end]');\n  }\n  return sb.join('');\n};\n\n\n/**\n * Set a custom function name resolver.\n * @param {function(Function): string} resolver Resolves functions to their\n *     names.\n */\ngoog.debug.setFunctionResolver = function(resolver) {\n  goog.debug.fnNameResolver_ = resolver;\n};\n\n\n/**\n * Gets a function name\n * @param {Function} fn Function to get name of.\n * @return {string} Function's name.\n */\ngoog.debug.getFunctionName = function(fn) {\n  if (goog.debug.fnNameCache_[fn]) {\n    return goog.debug.fnNameCache_[fn];\n  }\n  if (goog.debug.fnNameResolver_) {\n    var name = goog.debug.fnNameResolver_(fn);\n    if (name) {\n      goog.debug.fnNameCache_[fn] = name;\n      return name;\n    }\n  }\n\n  // Heuristically determine function name based on code.\n  var functionSource = String(fn);\n  if (!goog.debug.fnNameCache_[functionSource]) {\n    var matches = /function ([^\\(]+)/.exec(functionSource);\n    if (matches) {\n      var method = matches[1];\n      goog.debug.fnNameCache_[functionSource] = method;\n    } else {\n      goog.debug.fnNameCache_[functionSource] = '[Anonymous]';\n    }\n  }\n\n  return goog.debug.fnNameCache_[functionSource];\n};\n\n\n/**\n * Makes whitespace visible by replacing it with printable characters.\n * This is useful in finding diffrences between the expected and the actual\n * output strings of a testcase.\n * @param {string} string whose whitespace needs to be made visible.\n * @return {string} string whose whitespace is made visible.\n */\ngoog.debug.makeWhitespaceVisible = function(string) {\n  return string.replace(/ /g, '[_]')\n      .replace(/\\f/g, '[f]')\n      .replace(/\\n/g, '[n]\\n')\n      .replace(/\\r/g, '[r]')\n      .replace(/\\t/g, '[t]');\n};\n\n\n/**\n * Hash map for storing function names that have already been looked up.\n * @type {Object}\n * @private\n */\ngoog.debug.fnNameCache_ = {};\n\n\n/**\n * Resolves functions to their names.  Resolved function names will be cached.\n * @type {function(Function):string}\n * @private\n */\ngoog.debug.fnNameResolver_;\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the LogRecord class. Please minimize\n * dependencies this file has on other closure classes as any dependency it\n * takes won't be able to use the logging infrastructure.\n *\n */\n\ngoog.provide('goog.debug.LogRecord');\n\n\n\n/**\n * LogRecord objects are used to pass logging requests between\n * the logging framework and individual log Handlers.\n * @constructor\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {string} loggerName The name of the source logger.\n * @param {number=} opt_time Time this log record was created if other than now.\n *     If 0, we use #goog.now.\n * @param {number=} opt_sequenceNumber Sequence number of this log record. This\n *     should only be passed in when restoring a log record from persistence.\n */\ngoog.debug.LogRecord = function(level, msg, loggerName,\n    opt_time, opt_sequenceNumber) {\n  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);\n};\n\n\n/**\n * Time the LogRecord was created.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.prototype.time_;\n\n\n/**\n * Level of the LogRecord\n * @type {goog.debug.Logger.Level}\n * @private\n */\ngoog.debug.LogRecord.prototype.level_;\n\n\n/**\n * Message associated with the record\n * @type {string}\n * @private\n */\ngoog.debug.LogRecord.prototype.msg_;\n\n\n/**\n * Name of the logger that created the record.\n * @type {string}\n * @private\n */\ngoog.debug.LogRecord.prototype.loggerName_;\n\n\n/**\n * Sequence number for the LogRecord. Each record has a unique sequence number\n * that is greater than all log records created before it.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.prototype.sequenceNumber_ = 0;\n\n\n/**\n * Exception associated with the record\n * @type {Object}\n * @private\n */\ngoog.debug.LogRecord.prototype.exception_ = null;\n\n\n/**\n * Exception text associated with the record\n * @type {?string}\n * @private\n */\ngoog.debug.LogRecord.prototype.exceptionText_ = null;\n\n\n/**\n * @define {boolean} Whether to enable log sequence numbers.\n */\ngoog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = true;\n\n\n/**\n * A sequence counter for assigning increasing sequence numbers to LogRecord\n * objects.\n * @type {number}\n * @private\n */\ngoog.debug.LogRecord.nextSequenceNumber_ = 0;\n\n\n/**\n * Sets all fields of the log record.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {string} loggerName The name of the source logger.\n * @param {number=} opt_time Time this log record was created if other than now.\n *     If 0, we use #goog.now.\n * @param {number=} opt_sequenceNumber Sequence number of this log record. This\n *     should only be passed in when restoring a log record from persistence.\n */\ngoog.debug.LogRecord.prototype.reset = function(level, msg, loggerName,\n    opt_time, opt_sequenceNumber) {\n  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {\n    this.sequenceNumber_ = typeof opt_sequenceNumber == 'number' ?\n        opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;\n  }\n\n  this.time_ = opt_time || goog.now();\n  this.level_ = level;\n  this.msg_ = msg;\n  this.loggerName_ = loggerName;\n  delete this.exception_;\n  delete this.exceptionText_;\n};\n\n\n/**\n * Get the source Logger's name.\n *\n * @return {string} source logger name (may be null).\n */\ngoog.debug.LogRecord.prototype.getLoggerName = function() {\n  return this.loggerName_;\n};\n\n\n/**\n * Get the exception that is part of the log record.\n *\n * @return {Object} the exception.\n */\ngoog.debug.LogRecord.prototype.getException = function() {\n  return this.exception_;\n};\n\n\n/**\n * Set the exception that is part of the log record.\n *\n * @param {Object} exception the exception.\n */\ngoog.debug.LogRecord.prototype.setException = function(exception) {\n  this.exception_ = exception;\n};\n\n\n/**\n * Get the exception text that is part of the log record.\n *\n * @return {?string} Exception text.\n */\ngoog.debug.LogRecord.prototype.getExceptionText = function() {\n  return this.exceptionText_;\n};\n\n\n/**\n * Set the exception text that is part of the log record.\n *\n * @param {string} text The exception text.\n */\ngoog.debug.LogRecord.prototype.setExceptionText = function(text) {\n  this.exceptionText_ = text;\n};\n\n\n/**\n * Get the source Logger's name.\n *\n * @param {string} loggerName source logger name (may be null).\n */\ngoog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {\n  this.loggerName_ = loggerName;\n};\n\n\n/**\n * Get the logging message level, for example Level.SEVERE.\n * @return {goog.debug.Logger.Level} the logging message level.\n */\ngoog.debug.LogRecord.prototype.getLevel = function() {\n  return this.level_;\n};\n\n\n/**\n * Set the logging message level, for example Level.SEVERE.\n * @param {goog.debug.Logger.Level} level the logging message level.\n */\ngoog.debug.LogRecord.prototype.setLevel = function(level) {\n  this.level_ = level;\n};\n\n\n/**\n * Get the \"raw\" log message, before localization or formatting.\n *\n * @return {string} the raw message string.\n */\ngoog.debug.LogRecord.prototype.getMessage = function() {\n  return this.msg_;\n};\n\n\n/**\n * Set the \"raw\" log message, before localization or formatting.\n *\n * @param {string} msg the raw message string.\n */\ngoog.debug.LogRecord.prototype.setMessage = function(msg) {\n  this.msg_ = msg;\n};\n\n\n/**\n * Get event time in milliseconds since 1970.\n *\n * @return {number} event time in millis since 1970.\n */\ngoog.debug.LogRecord.prototype.getMillis = function() {\n  return this.time_;\n};\n\n\n/**\n * Set event time in milliseconds since 1970.\n *\n * @param {number} time event time in millis since 1970.\n */\ngoog.debug.LogRecord.prototype.setMillis = function(time) {\n  this.time_ = time;\n};\n\n\n/**\n * Get the sequence number.\n * <p>\n * Sequence numbers are normally assigned in the LogRecord\n * constructor, which assigns unique sequence numbers to\n * each new LogRecord in increasing order.\n * @return {number} the sequence number.\n */\ngoog.debug.LogRecord.prototype.getSequenceNumber = function() {\n  return this.sequenceNumber_;\n};\n\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Logger class. Please minimize dependencies\n * this file has on other closure classes as any dependency it takes won't be\n * able to use the logging infrastructure.\n *\n * @see ../demos/debug.html\n */\n\ngoog.provide('goog.debug.LogManager');\ngoog.provide('goog.debug.Logger');\ngoog.provide('goog.debug.Logger.Level');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.debug');\ngoog.require('goog.debug.LogBuffer');\ngoog.require('goog.debug.LogRecord');\n\n\n\n/**\n * The Logger is an object used for logging debug messages. Loggers are\n * normally named, using a hierarchical dot-separated namespace. Logger names\n * can be arbitrary strings, but they should normally be based on the package\n * name or class name of the logged component, such as goog.net.BrowserChannel.\n *\n * The Logger object is loosely based on the java class\n * java.util.logging.Logger. It supports different levels of filtering for\n * different loggers.\n *\n * The logger object should never be instantiated by application code. It\n * should always use the goog.debug.Logger.getLogger function.\n *\n * @constructor\n * @param {string} name The name of the Logger.\n */\ngoog.debug.Logger = function(name) {\n  /**\n   * Name of the Logger. Generally a dot-separated namespace\n   * @type {string}\n   * @private\n   */\n  this.name_ = name;\n};\n\n\n/**\n * Parent Logger.\n * @type {goog.debug.Logger}\n * @private\n */\ngoog.debug.Logger.prototype.parent_ = null;\n\n\n/**\n * Level that this logger only filters above. Null indicates it should\n * inherit from the parent.\n * @type {goog.debug.Logger.Level}\n * @private\n */\ngoog.debug.Logger.prototype.level_ = null;\n\n\n/**\n * Map of children loggers. The keys are the leaf names of the children and\n * the values are the child loggers.\n * @type {Object}\n * @private\n */\ngoog.debug.Logger.prototype.children_ = null;\n\n\n/**\n * Handlers that are listening to this logger.\n * @type {Array.<Function>}\n * @private\n */\ngoog.debug.Logger.prototype.handlers_ = null;\n\n\n/**\n * @define {boolean} Toggles whether loggers other than the root logger can have\n *     log handlers attached to them and whether they can have their log level\n *     set. Logging is a bit faster when this is set to false.\n */\ngoog.debug.Logger.ENABLE_HIERARCHY = true;\n\n\nif (!goog.debug.Logger.ENABLE_HIERARCHY) {\n  /**\n   * @type {!Array.<Function>}\n   * @private\n   */\n  goog.debug.Logger.rootHandlers_ = [];\n\n\n  /**\n   * @type {goog.debug.Logger.Level}\n   * @private\n   */\n  goog.debug.Logger.rootLevel_;\n}\n\n\n\n/**\n * The Level class defines a set of standard logging levels that\n * can be used to control logging output.  The logging Level objects\n * are ordered and are specified by ordered integers.  Enabling logging\n * at a given level also enables logging at all higher levels.\n * <p>\n * Clients should normally use the predefined Level constants such\n * as Level.SEVERE.\n * <p>\n * The levels in descending order are:\n * <ul>\n * <li>SEVERE (highest value)\n * <li>WARNING\n * <li>INFO\n * <li>CONFIG\n * <li>FINE\n * <li>FINER\n * <li>FINEST  (lowest value)\n * </ul>\n * In addition there is a level OFF that can be used to turn\n * off logging, and a level ALL that can be used to enable\n * logging of all messages.\n *\n * @param {string} name The name of the level.\n * @param {number} value The numeric value of the level.\n * @constructor\n */\ngoog.debug.Logger.Level = function(name, value) {\n  /**\n   * The name of the level\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * The numeric value of the level\n   * @type {number}\n   */\n  this.value = value;\n};\n\n\n/**\n * @return {string} String representation of the logger level.\n * @override\n */\ngoog.debug.Logger.Level.prototype.toString = function() {\n  return this.name;\n};\n\n\n/**\n * OFF is a special level that can be used to turn off logging.\n * This level is initialized to <CODE>Number.MAX_VALUE</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.OFF =\n    new goog.debug.Logger.Level('OFF', Infinity);\n\n\n/**\n * SHOUT is a message level for extra debugging loudness.\n * This level is initialized to <CODE>1200</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);\n\n\n/**\n * SEVERE is a message level indicating a serious failure.\n * This level is initialized to <CODE>1000</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);\n\n\n/**\n * WARNING is a message level indicating a potential problem.\n * This level is initialized to <CODE>900</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);\n\n\n/**\n * INFO is a message level for informational messages.\n * This level is initialized to <CODE>800</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);\n\n\n/**\n * CONFIG is a message level for static configuration messages.\n * This level is initialized to <CODE>700</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);\n\n\n/**\n * FINE is a message level providing tracing information.\n * This level is initialized to <CODE>500</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);\n\n\n/**\n * FINER indicates a fairly detailed tracing message.\n * This level is initialized to <CODE>400</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);\n\n/**\n * FINEST indicates a highly detailed tracing message.\n * This level is initialized to <CODE>300</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\n\ngoog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);\n\n\n/**\n * ALL indicates that all messages should be logged.\n * This level is initialized to <CODE>Number.MIN_VALUE</CODE>.\n * @type {!goog.debug.Logger.Level}\n */\ngoog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);\n\n\n/**\n * The predefined levels.\n * @type {!Array.<!goog.debug.Logger.Level>}\n * @final\n */\ngoog.debug.Logger.Level.PREDEFINED_LEVELS = [\n  goog.debug.Logger.Level.OFF,\n  goog.debug.Logger.Level.SHOUT,\n  goog.debug.Logger.Level.SEVERE,\n  goog.debug.Logger.Level.WARNING,\n  goog.debug.Logger.Level.INFO,\n  goog.debug.Logger.Level.CONFIG,\n  goog.debug.Logger.Level.FINE,\n  goog.debug.Logger.Level.FINER,\n  goog.debug.Logger.Level.FINEST,\n  goog.debug.Logger.Level.ALL];\n\n\n/**\n * A lookup map used to find the level object based on the name or value of\n * the level object.\n * @type {Object}\n * @private\n */\ngoog.debug.Logger.Level.predefinedLevelsCache_ = null;\n\n\n/**\n * Creates the predefined levels cache and populates it.\n * @private\n */\ngoog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {\n  goog.debug.Logger.Level.predefinedLevelsCache_ = {};\n  for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n       i++) {\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;\n    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;\n  }\n};\n\n\n/**\n * Gets the predefined level with the given name.\n * @param {string} name The name of the level.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevel = function(name) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;\n};\n\n\n/**\n * Gets the highest predefined level <= #value.\n * @param {number} value Level value.\n * @return {goog.debug.Logger.Level} The level, or null if none found.\n */\ngoog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {\n  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {\n    goog.debug.Logger.Level.createPredefinedLevelsCache_();\n  }\n\n  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {\n    return goog.debug.Logger.Level.predefinedLevelsCache_[value];\n  }\n\n  for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {\n    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];\n    if (level.value <= value) {\n      return level;\n    }\n  }\n  return null;\n};\n\n\n/**\n * Find or create a logger for a named subsystem. If a logger has already been\n * created with the given name it is returned. Otherwise a new logger is\n * created. If a new logger is created its log level will be configured based\n * on the LogManager configuration and it will configured to also send logging\n * output to its parent's handlers. It will be registered in the LogManager\n * global namespace.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.Logger.getLogger = function(name) {\n  return goog.debug.LogManager.getLogger(name);\n};\n\n\n/**\n * Logs a message to profiling tools, if available.\n * {@see http://code.google.com/webtoolkit/speedtracer/logging-api.html}\n * {@see http://msdn.microsoft.com/en-us/library/dd433074(VS.85).aspx}\n * @param {string} msg The message to log.\n */\ngoog.debug.Logger.logToProfilers = function(msg) {\n  // Using goog.global, as loggers might be used in window-less contexts.\n  if (goog.global['console']) {\n    if (goog.global['console']['timeStamp']) {\n      // Logs a message to Firebug, Web Inspector, SpeedTracer, etc.\n      goog.global['console']['timeStamp'](msg);\n    } else if (goog.global['console']['markTimeline']) {\n      // TODO(user): markTimeline is deprecated. Drop this else clause entirely\n      // after Chrome M14 hits stable.\n      goog.global['console']['markTimeline'](msg);\n    }\n  }\n\n  if (goog.global['msWriteProfilerMark']) {\n    // Logs a message to the Microsoft profiler\n    goog.global['msWriteProfilerMark'](msg);\n  }\n};\n\n\n/**\n * Gets the name of this logger.\n * @return {string} The name of this logger.\n */\ngoog.debug.Logger.prototype.getName = function() {\n  return this.name_;\n};\n\n\n/**\n * Adds a handler to the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to add.\n */\ngoog.debug.Logger.prototype.addHandler = function(handler) {\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    if (!this.handlers_) {\n      this.handlers_ = [];\n    }\n    this.handlers_.push(handler);\n  } else {\n    goog.asserts.assert(!this.name_,\n        'Cannot call addHandler on a non-root logger when ' +\n        'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n    goog.debug.Logger.rootHandlers_.push(handler);\n  }\n};\n\n\n/**\n * Removes a handler from the logger. This doesn't use the event system because\n * we want to be able to add logging to the event system.\n * @param {Function} handler Handler function to remove.\n * @return {boolean} Whether the handler was removed.\n */\ngoog.debug.Logger.prototype.removeHandler = function(handler) {\n  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ :\n      goog.debug.Logger.rootHandlers_;\n  return !!handlers && goog.array.remove(handlers, handler);\n};\n\n\n/**\n * Returns the parent of this logger.\n * @return {goog.debug.Logger} The parent logger or null if this is the root.\n */\ngoog.debug.Logger.prototype.getParent = function() {\n  return this.parent_;\n};\n\n\n/**\n * Returns the children of this logger as a map of the child name to the logger.\n * @return {!Object} The map where the keys are the child leaf names and the\n *     values are the Logger objects.\n */\ngoog.debug.Logger.prototype.getChildren = function() {\n  if (!this.children_) {\n    this.children_ = {};\n  }\n  return this.children_;\n};\n\n\n/**\n * Set the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the new level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @param {goog.debug.Logger.Level} level The new level.\n */\ngoog.debug.Logger.prototype.setLevel = function(level) {\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    this.level_ = level;\n  } else {\n    goog.asserts.assert(!this.name_,\n        'Cannot call setLevel() on a non-root logger when ' +\n        'goog.debug.Logger.ENABLE_HIERARCHY is false.');\n    goog.debug.Logger.rootLevel_ = level;\n  }\n};\n\n\n/**\n * Gets the log level specifying which message levels will be logged by this\n * logger. Message levels lower than this value will be discarded.\n * The level value Level.OFF can be used to turn off logging. If the level\n * is null, it means that this node should inherit its level from its nearest\n * ancestor with a specific (non-null) level value.\n *\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getLevel = function() {\n  return this.level_;\n};\n\n\n/**\n * Returns the effective level of the logger based on its ancestors' levels.\n * @return {goog.debug.Logger.Level} The level.\n */\ngoog.debug.Logger.prototype.getEffectiveLevel = function() {\n  if (!goog.debug.Logger.ENABLE_HIERARCHY) {\n    return goog.debug.Logger.rootLevel_;\n  }\n  if (this.level_) {\n    return this.level_;\n  }\n  if (this.parent_) {\n    return this.parent_.getEffectiveLevel();\n  }\n  goog.asserts.fail('Root logger has no level set.');\n  return null;\n};\n\n\n/**\n * Check if a message of the given level would actually be logged by this\n * logger. This check is based on the Loggers effective level, which may be\n * inherited from its parent.\n * @param {goog.debug.Logger.Level} level The level to check.\n * @return {boolean} Whether the message would be logged.\n */\ngoog.debug.Logger.prototype.isLoggable = function(level) {\n  return level.value >= this.getEffectiveLevel().value;\n};\n\n\n/**\n * Log a message. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n */\ngoog.debug.Logger.prototype.log = function(level, msg, opt_exception) {\n  // java caches the effective level, not sure it's necessary here\n  if (this.isLoggable(level)) {\n    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));\n  }\n};\n\n\n/**\n * Creates a new log record and adds the exception (if present) to it.\n * @param {goog.debug.Logger.Level} level One of the level identifiers.\n * @param {string} msg The string message.\n * @param {Error|Object=} opt_exception An exception associated with the\n *     message.\n * @return {!goog.debug.LogRecord} A log record.\n */\ngoog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {\n  if (goog.debug.LogBuffer.isBufferingEnabled()) {\n    var logRecord =\n        goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);\n  } else {\n    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);\n  }\n  if (opt_exception) {\n    logRecord.setException(opt_exception);\n    logRecord.setExceptionText(\n        goog.debug.exposeException(opt_exception, arguments.callee.caller));\n  }\n  return logRecord;\n};\n\n\n/**\n * Log a message at the Logger.Level.SHOUT level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.shout = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.SEVERE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.severe = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.WARNING level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.warning = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.INFO level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.info = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.CONFIG level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.config = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.FINE level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.fine = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.FINER level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finer = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);\n};\n\n\n/**\n * Log a message at the Logger.Level.FINEST level.\n * If the logger is currently enabled for the given message level then the\n * given message is forwarded to all the registered output Handler objects.\n * @param {string} msg The string message.\n * @param {Error=} opt_exception An exception associated with the message.\n */\ngoog.debug.Logger.prototype.finest = function(msg, opt_exception) {\n  this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);\n};\n\n\n/**\n * Log a LogRecord. If the logger is currently enabled for the\n * given message level then the given message is forwarded to all the\n * registered output Handler objects.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n */\ngoog.debug.Logger.prototype.logRecord = function(logRecord) {\n  if (this.isLoggable(logRecord.getLevel())) {\n    this.doLogRecord_(logRecord);\n  }\n};\n\n\n/**\n * Log a LogRecord.\n * @param {goog.debug.LogRecord} logRecord A log record to log.\n * @private\n */\ngoog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {\n  goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var target = this;\n    while (target) {\n      target.callPublish_(logRecord);\n      target = target.getParent();\n    }\n  } else {\n    for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++]; ) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Calls the handlers for publish.\n * @param {goog.debug.LogRecord} logRecord The log record to publish.\n * @private\n */\ngoog.debug.Logger.prototype.callPublish_ = function(logRecord) {\n  if (this.handlers_) {\n    for (var i = 0, handler; handler = this.handlers_[i]; i++) {\n      handler(logRecord);\n    }\n  }\n};\n\n\n/**\n * Sets the parent of this logger. This is used for setting up the logger tree.\n * @param {goog.debug.Logger} parent The parent logger.\n * @private\n */\ngoog.debug.Logger.prototype.setParent_ = function(parent) {\n  this.parent_ = parent;\n};\n\n\n/**\n * Adds a child to this logger. This is used for setting up the logger tree.\n * @param {string} name The leaf name of the child.\n * @param {goog.debug.Logger} logger The child logger.\n * @private\n */\ngoog.debug.Logger.prototype.addChild_ = function(name, logger) {\n  this.getChildren()[name] = logger;\n};\n\n\n/**\n * There is a single global LogManager object that is used to maintain a set of\n * shared state about Loggers and log services. This is loosely based on the\n * java class java.util.logging.LogManager.\n */\ngoog.debug.LogManager = {};\n\n\n/**\n * Map of logger names to logger objects\n *\n * @type {!Object}\n * @private\n */\ngoog.debug.LogManager.loggers_ = {};\n\n\n/**\n * The root logger which is the root of the logger tree.\n * @type {goog.debug.Logger}\n * @private\n */\ngoog.debug.LogManager.rootLogger_ = null;\n\n\n/**\n * Initialize the LogManager if not already initialized\n */\ngoog.debug.LogManager.initialize = function() {\n  if (!goog.debug.LogManager.rootLogger_) {\n    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger('');\n    goog.debug.LogManager.loggers_[''] = goog.debug.LogManager.rootLogger_;\n    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);\n  }\n};\n\n\n/**\n * Returns all the loggers\n * @return {!Object} Map of logger names to logger objects.\n */\ngoog.debug.LogManager.getLoggers = function() {\n  return goog.debug.LogManager.loggers_;\n};\n\n\n/**\n * Returns the root of the logger tree namespace, the logger with the empty\n * string as its name\n *\n * @return {!goog.debug.Logger} The root logger.\n */\ngoog.debug.LogManager.getRoot = function() {\n  goog.debug.LogManager.initialize();\n  return /** @type {!goog.debug.Logger} */ (goog.debug.LogManager.rootLogger_);\n};\n\n\n/**\n * Method to find a named logger.\n *\n * @param {string} name A name for the logger. This should be a dot-separated\n * name and should normally be based on the package name or class name of the\n * subsystem, such as goog.net.BrowserChannel.\n * @return {!goog.debug.Logger} The named logger.\n */\ngoog.debug.LogManager.getLogger = function(name) {\n  goog.debug.LogManager.initialize();\n  var ret = goog.debug.LogManager.loggers_[name];\n  return ret || goog.debug.LogManager.createLogger_(name);\n};\n\n\n/**\n * Creates a function that can be passed to goog.debug.catchErrors. The function\n * will log all reported errors using the given logger.\n * @param {goog.debug.Logger=} opt_logger The logger to log the errors to.\n *     Defaults to the root logger.\n * @return {function(Object)} The created function.\n */\ngoog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {\n  return function(info) {\n    var logger = opt_logger || goog.debug.LogManager.getRoot();\n    logger.severe('Error: ' + info.message + ' (' + info.fileName +\n                  ' @ Line: ' + info.line + ')');\n  };\n};\n\n\n/**\n * Creates the named logger. Will also create the parents of the named logger\n * if they don't yet exist.\n * @param {string} name The name of the logger.\n * @return {!goog.debug.Logger} The named logger.\n * @private\n */\ngoog.debug.LogManager.createLogger_ = function(name) {\n  // find parent logger\n  var logger = new goog.debug.Logger(name);\n  if (goog.debug.Logger.ENABLE_HIERARCHY) {\n    var lastDotIndex = name.lastIndexOf('.');\n    var parentName = name.substr(0, lastDotIndex);\n    var leafName = name.substr(lastDotIndex + 1);\n    var parentLogger = goog.debug.LogManager.getLogger(parentName);\n\n    // tell the parent about the child and the child about the parent\n    parentLogger.addChild_(leafName, logger);\n    logger.setParent_(parentLogger);\n  }\n\n  goog.debug.LogManager.loggers_[name] = logger;\n  return logger;\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A timer class to which other classes and objects can\n * listen on.  This is only an abstraction above setInterval.\n *\n * @see ../demos/timers.html\n */\n\ngoog.provide('goog.Timer');\n\ngoog.require('goog.events.EventTarget');\n\n\n\n/**\n * Class for handling timing events.\n *\n * @param {number=} opt_interval Number of ms between ticks (Default: 1ms).\n * @param {Object=} opt_timerObject  An object that has setTimeout, setInterval,\n *     clearTimeout and clearInterval (eg Window).\n * @constructor\n * @extends {goog.events.EventTarget}\n */\ngoog.Timer = function(opt_interval, opt_timerObject) {\n  goog.events.EventTarget.call(this);\n\n  /**\n   * Number of ms between ticks\n   * @type {number}\n   * @private\n   */\n  this.interval_ = opt_interval || 1;\n\n  /**\n   * An object that implements setTimout, setInterval, clearTimeout and\n   * clearInterval. We default to the window object. Changing this on\n   * goog.Timer.prototype changes the object for all timer instances which can\n   * be useful if your environment has some other implementation of timers than\n   * the window object.\n   * @type {Object}\n   * @private\n   */\n  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;\n\n  /**\n   * Cached tick_ bound to the object for later use in the timer.\n   * @type {Function}\n   * @private\n   */\n  this.boundTick_ = goog.bind(this.tick_, this);\n\n  /**\n   * Firefox browser often fires the timer event sooner\n   * (sometimes MUCH sooner) than the requested timeout. So we\n   * compare the time to when the event was last fired, and\n   * reschedule if appropriate. See also goog.Timer.intervalScale\n   * @type {number}\n   * @private\n   */\n  this.last_ = goog.now();\n};\ngoog.inherits(goog.Timer, goog.events.EventTarget);\n\n\n/**\n * Maximum timeout value.\n *\n * Timeout values too big to fit into a signed 32-bit integer may cause\n * overflow in FF, Safari, and Chrome, resulting in the timeout being\n * scheduled immediately.  It makes more sense simply not to schedule these\n * timeouts, since 24.8 days is beyond a reasonable expectation for the\n * browser to stay open.\n *\n * @type {number}\n * @private\n */\ngoog.Timer.MAX_TIMEOUT_ = 2147483647;\n\n\n/**\n * Whether this timer is enabled\n * @type {boolean}\n */\ngoog.Timer.prototype.enabled = false;\n\n\n/**\n * An object that implements setTimout, setInterval, clearTimeout and\n * clearInterval. We default to the global object. Changing\n * goog.Timer.defaultTimerObject changes the object for all timer instances\n * which can be useful if your environment has some other implementation of\n * timers you'd like to use.\n * @type {Object}\n */\ngoog.Timer.defaultTimerObject = goog.global;\n\n\n/**\n * A variable that controls the timer error correction. If the\n * timer is called before the requested interval times\n * intervalScale, which often happens on mozilla, the timer is\n * rescheduled. See also this.last_\n * @type {number}\n */\ngoog.Timer.intervalScale = 0.8;\n\n\n/**\n * Variable for storing the result of setInterval\n * @type {?number}\n * @private\n */\ngoog.Timer.prototype.timer_ = null;\n\n\n/**\n * Gets the interval of the timer.\n * @return {number} interval Number of ms between ticks.\n */\ngoog.Timer.prototype.getInterval = function() {\n  return this.interval_;\n};\n\n\n/**\n * Sets the interval of the timer.\n * @param {number} interval Number of ms between ticks.\n */\ngoog.Timer.prototype.setInterval = function(interval) {\n  this.interval_ = interval;\n  if (this.timer_ && this.enabled) {\n    // Stop and then start the timer to reset the interval.\n    this.stop();\n    this.start();\n  } else if (this.timer_) {\n    this.stop();\n  }\n};\n\n\n/**\n * Callback for the setTimeout used by the timer\n * @private\n */\ngoog.Timer.prototype.tick_ = function() {\n  if (this.enabled) {\n    var elapsed = goog.now() - this.last_;\n    if (elapsed > 0 &&\n        elapsed < this.interval_ * goog.Timer.intervalScale) {\n      this.timer_ = this.timerObject_.setTimeout(this.boundTick_,\n          this.interval_ - elapsed);\n      return;\n    }\n\n    this.dispatchTick();\n    // The timer could be stopped in the timer event handler.\n    if (this.enabled) {\n      this.timer_ = this.timerObject_.setTimeout(this.boundTick_,\n          this.interval_);\n      this.last_ = goog.now();\n    }\n  }\n};\n\n\n/**\n * Dispatches the TICK event. This is its own method so subclasses can override.\n */\ngoog.Timer.prototype.dispatchTick = function() {\n  this.dispatchEvent(goog.Timer.TICK);\n};\n\n\n/**\n * Starts the timer.\n */\ngoog.Timer.prototype.start = function() {\n  this.enabled = true;\n\n  // If there is no interval already registered, start it now\n  if (!this.timer_) {\n    // IMPORTANT!\n    // window.setInterval in FireFox has a bug - it fires based on\n    // absolute time, rather than on relative time. What this means\n    // is that if a computer is sleeping/hibernating for 24 hours\n    // and the timer interval was configured to fire every 1000ms,\n    // then after the PC wakes up the timer will fire, in rapid\n    // succession, 3600*24 times.\n    // This bug is described here and is already fixed, but it will\n    // take time to propagate, so for now I am switching this over\n    // to setTimeout logic.\n    //     https://bugzilla.mozilla.org/show_bug.cgi?id=376643\n    //\n    this.timer_ = this.timerObject_.setTimeout(this.boundTick_,\n        this.interval_);\n    this.last_ = goog.now();\n  }\n};\n\n\n/**\n * Stops the timer.\n */\ngoog.Timer.prototype.stop = function() {\n  this.enabled = false;\n  if (this.timer_) {\n    this.timerObject_.clearTimeout(this.timer_);\n    this.timer_ = null;\n  }\n};\n\n\n/** @override */\ngoog.Timer.prototype.disposeInternal = function() {\n  goog.Timer.superClass_.disposeInternal.call(this);\n  this.stop();\n  delete this.timerObject_;\n};\n\n\n/**\n * Constant for the timer's event type\n * @type {string}\n */\ngoog.Timer.TICK = 'tick';\n\n\n/**\n * Calls the given function once, after the optional pause.\n *\n * The function is always called asynchronously, even if the delay is 0. This\n * is a common trick to schedule a function to run after a batch of browser\n * event processing.\n *\n * @param {Function} listener Function or object that has a handleEvent method.\n * @param {number=} opt_delay Milliseconds to wait; default is 0.\n * @param {Object=} opt_handler Object in whose scope to call the listener.\n * @return {number} A handle to the timer ID.\n */\ngoog.Timer.callOnce = function(listener, opt_delay, opt_handler) {\n  if (goog.isFunction(listener)) {\n    if (opt_handler) {\n      listener = goog.bind(listener, opt_handler);\n    }\n  } else if (listener && typeof listener.handleEvent == 'function') {\n    // using typeof to prevent strict js warning\n    listener = goog.bind(listener.handleEvent, listener);\n  } else {\n    throw Error('Invalid listener argument');\n  }\n\n  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {\n    // Timeouts greater than MAX_INT return immediately due to integer\n    // overflow in many browsers.  Since MAX_INT is 24.8 days, just don't\n    // schedule anything at all.\n    return -1;\n  } else {\n    return goog.Timer.defaultTimerObject.setTimeout(\n        listener, opt_delay || 0);\n  }\n};\n\n\n/**\n * Clears a timeout initiated by callOnce\n * @param {?number} timerId a timer ID.\n */\ngoog.Timer.clear = function(timerId) {\n  goog.Timer.defaultTimerObject.clearTimeout(timerId);\n};\n",
		"// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Common events for the network classes.\n */\n\n\ngoog.provide('goog.net.EventType');\n\n\n/**\n * Event names for network events\n * @enum {string}\n */\ngoog.net.EventType = {\n  COMPLETE: 'complete',\n  SUCCESS: 'success',\n  ERROR: 'error',\n  ABORT: 'abort',\n  READY: 'ready',\n  READY_STATE_CHANGE: 'readystatechange',\n  TIMEOUT: 'timeout',\n  INCREMENTAL_DATA: 'incrementaldata',\n  PROGRESS: 'progress'\n};\n",
		"// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Error codes shared between goog.net.IframeIo and\n * goog.net.XhrIo.\n */\n\ngoog.provide('goog.net.ErrorCode');\n\n\n/**\n * Error codes\n * @enum {number}\n */\ngoog.net.ErrorCode = {\n\n  /**\n   * There is no error condition.\n   */\n  NO_ERROR: 0,\n\n  /**\n   * The most common error from iframeio, unfortunately, is that the browser\n   * responded with an error page that is classed as a different domain. The\n   * situations, are when a browser error page  is shown -- 404, access denied,\n   * DNS failure, connection reset etc.)\n   *\n   */\n  ACCESS_DENIED: 1,\n\n  /**\n   * Currently the only case where file not found will be caused is when the\n   * code is running on the local file system and a non-IE browser makes a\n   * request to a file that doesn't exist.\n   */\n  FILE_NOT_FOUND: 2,\n\n  /**\n   * If Firefox shows a browser error page, such as a connection reset by\n   * server or access denied, then it will fail silently without the error or\n   * load handlers firing.\n   */\n  FF_SILENT_ERROR: 3,\n\n  /**\n   * Custom error provided by the client through the error check hook.\n   */\n  CUSTOM_ERROR: 4,\n\n  /**\n   * Exception was thrown while processing the request.\n   */\n  EXCEPTION: 5,\n\n  /**\n   * The Http response returned a non-successful http status code.\n   */\n  HTTP_ERROR: 6,\n\n  /**\n   * The request was aborted.\n   */\n  ABORT: 7,\n\n  /**\n   * The request timed out.\n   */\n  TIMEOUT: 8,\n\n  /**\n   * The resource is not available offline.\n   */\n  OFFLINE: 9\n};\n\n\n/**\n * Returns a friendly error message for an error code. These messages are for\n * debugging and are not localized.\n * @param {goog.net.ErrorCode} errorCode An error code.\n * @return {string} A message for debugging.\n */\ngoog.net.ErrorCode.getDebugMessage = function(errorCode) {\n  switch (errorCode) {\n    case goog.net.ErrorCode.NO_ERROR:\n      return 'No Error';\n\n    case goog.net.ErrorCode.ACCESS_DENIED:\n      return 'Access denied to content document';\n\n    case goog.net.ErrorCode.FILE_NOT_FOUND:\n      return 'File not found';\n\n    case goog.net.ErrorCode.FF_SILENT_ERROR:\n      return 'Firefox silently errored';\n\n    case goog.net.ErrorCode.CUSTOM_ERROR:\n      return 'Application custom error';\n\n    case goog.net.ErrorCode.EXCEPTION:\n      return 'An exception occurred';\n\n    case goog.net.ErrorCode.HTTP_ERROR:\n      return 'Http response at 400 or 500 level';\n\n    case goog.net.ErrorCode.ABORT:\n      return 'Request was aborted';\n\n    case goog.net.ErrorCode.TIMEOUT:\n      return 'Request timed out';\n\n    case goog.net.ErrorCode.OFFLINE:\n      return 'The resource is not available offline';\n\n    default:\n      return 'Unrecognized error code';\n  }\n};\n",
		"// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Constants for HTTP status codes.\n */\n\ngoog.provide('goog.net.HttpStatus');\n\n\n/**\n * HTTP Status Codes defined in RFC 2616.\n * @see http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\n * @enum {number}\n */\ngoog.net.HttpStatus = {\n  // Informational 1xx\n  CONTINUE: 100,\n  SWITCHING_PROTOCOLS: 101,\n\n  // Successful 2xx\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NON_AUTHORITATIVE_INFORMATION: 203,\n  NO_CONTENT: 204,\n  RESET_CONTENT: 205,\n  PARTIAL_CONTENT: 206,\n\n  // Redirection 3xx\n  MULTIPLE_CHOICES: 300,\n  MOVED_PERMANENTLY: 301,\n  FOUND: 302,\n  SEE_OTHER: 303,\n  NOT_MODIFIED: 304,\n  USE_PROXY: 305,\n  TEMPORARY_REDIRECT: 307,\n\n  // Client Error 4xx\n  BAD_REQUEST: 400,\n  UNAUTHORIZED: 401,\n  PAYMENT_REQUIRED: 402,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  METHOD_NOT_ALLOWED: 405,\n  NOT_ACCEPTABLE: 406,\n  PROXY_AUTHENTICATION_REQUIRED: 407,\n  REQUEST_TIMEOUT: 408,\n  CONFLICT: 409,\n  GONE: 410,\n  LENGTH_REQUIRED: 411,\n  PRECONDITION_FAILED: 412,\n  REQUEST_ENTITY_TOO_LARGE: 413,\n  REQUEST_URI_TOO_LONG: 414,\n  UNSUPPORTED_MEDIA_TYPE: 415,\n  REQUEST_RANGE_NOT_SATISFIABLE: 416,\n  EXPECTATION_FAILED: 417,\n\n  // Server Error 5xx\n  INTERNAL_SERVER_ERROR: 500,\n  NOT_IMPLEMENTED: 501,\n  BAD_GATEWAY: 502,\n  SERVICE_UNAVAILABLE: 503,\n  GATEWAY_TIMEOUT: 504,\n  HTTP_VERSION_NOT_SUPPORTED: 505,\n\n  /*\n   * IE returns this code for 204 due to its use of URLMon, which returns this\n   * code for 'Operation Aborted'. The status text is 'Unknown', the response\n   * headers are ''. Known to occur on IE 6 on XP through IE9 on Win7.\n   */\n  QUIRK_IE_NO_CONTENT: 1223\n};\n\n\n/**\n * Returns whether the given status should be considered successful.\n *\n * Successful codes are OK (200), CREATED (201), ACCEPTED (202),\n * NO CONTENT (204), PARTIAL CONTENT (206), NOT MODIFIED (304),\n * and IE's no content code (1223).\n *\n * @param {number} status The status code to test.\n * @return {boolean} Whether the status code should be considered successful.\n */\ngoog.net.HttpStatus.isSuccess = function(status) {\n  switch (status) {\n    case goog.net.HttpStatus.OK:\n    case goog.net.HttpStatus.CREATED:\n    case goog.net.HttpStatus.ACCEPTED:\n    case goog.net.HttpStatus.NO_CONTENT:\n    case goog.net.HttpStatus.PARTIAL_CONTENT:\n    case goog.net.HttpStatus.NOT_MODIFIED:\n    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:\n      return true;\n\n    default:\n      return false;\n  }\n};\n",
		"goog.provide('H.places.util.Ajax');\ngoog.require('goog.net.XhrIo');\n\n\n/**\n * Executes ajax post request\n * @param {string} url of the post endpoint\n * @param {Object} data to be posted for POST requests.\n * @param {Function} onSuccess post result callback\n * @param {Function} onError post error callback\n */\nH.places.util.Ajax.Post = function(url, data, onSuccess, onError) {\n  var request = new goog.net.XhrIo();\n  goog.events.listen(request, goog.net.EventType.COMPLETE, function(data) {\n    if (request.isSuccess()) {\n      onSuccess((data.target && data.target.getResponseJson()) || {});\n    } else {\n      onError(data);\n    }\n  });\n  request.send(url, 'POST', JSON.stringify(data), {'Content-Type' : 'application/json', 'Accept': '*/*'});\n};\n",
		"goog.provide('H.places.util.Object');\n\n\n/**\n * Creates objects with two helper methods:\n *\n * 1. map - allows to map over the values of lookupProperty that is found in obj.\n * 2. list - returns the list of lookupProperties in object\n *\n * @param {Object} obj\n * @param {string} lookupProperty\n * @return {Object} returns object with helper methods\n */\nH.places.util.Object.forEachProperty = function(obj, lookupProperty) {\n  'use strict';\n  var result = {};\n  result.map = function(apply) { return H.places.util.Object.forEachPropertyApply(obj, lookupProperty, apply)};\n  result.list = function() {\n    var list = [];\n    H.places.util.Object.forEachPropertyApply(obj, lookupProperty, function(obj) {\n      list.push(obj);\n      return obj;\n    });\n    return list;\n  };\n  return result;\n};\n\n\n/**\n * Applies the function against the value of the lookupProperty found in obj\n * @param {Object} obj\n * @param {string} lookupProperty\n * @param {Function} apply that gets called against value of the lookupProperty\n * @return {Object} returns object with helper methods\n */\nH.places.util.Object.forEachPropertyApply = function(obj, lookupProperty, apply) {\n  'use strict';\n  if (goog.isArray(obj)) {\n    obj.forEach(function(item, index) {\n      obj[index] = H.places.util.Object.forEachPropertyApply(item, lookupProperty, apply);\n    });\n  } else if (goog.isObject(obj)) {\n    for (var property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        if (lookupProperty == property) {\n          obj = apply(obj);\n        } else {\n          obj[property] = H.places.util.Object.forEachPropertyApply(obj[property], lookupProperty, apply);\n        }\n      }\n    }\n  }\n  return obj;\n};\n\n\n/**\n * Creates new object by merging two objects\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Object} returns merged object\n */\nH.places.util.Object.merge = function(obj1, obj2) {\n  var obj3 = {};\n  for (var property in obj1) {\n    if (obj1.hasOwnProperty(property)) {\n      obj3[property] = obj1[property];\n    }\n  }\n  for (var property in obj2) {\n    if (obj2.hasOwnProperty(property)) {\n      obj3[property] = obj2[property];\n    }\n  }\n  return obj3;\n};\n",
		"goog.provide('H.places.model.GetLink');\ngoog.provide('H.places.model.Link');\ngoog.provide('H.places.model.PostLink');\ngoog.require('goog.object');\ngoog.require('H.places.util.Ajax');\ngoog.require('H.places.util.Object');\ngoog.require('H.places.util.Url');\n\n\n/**\n * Recursively goes through object and finds href properties. For each href property\n * it adds a appropriate utility method that will allow end user to call href\n * @param {Object} object\n * @param {H.service.PlacesService} service\n * @return {Object} object that has decorate any href field\n */\nH.places.model.LinkFactory = function(object, service) {\n  if (!goog.isDef(object)) {\n    return object;\n  }\n\n  if (!goog.isDef(service)) {\n    throw new Error({message: 'service must be specified when creating links'});\n  }\n\n  return H.places.util.Object.forEachProperty(object, 'href').map(\n      function(obj) {\n        var link = obj;\n        if (obj['method'] == 'POST') {\n          // for now we are just allowing report-post endpoint\n          if (goog.isArray(obj['accept']) && goog.array.contains(obj['accept'], 'urn:nlp-types:report-post')) {\n            link = new H.places.model.PostLink(obj);\n          }\n        } else {\n          link = new H.places.model.GetLink(obj, service);\n        }\n        return link;\n      }\n  );\n\n};\n\n\n\n/**\n * GetLink - is abstraction that wraps passed object and creates method for executing GET requests against\n * href value of the object.\n *\n * Our responses from the server are processed in the way that every object that contains href\n * property is wrapped in GetLink in case it href points to GET endpoint.\n * @constructor\n * @param {Object} obj that we are wrapping into GetLink instance. Should contain href property\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n */\nH.places.model.GetLink = function(obj, service) {\n\n  if (!goog.isDef(obj)) {\n    throw new Error({message: 'obj must be specified when creating links'});\n  }\n\n  if (!goog.isDef(service)) {\n    throw new Error({message: 'service must be specified when creating links'});\n  }\n\n  this['service_'] = service;\n  goog.object.extend(this, obj);\n  return this;\n};\n\n\n/**\n * Follows available href by executing ajax get request against it.\n * @param {Function} onResult gets called when result of follow request gets completed\n * @param {Function} onError gets called if something goes wrong when trying to follow link\n * @param {Object} queryParams contains additional query params that should be passed when following link.\n * @export\n * @publish\n */\nH.places.model.GetLink.prototype.follow = function(onResult, onError, queryParams) {\n  var that = this;\n  if (this['href']) {\n    this['service_']['follow'](H.places.util.Url.BuildUrl(this['href'], queryParams), function(result) {\n      onResult(H.places.model.LinkFactory(result, that['service_']));\n    }, onError);\n  } else {\n    onError({'message': 'Can not follow because object does not contain href field.'});\n  }\n};\n\n\n\n/**\n * PostLink - is abstraction that wraps passed object and creates method for executing POST request against\n * href value of the object.\n *\n * Our responses from the server are processed in the way that every object that contains href\n * property is wrapped in PostLink in case it href points to POST endpoint.\n * @constructor\n * @param {Object} obj\n * @export\n * @publish\n */\nH.places.model.PostLink = function(obj) {\n  if (!goog.isDef(obj)) {\n    throw new Error({message: 'obj must be specified when creating links'});\n  }\n  goog.object.extend(this, obj);\n  return this;\n};\n\n\n/**\n * Executes post ajax request against object's href property with data as a body\n * @param {Object} body of the POST request\n * @param {Function} onResult gets called when result of post request gets completed\n * @param {Function} onError gets called if something goes wrong when trying to post\n * @param {Object} queryParams contains additional query params that should be passed when posting\n * @export\n * @publish\n */\nH.places.model.PostLink.prototype.post = function(body, onResult, onError, queryParams) {\n  if (this['href']) {\n    H.places.util.Ajax.Post(H.places.util.Url.BuildUrl(this['href'], queryParams), body, onResult, onError);\n  } else {\n    onError({'message': 'Can not post because object does not contain href field.'});\n  }\n};\n",
		"goog.provide('H.places.model.ResultSet');\ngoog.require('goog.object');\ngoog.require('H.places.model.Link');\ngoog.require('H.places.util.ResponseValidator');\n\n\n\n/**\n * ResultSet - wraps the Discover Result Set and adds auxiliary functions. For more information about Discover Result\n * Set visit our\n * [Places API\n * documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/media-type-search-results.html)\n * @constructor\n * @param {Object} resultSet\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n */\nH.places.model.ResultSet = function(resultSet, service) {\n\n  if (!goog.isDef(service)) {\n    throw new Error({message: 'service is needed'});\n  }\n\n  if (!goog.isObject(resultSet)) {\n    throw new Error({message: 'resultSet is needed'});\n  }\n\n  this.service_ = service;\n  goog.object.extend(this, resultSet);\n  return this;\n};\n\n\n/**\n * Function that follow next link. In case of large collections, next link leads to the next page of the collection.\n * Presence of this function depends if the next parameter on resultSet exist.\n *\n * Follow next link is a Ajax GET request.\n * @param {Function} onResult callback that gets triggered with the full response of the next request.\n * @param {Function} onError callback gets triggered in case of network errors or in case of invalid request\n * @export\n * @publish\n */\nH.places.model.ResultSet.prototype.fetchNext = function(onResult, onError) {\n  if (!goog.isDef(this['next'])) {\n    onError({message: 'next link does not exist'});\n  }\n  var that = this;\n  this.service_['follow'](\n      that['next'],\n      function(result) {\n        result = new H.places.model.ResultSet(result, that.service_);\n        if (H.places.util.ResponseValidator.isValid(result)) {\n          onResult(result);\n        } else {\n          onError(result);\n        }\n      },\n      onError\n  );\n};\n\n\n/**\n * Function that follow previous link. In case of large collections, previous link leads to the previous page of the\n * collection. Presence of this function depends if the previous parameter on resultSet exist.\n *\n * Follow previous link is a Ajax GET request.\n * @param {Function} onResult callback that gets triggered with the full response of the next request.\n * @param {Function} onError callback gets triggered in case of network errors or in case of invalid request\n * @export\n * @publish\n */\nH.places.model.ResultSet.prototype.fetchPrevious = function(onResult, onError) {\n  if (!goog.isDef(this['previous'])) {\n    onError({message: 'previous link does not exist'});\n  }\n  var that = this;\n  this.service_['follow'](this['previous'], function(result) {\n    result = new H.places.model.ResultSet(result, that.service_);\n    onResult(result);\n  }, onError);\n};\n\n",
		"goog.provide('H.places.Categories');\ngoog.provide('H.places.Explore');\ngoog.provide('H.places.PlacesEndpoint');\ngoog.provide('H.places.Search');\ngoog.provide('H.places.Suggest');\ngoog.require('H.places.model.ResultSet');\ngoog.require('H.places.util.Object');\ngoog.require('H.places.util.ResponseValidator');\n\n\n\n/**\n * PlacesEndpoint places request class.\n * @constructor\n * @param {H.service.PlacesService} service\n * @param {string} endpointName\n * @export\n */\nH.places.PlacesEndpoint = function(service, endpointName) {\n  this.endpointName = endpointName;\n  this.service = service;\n};\n\n\n/**\n * Executes request to endpoint.\n * @param {H.service.ServiceParameters} params encapsulates URL parameters to be sent to endpoint.\n * @param {Object} headers required by the endpoint\n * @param {Function} onResult callback that gets triggered with the full response of the request.\n * @param {Function} onError callback gets triggered in case of network errors or in case of invalid request\n * @export\n * @publish\n */\nH.places.PlacesEndpoint.prototype.request = function(params, headers, onResult, onError) {\n  'use strict';\n  var that = this;\n  this.service[this.endpointName](H.places.util.Object.merge(params, headers), function(result) {\n    if (H.places.util.ResponseValidator.isValid(result)) {\n      that.renderSuccess(result, onResult);\n    } else {\n      onError(result);\n    }\n  }, function(e) { onError(e);});\n};\n\n\n/**\n * Creates function for processing response from passed functions as arguments based\n * on functional composition\n * @param {...?} var_args function that are all returning the same type\n * @return {Function} returns composed function. For example compose(f, g)(x) is f(g(x))\n */\nH.places.PlacesEndpoint.prototype.processResponseFn = function(var_args) {\n  var funcs = arguments;\n  var that = this;\n  return function() {\n    var args = arguments;\n    for (var i = funcs.length; i--> 0;) {\n      args = [funcs[i].apply(that, args)];\n    }\n    return args[0];\n  };\n};\n\n\n/**\n * Renders success of the request endpoint. TODO: split this into two function\n * @param {Object} result that needs to be validated\n * @param {Function} onResult that returns the full response of the request. If not defined onResult defined on the\n * endpoint is used.\n */\nH.places.PlacesEndpoint.prototype.renderSuccess = function(result, onResult) {\n  result = this.processResponseFn(this.toResultSet, this.toLink)(result);\n  onResult(result);\n};\n\n\n/**\n * Creates ResultSet from the passed request result object\n * @param {Object} result that needs to be validated\n * @return {Object} result\n */\nH.places.PlacesEndpoint.prototype.toResultSet = function(result) {\n  'use strict';\n  result['results'] = new H.places.model.ResultSet(\n      result['results'], this.service);\n  return result;\n};\n\n\n/**\n * Creates Link objects from passed request result object\n * @param {Object} result that needs to be validated\n * @return {Object} result\n */\nH.places.PlacesEndpoint.prototype.toLink = function(result) {\n  'use strict';\n  result = H.places.model.LinkFactory(result, this.service);\n  return result;\n};\n\n\n\n/**\n * The Explore endpoint retrieves a list of relevant places nearby a given position or area. It answers the question\n * \"What interesting places are in the viewport of the map?\"\n * The results presented to the user are confined to those located in the current map\n * view or search area and are ordered by popularity.\n * For more visit\n * [Places API documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-explore.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Explore = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'explore');\n};\ngoog.inherits(H.places.Explore, H.places.PlacesEndpoint);\n\n\n\n/**\n * The Search endpoint processes text string queries based on the user's input to find specific places.\n * It answers questions of \"what\" and \"where\" for an online search of POI or address.\n * For more visit\n * [Places API documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-search.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Search = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'search');\n};\ngoog.inherits(H.places.Search, H.places.PlacesEndpoint);\n\n\n\n/**\n * The Here endpoint answers the questions \"Where am I?\" and \"What's right here where I am standing?\"\n * The search results consist of a list of places with addresses that lie within the vicinity of the search location.\n * The feature is typically used by applications that include \"check-in\" or \"click on map\n * to get more information\" options.\n * For more visit\n * [Places API documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-here.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Here = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'here');\n};\ngoog.inherits(H.places.Here, H.places.PlacesEndpoint);\n\n\n\n/**\n * The Around endpoint represents sets of places within a specific location context, usually the location of the user.\n * This endpoint is intended for applications that employ features such as augmented reality,\n * where places around the user's location are displayed on a device.\n * It is intended to provide places that are likely to\n * be visible to the user as well as important places that are further away.\n * For more visit\n * [Places API documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-around.html)\n *\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Around = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'around');\n};\ngoog.inherits(H.places.Around, H.places.PlacesEndpoint);\n\n\n\n/**\n * Categories endpoint is used to obtain the place categories available for a given location.\n * The Place Categories endpoint represents sets of locally relevant categories that\n * are organized in a directed acyclic graph.\n * The category graph may change in the future and may differ depending on the location of the request.\n * For more visti\n * [Places API\n * documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-place-categories.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Categories = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'categories');\n};\ngoog.inherits(H.places.Categories, H.places.PlacesEndpoint);\n\n\n/**\n * Function that render Categories request response\n * @param {Object} result that needs to be validated\n * @param {Function} onResult that returns the full response of the request. If not defined onResult defined on the\n * endpoint is used.\n * @override\n */\nH.places.Categories.prototype.renderSuccess = function(result, onResult) {\n  'use strict';\n  onResult(this.processResponseFn(this.toLink)(result));\n};\n\n\n\n/**\n * The Search Suggestions endpoint represents lists of suggested search terms related to a given (partial)\n * search term and location context.\n * This endpoint is used to help users to provide suggested search terms to the user while typing.\n * For more visti\n * [Places API Documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-suggest.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Suggest = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'suggest');\n};\ngoog.inherits(H.places.Suggest, H.places.PlacesEndpoint);\n\n\n/**\n * Function that render Suggest request response\n * @param {Object} result\n * @param {Function} onResult that returns the full response of the request. If not defined onResult defined on the\n * endpoint is used.\n * @export\n * @override\n */\nH.places.Suggest.prototype.renderSuccess = function(result, onResult) {\n  'use strict';\n  onResult(result);\n};\n\n\n\n/**\n * Lookup Endpoint provides ability to find a place by its foreign ID.\n * For more visti\n * [Places API Documentation](http://places.demo.api.here.com/places/static/doc/public/#topics/resource-lookup.html)\n * @constructor\n * @param {H.service.PlacesService} service\n * @export\n * @publish\n * @extends {H.places.PlacesEndpoint}\n */\nH.places.Lookup = function(service) {\n  'use strict';\n  H.places.PlacesEndpoint.call(this, service, 'lookup');\n};\ngoog.inherits(H.places.Lookup, H.places.PlacesEndpoint);\n\n\n/**\n * Executes request to endpoint.\n * @param {H.service.ServiceParameters} params encapsulates URL parameters to be sent to endpoint.\n * @param {Object} headers encapsulates headers to be sent to endpoint.\n * @param {Function} onResult callback that gets triggered with the full response of the request.\n * @param {Function} onError callback gets triggered in case of network errors or in case of invalid request\n * @export\n * @publish\n * @override\n */\nH.places.Lookup.prototype.request = function(params, headers, onResult, onError) {\n  'use strict';\n  var that = this;\n  this.service['request']('places/lookup', H.places.util.Object.merge(params, headers), function(result) {\n    if (H.places.util.ResponseValidator.isValid(result)) {\n\n      that.renderSuccess(result, onResult);\n\n    } else {\n      onError(result);\n    }\n  }, function(e) { onError(e);});\n};\n\n\n/**\n * Function that render Categories request response\n * @param {Object} result that needs to be validated\n * @param {Function} onResult that returns the full response of the request. If not defined onResult defined on the\n * endpoint is used.\n * @override\n */\nH.places.Lookup.prototype.renderSuccess = function(result, onResult) {\n  'use strict';\n  onResult(this.processResponseFn(this.toLink)(result));\n};\n",
		"if (COMPILED) {\n  goog.provide('H');\n}\n\n\n/** @suppress {duplicate} */\nvar H = H || {};\n\n\n/**\n * H.places is a thin javascript layer wrapper around The HERE Places API.\n * The HERE Places API is a web service that allows your applications to use the HERE Places information and search\n * facilities.\n *\n * This library is built as a wish to help developers start using Places API more easily.\n * The Places API is a REST API that serves hyper-media responses. Some functionality can be accessed through\n * entrypoints that can be called directly,\n * while other functionality is accessed by following links in the responses of previous calls. Library tries\n * to simplify this by adding Endpoint abstraction for different kind of requests\n * and by decorating response with helper functions.\n *\n * This document list all of possible entrypoints and operation available in the library.\n * For tutorial how to use Places API in general head to [playground](http://places.demo.api.here.com/places/).\n * More detailed [Places API documentation](http://places.demo.api.here.com/places/static/doc/public/)\n * is also available.\n * @namespace H.places\n * @publish\n */\ngoog.provide('H.places');\n\n\n/**\n *\n * @namespace H.places.model\n * @publish\n */\ngoog.provide('H.places.model');\ngoog.require('H.places.Explore');\ngoog.require('H.places.Search');\ngoog.require('H.places.model.GetLink');\n\n\n/**\n * Function returns build information\n * @return {H.util.BuildInfo}\n * @export\n */\nH.places.buildInfo = function() {\n  'use strict';\n  return H.util.BuildInfo.get('{BUILD_NAME}', '{BUILD_VERSION}', '{BUILD_REVISION}');\n};\n"
	]
}